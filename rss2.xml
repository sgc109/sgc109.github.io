<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sungho&#39;s Blog</title>
    <link>http://sgc109.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Sungho&#39;s Blog</description>
    <pubDate>Sat, 23 Jul 2022 13:35:53 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Red Hat 오픈소스에 기여한 이야기</title>
      <link>http://sgc109.github.io/2021/11/18/contribution-to-debezium/</link>
      <guid>http://sgc109.github.io/2021/11/18/contribution-to-debezium/</guid>
      <pubDate>Wed, 17 Nov 2021 17:29:22 GMT</pubDate>
      <description>
      
        &lt;p&gt;얼마전 &lt;code&gt;Debezium(디비지움)&lt;/code&gt;이라는 오픈소스 프로젝트에 처음으로 &lt;a href=&quot;https://github.com/debezium/debezium/pull/2877&quot;&gt;코드로 기여를 하였다&lt;/a&gt;. 이전까지는 여러 오픈소스 프로젝트의 README 나 문서에 대한 컨트리뷰션 밖에 해보지 못했는데 드디어 코드로써의 기여를 하게 되었다.&lt;/p&gt;
&lt;p&gt;비록 특별한 내용은 없지만 나의 경험이 처음으로 오픈소스 컨트리뷰션을 하고자 하는 사람들에게 조금이나마 도움이 되었으면 하는 마음에서 글을 작성하게 되었다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>얼마전 <code>Debezium(디비지움)</code>이라는 오픈소스 프로젝트에 처음으로 <a href="https://github.com/debezium/debezium/pull/2877">코드로 기여를 하였다</a>. 이전까지는 여러 오픈소스 프로젝트의 README 나 문서에 대한 컨트리뷰션 밖에 해보지 못했는데 드디어 코드로써의 기여를 하게 되었다.</p><p>비록 특별한 내용은 없지만 나의 경험이 처음으로 오픈소스 컨트리뷰션을 하고자 하는 사람들에게 조금이나마 도움이 되었으면 하는 마음에서 글을 작성하게 되었다.</p><a id="more"></a><p><img src="/images/contribution-to-debezium/merged-pr.png" alt="머지된 PR 스샷"></p><p><a href="https://github.com/debezium/debezium">Debezium(디비지움)</a>은 Red Hat 에서 관리되는 프로젝트이며, <strong>CDC(Change Data Capture)</strong> 를 위한 도구이다. CDC는 간단히 말해서 데이터의 변화를 포착하여 적절한 처리를 할 수 있도록 하는 행위를 말하는데, <strong>데이터 파이프라인(ETL)</strong> 이나 <strong>마이크로서비스 아키텍처(Outbox Pattern)</strong> 등 다양한 곳에서 활용된다.</p><h2 id="동기">동기</h2><p>Debezium 에 기여하게된 동기에 대한 이야기를 하기 전에 아주 간단하게 Debezium 에 대한 설명을 하는 것이 좋을것 같다.</p><h3 id="Debezium-의-특징">Debezium 의 특징</h3><p>Debezium 은 기본적으로 DB의 replication 메커니즘에서 사용되는 transaction log(e.g. MySQL 의 binlog 와 MongoDB 의 oplog)를 tailing 하여 실시간으로 데이터의 변경을 포착한다. 현재 지원하는 DB는 8가지(MySQL, MongoDB, PostgreSQL, Oracle, SQL Server, Db2, Cassandra, Vitess)이다.</p><p>Debezium 를 사용하는 방법은 크게 3가지가 있다. 우선 <strong>Kafka Connect 의 connector</strong> 로 실행시키는 것이 가장 일반적인 사용 방법이다. 디비지움은 각 DB 별 connector 를 제공한다.</p><p>이 방식을 사용할 경우 Debezium connector 는 데이터 변경 이벤트를 Kafka 에 실시간으로 전송하게 된다.</p><p><img src="/images/contribution-to-debezium/debezium-architecture.png" alt="Kafka Connect 를 통한 Debezium 의 가장 기본적인 사용 방식 (출처: https://debezium.io/documentation/reference/1.8/architecture.html)"></p><p>두번째는 <strong>Debezium Engine</strong> 라는 것을 사용하는 것인데, 애플리케이션에서 API를 통해 디비지움의 CDC 기능을 사용할 수 있다.</p><p>마지막으로는 <strong>Debezium Server</strong> 라고, 디비지움에서 자체적으로 만든 별도의 서버를 띄우는 방법이다. 참고로 이 방식은 아직 인큐베이팅 상태라서 향후 기능이 변경 될 가능성이 있다.</p><p>두번째와 세번째 방식은 첫번째 방식과는 다르게 Kafka 를 거치지 않고도 다른 곳으로 데이터를 바로 보낼 수 있다.</p><p>Kafka Connect 는 <strong>SMT(Single Message Transforms)</strong> 라는 기능을 제공하는데, source connector 가 카프카에 레코드를 쏘기 전에, 혹은 sink connector 가 카프카에서 레코드를 가져온 후에 Key, Value, Header 등 레코드의 정보를 변경할 수 있도록 한다.</p><p>Debezium 도 자체 connector 와 함께 사용할 수 있는 <a href="https://debezium.io/documentation/reference/nightly/transformations/index.html">SMT 를 몇 가지 제공한다</a>.</p><h3 id="그래서-어떤-기여를-왜-했나">그래서 어떤 기여를, 왜 했나</h3><p>Event-driven MSA로 서버 아키텍처를 구성하던 도중 <a href="https://microservices.io/patterns/data/transactional-outbox.html">트랜잭셔널 아웃박스 패턴</a>을 위해서 CDC 기능이 필요했다. 그래서 어떤 도구를 사용할까 살펴보던 도중 Debezium 이 눈에 들어왔다. 어느정도 훑어보니 괜찮아 보여서 한 번 사용해보고 싶었는데, SQL DB 의 경우 즉시 사용할 수 있는 SMT 가 존재했지만, MongoDB 는 직접 커스텀 SMT 를 개발해야 했다. 기존의 Outbox SMT 가 MongoDB 를 지원하지 않는 이유는 MongoDB 의 connector 가 만들어내는 Record 에서 변경된 이후의 데이터를 담고있는 <code>after</code> 필드의 구조가 다르기 때문이다. Debezium 에서 제공하는 다른 SMT의 경우도 SQL DB 용과 MongoDB 용이 별도로 존재하는 경우가 있다.</p><p>아무튼 그래서 이참에 그냥 내가 직접 개발해서 컨트리뷰션을 하면 어떨까 생각을 하게 되었다. 그래서 디비지움 IRC 에서 메인테이너에게 이 기능에 관심이 있다고 했고, 메인터이너는 기존에 있던 <a href="https://issues.redhat.com/browse/DBZ-3528">이슈의 링크</a>를 주었다. 참고로 디비지움은 원래 Gitter 를 통해 IRC 채널을 운영했는데, 2021년 하반기부터는 <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip</a>을 사용하고 있다.</p><p><img src="/images/contribution-to-debezium/irc.png" alt="디비지움의 IRC 에서 다양한 소통을 할 수 있다"></p><p><img src="/images/contribution-to-debezium/jira-issue2.png" alt="디비지움의 모든 이슈는 Jira 에서 관리된다"></p><p>이슈를 살펴보니 이슈의 작성자가 설계에 대한 고민을 적어두었는데, 내가 했던 고민과 정확히 같았다. 그래서 메인테이너에게 내가 생각하는 구현 방식을 제안해봤더니 좋은것 같다고 해서 개발을 시작하게 되었다.</p><h2 id="과정">과정</h2><p>우선 <a href="https://github.com/debezium/debezium/blob/main/CONTRIBUTE.md">CONTRIBUTE.md</a> 의 내용을 정독하는 것이 굉장히 중요했다. 프로젝트마다 차이는 있을 수 있겠지만 디비지움의 경우는 컨트리뷰션 가이드가 꽤 상세하게 기술되어 있다. 그래서 초반에 드는 궁금증 중에 상당 부분은 이곳에서 답을 찾을 수 있다.</p><p>PR 과 커밋이 따라야하는 규칙들, 커밋 메시지의 형식, 테스트 방법, code formatting 방식 등의 대한 정보가 적혀있는데, 예를 들자면 새로운 기능을 추가하는 PR은 항상 그 기능에 대한 단위 테스트/통합 테스트, 그리고 문서도 함께 작성돼야 한다는 규칙이 존재한다.</p><p>위와 같은 규칙에 따라 <a href="https://debezium.io/documentation/reference/1.8/transformations/mongodb-outbox-event-router.html">문서</a>도 함께 작성하게 되었다. 물론 기존의 SQL DB 용 SMT 와 동일한 기능을 제공하는것이 목표였기 때문에 기존의 문서와 전체적인 짜임새는 비슷하게 갈 수 있었다.</p><p><img src="/images/contribution-to-debezium/documentation.png" alt="공식 사이트에 반영된 직접 작성한 문서"></p><h3 id="개발">개발</h3><p>이렇게 큰 프로젝트에 기여를 막상 하려고하면 처음엔 굉장히 막막하다. 그래서 우선 전체적인 동작 원리와 사용 방식에 대한 감을 잡기위해 최대한 많은 정보를 활용하려고 했다.</p><p>우선 프로젝트의 전체적인 그림과 방향성을 파악하기 위해 깃헙 레포를 Watch 하고 구글 그룹에 가입하여 실시간으로 개발자들간의 토론이나 새로운 이슈에 대한 알림을 받아보았다.</p><p>공식 문서와 블로그의 글을 많은 부분 정독했고, 가장 관련이 있는 기능들의 비즈니스 로직과 단위/통합 테스트 코드를 참고했다. 참고했던 주요한 부분은 기존의 SQL DB 용 Outbox SMT 인 <strong>Outbox Event Router</strong> 와 MongoDB connector 에서 JSON string 형태의 envelope 을 flattening 할 때 사용되는 SMT 인 <strong>MongoDB New Document State Extraction</strong> 이었다.</p><p>잘 작성된 테스트 코드는 클래스의 기능을 잘 나타내기 때문에 테스트를 하나씩 실행시키면서 테스트 코드를 분석했다. 그러면서 어떤 기능들이 필요한지 둘러보았고, 테스트는 어떤 식으로 작성해야하는지 파악했다. 전체적인 그림이 잡혀나가기 시작할 무렵, 우선 필요한 기능들에 대한 단위 테스트를 작성했고, 이것들을 모두 통과하기 위한 실제 코드를 작성하였다.</p><p>개발 중간마다 설계에 대한 고민과 이 SMT 를 유저가 어떻게 사용하게 할 것인지에 대한 여러가지 고민을 하기도 했는데, 이건 IRC 에서 메인테이너들과 이야기를 나누거나 코드 리뷰를 통해 개발 방향을 명확히 하였다.</p><p>PR 을 올리고 나서 받은 다양한 피드백 중에 동의하는 부분은 수정했고, 일부 의견에 대해서는 대화가 필요하기도 했다. 나는 내가 고민한 부분과 그것에 대한 솔직한 나의 의견에 대해 가능한 자세하게 말했다. 물론 전체 프로젝트에 대해서는 메인테이너가 훨씬 잘 알것이고 실력도 나보다 뛰어나겠지만 큰 규모의 프로젝트를 관리하다보면 디테일한 부분을 모두 기억하지 못 할 수도 있고, 적어도 내가 작업한 부분에 대해서는 나도 어느정도 잘 안다고 생각했기 때문에 자신감과 오너십을 가져야한다고 생각했다.</p><p><img src="/images/contribution-to-debezium/discussion2.png" alt="메인테이너의 피드백에 대한 나의 의견을 상세하게 적기도 했다"></p><h2 id="후속-작업">후속 작업</h2><h3 id="애그리거트-ID-기본-타입-변경">애그리거트 ID 기본 타입 변경</h3><p>Outbox 콜렉션에서 aggregateid 의 기본 타입을 String 으로 개발을 진행했는데, 메인테이너가 ObjectId 로 변경하는 것이 어떻겠냐고 했다. 만약 같은 생각이면 후속 PR로 이 부분을 수정하면 좋을것 같다고 했는데 나도 같은 생각이라 이 부분에 대한 작업을 하면 좋을것 같다.</p><p>+ 추가(21.11.21): <a href="https://github.com/debezium/debezium/pull/2967">후속 PR</a>을 통해 변경을 완료했다.</p><p><img src="/images/contribution-to-debezium/follow-up-pr.png" alt=""></p><h3 id="샘플-프로젝트">샘플 프로젝트</h3><p>디비지움은 <a href="https://github.com/debezium/debezium-examples">debezium-example</a>이라는 레포를 통해 Debezium 을 활용한 다양한 예제를 제공한다. 기존 <a href="https://github.com/debezium/debezium-examples/tree/main/outbox">SQL 용 Outbox SMT 에 대한 예제</a>도 존재한다.</p><p><img src="/images/contribution-to-debezium/outbox-example.png" alt="Outbox Event Router 샘플 프로젝트의 README"></p><p>이곳에 MongoDB Outbox Event Router 에 대한 예제 프로젝트도 만들어야하는데 이 부분도 개발할 생각이 있는지 제안을 받았다. 그래서 시간이 날 때 추가 기여를 하려고 생각 중이다.</p><p>+ 추가(21.11.27): <a href="https://github.com/debezium/debezium-examples/pull/189">후속 PR</a>을 통해 예제 추가를 완료했다. 메인테이너가 로컬에서 머지를 해서 원래 PR 은 closed 가 됐다. 하지만 main 브랜치에는 커밋이 잘 들어가 있는 것을 <a href="https://github.com/debezium/debezium-examples/commit/528be406d9bd9c3595bfae881eddbadd3581cf90">확인할 수 있다</a>.</p><h3 id="Embedded-Document-형태를-지원하는-옵션">Embedded Document 형태를 지원하는 옵션</h3><p>MongoDB 같은 Document DB 의 경우 일반적인 관계형 DB 와 데이터 모델링을 하는 방식이 조금 다르다. 보통 높은 정규화를 하지 않고 여러 데이터를 하나의 Document 에 저장하도록 데이터를 모델링하는 경우가 많기 때문에 multi-document 트랜잭션을 사용하지 않고 Outbox Pattern 을 사용할 수 있도록 하는 기능을 제공하면 좋겠다고 생각했다. 그래서 처음에 Jira 이슈에서도 우선은 별도의 Collection 으로 Outbox 데이터를 저장하여 multi-document 트랜잭션을 사용하도록 하고, 추후 업데이트를 통해서 이런 기능을 사용할 수 있는 설정을 추가 개발하면 어떻겠냐고 제안했었다.</p><h3 id="그-외">그 외</h3><p>MySQL 과 MongoDB Connector 의 코어 로직에 대한 기여도 해보고 싶어서 소스 코드를 분석하고 있다. 또, Jira 에 올라와있는 다양한 이슈들을 보면서 현재 어떤 작업들이 필요한지 둘러보고 이 중에 관심있는 이슈는 watch 기능으로 진행 상황을 지켜보려고 하고있다.</p><h2 id="느낀점">느낀점</h2><p>개발자가 새로운 팀에 합류하게 되면 기존에 개발되어 있는 방대한 양의 코드와 아키텍처를 빠르게 파악하고 기존의 규칙들을 정확하게 준수하여 코드를 기여해야 하는 경우가 많을 것이고, 기존 기능을 변경하거나 새로운 기능을 추가 하기 위해 다른 개발자와의 커뮤니케이션이 중요할 것이다. 이러한 점에서 다양한 오픈소스에 기여를 하는 경험이 실제 업무를 하는데도 큰 도움이 될 것 같다는 생각이 들었다.</p><p>또, 영어로 전세계의 다양한 개발자들과 소통을 하며 오픈소스에 기여함으로써 외국 기업에서의 협업을 간접적으로 경험할 수 있는것 같다. 그래서 만약 나중에 실제 업무에서 영어로 협업을 해야하는 상황이 온다면 이런 경험이 조금이나마 도움이 되지 않을까 생각이 든다.</p><p>추가로, 잘 관리되는 오픈소스 프로젝트의 소스코드를 분석하면 좋은 설계와 코드를 경험할 수 있어 좋은것 같다. 평소에 오픈소스를 '사용할 때'에는 직접 작성할 일이 많지 않을 수 있는 정교한 최적화나 로우 레벨 코드도 볼 수 있는 경우도 있어서 공부가 되기도 한다. 이러한 점에서 앞으로도 Debezium 뿐 아니라 다양한 오픈소스의 코드를 분석하여 기여해보려고 한다. 비록 이번에 기여한 기능은 복잡한 기능은 아니었기 때문에 상대적으로 어렵지 않았지만, 다른 오픈소스 프로젝트의 코드에도 기여할 수 있다는 자신감이 생겨서 시간이 날 때 내부 동작을 자세하게 알고 싶은 다양한 오픈소스들의 코드를 분석해 보려고 한다.</p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2021/11/18/contribution-to-debezium/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MSA가 좋지만은 않은 이유</title>
      <link>http://sgc109.github.io/2021/10/22/about-msa/</link>
      <guid>http://sgc109.github.io/2021/10/22/about-msa/</guid>
      <pubDate>Fri, 22 Oct 2021 09:18:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;마이크로서비스 아키텍처(MSA)&lt;/code&gt;의 목표는 하나의 거대한 서비스를 일정한 기준으로 쪼갠 여러 stand-alone 서비스로 구동하여 각 애플리케이션의 복잡도와 이들 간의 결합도를 낮춤으로써 궁극적으로는 전체 시스템을 좀 더 생산적으로 개발하고 운영하는 것이라고 볼 수 있다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>마이크로서비스 아키텍처(MSA)</code>의 목표는 하나의 거대한 서비스를 일정한 기준으로 쪼갠 여러 stand-alone 서비스로 구동하여 각 애플리케이션의 복잡도와 이들 간의 결합도를 낮춤으로써 궁극적으로는 전체 시스템을 좀 더 생산적으로 개발하고 운영하는 것이라고 볼 수 있다.</p><a id="more"></a><p>시스템의 요구사항이 많아지면 애플리케이션은 점점 덩치가 커져 하나의 거대한 모놀리식 애플리케이션이 되고, 그렇게 되면 다음과같은 단점이 있기 때문에 서비스를 더 작은 부분들로 쪼개는 것이다.</p><h2 id="모놀리식-애플리케이션의-단점">모놀리식 애플리케이션의 단점</h2><h3 id="낮은-개발-생산성">낮은 개발 생산성</h3><p>시스템의 요구사항이 많아질 수록 코드의 양은 늘어날 것이다. 그러면 개발자가 모든 피쳐를 파악하기가 점점 더 어려워지기 때문에 새로운 기능을 추가하거나 코드를 변경하기도 더 어려워 질 것이다. 빌드 시간도 함께 늘어날 것이다. 예를 들어 배달 서비스를 개발한다고 할 때, 음식을 주문하는 로직에 아주 약간의 코드를 변경했다고 해보자. 그럼에도 불구하고 거의 전체 애플리케이션을 다시 빌드하고 재배포해야 할 수도 있다. 빌드 시간이 느려지면 코드를 변경하고 재배포 될 때 까지의 시간이 늘어나기 때문에 개발 생산성이 떨어질 수 있다. 그런데 만약 주문 서비스가 분리되어 있다면 주문 서비스만 빌드하고 재배포하면 될 것이다.<br>게다가 코드의 양이 과도하게 많으면 IDE 의 실행 속도도 느려지기 때문에 개발 환경에 따라 개발 생산성에 영향을 미칠 수도 있다.</p><h3 id="팀-운영의-어려움">팀 운영의 어려움</h3><p>애플리케이션의 규모가 커질 수록 그에 비례하여 필요한 인력도 많아질 것이다. 한 팀이 너무 많은 인원으로 이루어진다면 다양한 의견을 수렴하거나 의사결정하는데 어려움이 있을 수 있다. 만약 팀을 효율적으로 운영하기 위해서 여러개의 팀으로 나누어 하나의 코드 베이스를 개발하고 운영하더라도 역할의 경계가 명확하지 않아 책임소재도 불분명해지는 등 다양한 어려움이 있을 수 있다. 하지만 만약 하나의 거대한 서비스가 여러개의 작은 서비스로 분리된다면 팀 별로 서비스를 나누어 독자적으로 개발 및 운영을 할 수 있게 된다. 그리고 팀마다 서로 다른 프로그래밍 언어, 또는 기술을 사용할 수 있게 되어 새로운 기술의 도입이 비교적 자유롭다는 추가적인 이점도 있다.</p><h3 id="결함-격리의-어려움">결함 격리의 어려움</h3><p>주식 거래 서비스를 예로 들면, 모놀리식 애플리케이션에서 사용자의 주식 주문 히스토리를 반환하는 API 에 문제가 생겨 애플리케이션이 다운되었다고 해보자. 그러면 다시 복구가 될 때까지 사용자는 원활하게 주문을 하지 못할 수도 있고, 결과적으로 회사는 막대한 금전적인 손실을 입을 수도 있다. 하지만 만약 주문 히스토리 서비스와 주문 서비스가 분리되어 별도의 애플리케이션으로 실행 중이라면, 주문 히스토리 서비스가 다운되더라도 사용자가 자신의 주문 히스토리를 볼 수 없게 될 지언정, 주문을 하는데는 아무런 문제가 없기 때문에 상대적으로 금전적인 손실을 덜 입을 가능성이 높다.</p><h3 id="확장의-어려움">확장의 어려움</h3><p>예를 들어 이미지 프로세싱은 CPU 집중적인 작업이기 때문에 높은 CPU 성능이 필요할 것이고, 많은 데이터를 메모리에 유지하는 작업은 많은 메모리 용량이 필요할 것이다. 하지만 이미지 프로세싱 모듈과 많은 메모리를 사용하는 모듈이 하나의 애플리케이션으로 실행 중이라면 각 모듈을 독립적으로 확장할 수가 없기 때문에 상대적으로 리소스 사용 효율성이 떨어질 수 있다.</p><h2 id="MSA-에서-추가로-고민해야-할-점">MSA 에서 추가로 고민해야 할 점</h2><p>시스템을 MSA 로 구성하면 위와 같은 모놀리식 애플리케이션의 문제를 어느정도 해결할 수 있다. 하지만 모든 기술에 trade-off 가 있듯이 MSA 에도 단점이 있다. 한 줄로 요약하자면 할 일이 많아지고 고민해야 할 부분이 많아진다는 것이다. 그렇기 때문에 개발 및 운영 생산성이 단순히 향상된다고만 볼 수는 없다.</p><h3 id="IPC">IPC</h3><p>도메인 서비스 간의 상호작용 시 모놀리식에서는 하나의 프로세스 내에서의 메서드 콜이었지만 MSA 에서는 각 서비스가 별도의 프로세스로 실행되므로 <strong>IPC(Inter-Process Communication)</strong> 가 된다. 보통 각 서비스의 프로세스는 네트워크 상에서 떨어져서 실행된다. 그렇기 때문에 이 네트워크 상에서 떨어진 서로 다른 프로세스 간의 통신을 위한 방법을 고민해야 한다. 가장 떠올리기 쉬운 방법은 역시 HTTP 나 gRPC 같은 동기 방식이다. 하지만 동기 방식으로 통신하기 위해서는 통신의 양쪽 주체가 모두 정상적으로 실행 중이어야 하기 때문에 상대적으로 가용성이 떨어진다.<br>비동기 메시징 방식으로 통신할 수도 있다. Akka 와 같은 별도의 메시지 브로커 없이 동작하는 액터 기반의 도구를 사용할 수도 있을 것이다. 관리 대상 컴포넌트가 추가되지 않는다는 장점이 있지만 가용성은 낮다. 카프카와 같은 메시지 브로커를 통한 비동기 메시징 방식을 사용하면 관리 대상 컴포넌트가 추가되고 SPOF 가 되지 않도록 클러스터링을 해야하기 때문에 복잡도는 증가하지만 가용성이 높고 여러 이점이 있기 때문에 event-driven microservice architecture 를 구현할 때 보통 많이 사용되는 방식이다. 또한 카프카와 같이 at-least-once 전달 방식의 메시지 브로커를 사용한다면 애플리케이션의 메시지 컨슈머를 멱등하게 작성해야한다는 사실도 잊으면 안된다. 각 IPC 방식의 장단점이 있기 때문에 필요에 따라 적절히 선택하여 사용하는 것이 가장 좋을 것이다. 서로 다른 서비스의 엔드포인트를 알아내기 위해 서비스 디스커버리도 필요할 수 있다. Netflix 의 <a href="https://github.com/Netflix/eureka">유레카</a> 같은 도구를 쓰기도 하지만 쿠버네티스를 사용한다면 굳이 별도의 서비스 디스커버리를 위한 도구를 고려할 필요는 없다. 아무튼 어떤 방법을 사용하던 관련 코드가 추가되고, 관리 대상 컴포넌트가 추가될 수 있기 때문에 모놀리식 애플리케이션과는 다른 이유에서 어느정도의 개발 및 운영 비용이 증가한다고 볼 수 있다.</p><h3 id="분산-트랜잭션">분산 트랜잭션</h3><p>모놀리식 애플리케이션에서는 하나의 로컬 DB 트랜잭션으로 여러 하위 도메인의 데이터를 ACID 하게 변경할 수 있다. 예를 들어 주식 거래 앱으로 사용자가 했던 주문이 체결되었을 때 하나의 로컬 트랜잭션으로 사용자가 보유한 현금은 줄이고, 주문 상태는 '체결됨' 상태로 변경하고, 보유 주식은 늘리는 것이 가능하다. 하지만 MSA 에서는 각 서비스가 별도의 DB 를 가지고, 기존에 하나의 DB 에 모두 저장되었던 데이터는 각 마이크로서비스의 DB 에 나뉘어져 관리된다. 그렇기 때문에 만약 주식 거래 서비스를 <em>주문 서비스</em>, <em>주식 잔고 서비스</em>, <em>회계 서비스</em> 등으로 구성한다면 각 서비스에서 실행되는 여러 로컬 트랜잭션을 하나의 글로벌 트랜잭션으로 묶어 ACID 하게 할 필요가 있는 것이다. ACID 트랜잭션에 대한 이해가 없다면 분산 트랜잭션 없이 그냥 매번 HTTP/gRPC 등으로 다른 서비스에 요청하여 데이터를 변경시키면 되는거 아닌가 할 수도 있는데, 이러면 데이터의 변경이 Atomic 하지 않기 때문에 중간에 서버나 인프라 오류 등 발생 시 데이터 정합성이 깨질 수 있으며, 트랜잭션 컨텍스트도 유실될 가능성이 있다. 아무튼 분산 트랜잭션을 하는 방법은 몇 가지가 있는데 우선 <strong>2PC</strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 방식으로 처리할 수 있다. 이 방식의 단점은 가용성이 낮다는 것이다. 분산 트랜잭션을 성공적으로 수행하기 위해서는 트랜잭션의 시작과 끝까지 트랜잭션에 참여하는 모든 컴포넌트가 정상적으로 실행 중이어야 하며 트랜잭션 커밋 요청을 정상적으로 수행해야 한다. 만약 한 컴포넌트라도 실행 중이지 않다면 전체 트랜잭션은 성공할 수 없을 것이다. 즉 트랜잭션에 참여하는 컴포넌트들에게 강한 의존성을 갖는다고 볼 수 있다. 또 다른 방법으로는 <strong>Saga 패턴</strong>이 있는데, 트랜잭션에 참여하는 컴포넌트들 간의 결합을 느슨하게 하여 2PC 방식보다 높은 가용성을 가질 수 있다<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>는 장점이 있어 요즘 많이 사용되는 방식이다. 사가 패턴에서는 각 로컬 트랜잭션이 비동기 메시지를 통해 순차적으로 커밋이 된다. 만약 중간에 문제가 발생하면 지금까지와 반대의 순서로 보상 트랜잭션을 실행한다.<br>하지만 사가 패턴은 ACID 에서 I(Isolation)가 빠진 <strong>ACD 트랜잭션</strong>이다. 즉 여러개의 트랜잭션이 동시에 실행될 경우 격리가 되지 않아 서로에게 영향을 미칠 수가 있다는 뜻이다. 이 때 발생할 수 있는 대표적인 문제는 한 트랜잭션이 변경한 데이터를 다른 트랜잭션이 덮어 쓰는 lost updates 나 한 트랜잭션이 실행되는 도중에 다른 트랜잭션이 변경한 데이터를 읽는 dirty reads 와 같은 것들이 있다. 이런 비격리로 인해 발생하는 문제를 해결하기 위한 여러 방법들이 있다. 높은 일관성을 요구하는 데이터만 사가 패턴이 아닌 2PC 를 사용하는 식으로 혼용해서 사용할 수도 있다. 아무튼 사가 패턴을 사용할 경우 이런 부분을 꼼꼼하게 고려하지 않으면 큰 문제로 이어질 수 있기 때문에 신경써야할 부분이 더 많다.</p><p>뿐만 아니라, 사가 패턴을 사용하거나 도메인 이벤트를 발행해야 하는 경우 이벤트의 발행이 누락되면 안된다. 그래서 데이터의 변경과 메시지의 발행을 Atomic 하게 동작하도록 하기 위한 <strong>Transactional Messaging</strong> 도 고려해야 한다. DB 와 메시지 브로커는 트랜잭션 메커니즘이 다르기 때문에 서로의 operation 을 하나의 트랜잭션으로 묶을 수가 없다. 그렇기 때문에 이 둘에 따로 따로 쓰기를 수행할 경우(일명 dual-writes) 일부 데이터가 유실되어 inconsistent 하게 될 수 있기 때문에 DB 던 메시지 브로커던 둘 중 하나에만 쓰기를 수행해야 한다. 만약 메시지 브로커에만 쓰기를 수행하는 경우를 본다면, 메시지 브로커에 데이터 변경 이벤트를 쓰고 서버가 이를 구독하여 DB 업데이트를 할 수 있다. 이 경우 메시지의 발행과 구독 사이의 lag 이 존재하기 때문에 유저가 방금 변경한 데이터를 즉시 볼 수 없는 문제가 발생할 수 있다. 로컬 캐시를 통해 해결할 수도 있지만 다수의 인스턴스가 실행 중인 경우에는 문제가 복잡해진다. 그렇기 때문에 이 방식 보다는 반대로 DB 에만 쓰기를 하는 방식이 더 선호된다. DB 에 저장된 데이터의 변경과 발행하고자 하는 이벤트의 쓰기를 하나의 트랜잭션으로 묶는 <strong>Transactional Outbox Pattern</strong> 을 사용하는 것이다.<br>Outbox 패턴을 구현하는 대표적인 방법이 <strong>CDC(Change Data Capture)</strong> 를 사용하는 것이다. CDC 는 polling 방식이나 transaction log tailing 방식을 사용하여 구현할 수 있는데, polling 방식은 주기적으로 DB 쿼리를 하는 방식이기 때문에 구현이 간단한 대신 DB에 불필요한 부담을 줄 수 있으며 데이터 변경을 포착하는데 있어 약간의 delay 가 있을 수 있다는 단점이 있다. 반면, transaction log tailing 방식은 이름처럼 DB 트랜잭션 로그를 테일링하는 방식으로, 구현이 복잡하고 별도의 운영 프로세스가 늘어난다는 단점이 있지만 DB에 불필요한 부담을 주지 않고 데이터 변경 이벤트를 실시간으로 메시지 브로커에 보낼 수 있기 때문에 확장성 측면에서는 더 좋다고 할 수 있다. <strong>Debezium</strong> 은 Kafka Connect 를 활용한 대표적인 transaction log tailing 방식의 CDC 도구이다. 물론 CDC 를 위한 별도의 시스템 컴포넌트가 필요할 수 있다. 예를들어 Debezium 을 사용한다면 Kafka Connect cluster 를 운영해야한다.</p><p>사가 패턴을 사용한다면 시스템 요구사항에 따라 Orchestration Saga 와 Choreography Saga 중에 어떤 종류의 사가를 사용할지도 결정해야 한다. 만약 오케스트레이션 사가를 사용한다면 사가 코디네이터에 오케스트레이터 상태도 저장하고 관리해야 한다.<br>아웃박스 패턴이 아닌 <strong>Event Sourcing</strong> 을 사용할 수도 있다. 이벤트소싱에서는 이벤트가 데이터의 source of truth 이므로 데이터를 변경해야할 때는 Event Store 에만 이벤트를 발행하고 별도의 로컬 DB 업데이트를 할 필요가 없어지기 때문이다. <strong>Axon Framework</strong> 는 Outbox 패턴 대신 Event Sourcing 을 사용하는 대표적인 예다.<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><h3 id="쿼리">쿼리</h3><p>앞서 말한 것처럼 모놀리식 애플리케이션에서는 보통 모든 데이터가 하나의 DB 에 저장된다. 그렇기 때문에 여러 데이터를 조인해야하는 경우 간단하게 조인 쿼리를 수행할 수 있다. 하지만 MSA 의 경우 데이터가 서로 다른 물리 DB 에 저장되므로 조인 쿼리를 할 수가 없다. 이를 해결하기 위한 방법은 크게 2가지가 있다. 첫번째는 <strong>API Composition Pattern</strong> 을 사용하는 것인데, 쉽게 말해 데이터를 인메모리 조인하는 것이다. 하지만 이 방식은 한계가 명확하다. 우선 데이터를 인메모리 조인하면 당연히 DB 조인보다 속도가 느리기 때문에 너무 많은 양의 데이터의 경우 응답 속도가 느려질 수 있다. 또 각 서비스에서 조인의 대상이 되는 데이터만 가져와야 하는데, 조건문에 해당하는 필드가 특정 서비스의 데이터에는 존재하지 않을 수가 있다. 그렇다고 모든 데이터를 가져와서 조인할 수도 없을 것이다. 조인을 위한 또 다른 방법은 <strong>CQRS</strong> 를 사용하여 별도의 쿼리 용 뷰(Materialized View)를 만드는 것이다. 데이터 조회를 위한 뷰 서비스를 만들고 도메인 이벤트를 구독하여 필요한 데이터의 clone 을 하나의 DB 에 저장하는 것이다. 이러면 조인에 필요한 데이터가 하나의 DB 에 저장되어 있으니 조인 쿼리가 가능하다. 각 데이터의 clone 을 최신 상태로 유지하기 위해 원본 데이터가 변경될 때마다 각 마이크로서비스에서 이를 알리기위해 이벤트를 발행해야하고, 뷰 서비스에서는 이를 구독하여 적절히 최신화 해주어야 한다. 이 때도 데이터의 변경과 이벤트의 발행이 atomic 해야하므로 아웃박스 패턴을 사용할 수가 있다. 하지만 이렇게 애플리케이션 레벨에서 이벤트를 발행하는 경우에는 코드 상의 버그로 인해, 또는 DML 등을 통해 DB 에 직접 변경을 가하는 경우에는 이벤트가 발행되지 않아 원본과 복제본의 상태의 불일치가 발생할 수가 있다. 이때는 CDC 를 통해 인프라 레벨에서 이벤트 발행을 보장해주는 것이 해결책이 될 수 있다.</p><h3 id="테스트">테스트</h3><p>앞서도 말했지만, 모놀리식 애플리케이션에서는 도메인 서비스간의 데이터 상호작용은 단순 메서드 콜이었다. 하지만 도메인이 서로 다른 서비스로 분리되면서 IPC 를 통해 상호작용해야하게 된다. 서비스간의 통신은 REST 나 gRPC 같은 동기 방식일 수도 있고, 카프카를 통한 비동기 메시징 방식일 수도 있다. 어떤 방식이 되었건 같은 범위에 대한 테스트를 작성하더라도 모놀리식에서는 인프라가 개입되지 않았기 때문에 단순히 일부 객체의 mock 만 떠서 주입시켜 주면 되는 경우에도 MSA 에서는 네트워크 통신이 개입되기 때문에 mock server 를 띄우거나 Spring Cloud Contract 와 같은 별도의 라이브러리가 필요할 수도 있다. 만약 각 서비스를 서로 다른 팀이 개발/운영하는 경우 각 API 에 대한 테스트가 <strong>Consumer-Driven Contract Testing</strong> 과 같은 좀 더 복잡한 과정을 수반해야할 수도 있다.</p><h3 id="운영">운영</h3><p>모놀리식 애플리케이션의 단점 중에 개발 및 운영이 어렵다는 것이 있었는데 MSA 도 다른 이유로 개발 및 운영 비용이 올라간다. 우선 아무래도 관리의 대상이 되는 컴포넌트의 수가 많아지기 때문이다. 하나의 서비스가 여러개의 작은 서비스로 나누어지고, 위에서 말한 쿼리용 서비스를 포함하여 추가 컴포넌트가 필요할 수도 있다. 클라이언트가 여러 종류의 데이터를 필요로 하는 경우를 생각해보자. 모놀리식 애플리케이션의 경우 이를 위한 API 를 만들면 클라이언트는 한 번의 요청으로 필요한 데이터를 모두 가져올 수 있다. MSA 는 필요한 데이터가 서로 다른 서비스에 의해 관리되고 있으니 각 서비스에 직접 데이터를 요청하기 위해서는 여러번 요청해야할 것이다. 하지만 이렇게 했을 경우에는 서버 API 스펙이 클라이언트 코드에 존재하여 유지보수 측면에도 좋지 않고, 성능 면에서도 좋지 않을 것이다. 이를 해결하기 위해서는 이를 모아주는 API 가 필요하다. 기존 서비스 중 하나에 이 API 를 구현할 수도 있지만 관심사의 분리 관점에서 좋지 않으니 별도의 컴포넌트에 API 를 구현하여 이를 수행하도록 하는 것이 좋을 것이다. API Gateway 가 이 역할을 수행할 수도 있다.<br>로그 파일이 분산된다는 단점도 있다. 물론 로깅 라이브러리나 Elastic Stack 등을 활용하여 로그 수집 파이프라인을 구축하면 해결할 수 있다.<br>트러블 슈팅과 모니터링이 상대적으로 어렵다는 단점도 있다. <strong>Istio</strong><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> 나 Linkerd 같은 서비스 메쉬를 사용하면 어느정도 커버할 수 있다.</p><h3 id="보안">보안</h3><p>도메인 서비스 간의 상호작용 시 모놀리식에서는 하나의 프로세스 내에서의 메서드 콜이었지만 MSA 에서는 네트워크 통신이기 때문에 암호화에 더 신경을 써야한다. Istio 를 활용하여 기존의 코드를 변경하지 않고도 mTLS 를 통해 비교적 쉽게 암호화를 적용할 수 있다.</p><h2 id="결론">결론</h2><p>위와 같은 부분을 몸소 경험해보면 MSA 의 여러 장점에도 불구하고 MSA 을 도입하는 것이 최선인지 더 고민을 하게 된다. 개인적으로는 만약 팀의 규모가 작거나 시스템의 규모가 작다면 처음부터 MSA 로 시스템을 개발하기 보다, 우선 모놀리식으로 서비스를 개발하고 나서 추후에 필요성이 느껴질 때 MSA 구조로 바꾸는 것이 좋지 않을까 하는 생각이다. 어떻게 보자면 모놀리식 애플리케이션을 개발하고 운영하는 비용이 MSA 로 개발하고 운영하는 비용보다 높아질 때가 MSA 로 전환해야하는 시점일 것이다. 비용을 정량화하기는 어렵겠지만 가능한 이 시점을 잘 파악하여 마이그레이션 하는 것이 좋을것이다. 또한, 초기에 모놀리식으로 개발을 할 때 추후 별도의 서비스로 떼어내기 쉽도록 도메인 주도 설계(DDD)를 하고 모듈을 잘 분리해두면 좋다. 예를 들어 만약 여러 엔티티 클래스들이 서로를 레퍼런스 참조하도록 구현했다면 추후 각 서비스를 추출하는 것이 굉장히 어려운 작업이 될 것이다. 당연한 얘기지만 다른 JVM 에 있는 객체를 참조할 수는 없기 때문이다. 따라서 MSA 전환을 고려한다면 애그리거트 루트끼리의 참조는 PK를 통해 간접 참조하도록 설계하는 것이 좋다.<br>모놀리스를 여러개의 마이크로 서비스로 분해할 때 처음부터 다시 개발하거나 한 번에 마이그레이션 하는 것은 굉장히 시간이 오래 걸리며 비즈니스 상황에서는 비현실적인 작업이다. 리팩토링보다는 당장 새로운 기능을 개발하거나 기존의 기능을 수정하는 작업이 가장 중요할 것이기 때문이다. 그렇기 때문에 <strong>스트랭글러 패턴(Strangler Pattern)</strong><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> 를 활용하거나 앞단에 별도의 routing layer 를 두는 식으로 새로운 비즈니스 요구사항을 처리하면서 동시에 한 서비스씩, 혹은 한 API 씩 점진적으로 분리하는 것이 좋다.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>2PC 는 2 Phase Commit 의 약자로 간단하게 말하자면 분산 트랜잭션을 관장하는 코디네이터가 분산 트랜잭션에 참여하는 컴포넌트에게 로컬 트랜잭션 커밋을 요청하는 1단계와 실제로 로컬 트랜잭션을 커밋하는 2단계로 이루어진 방식이다. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>2PC 는 분산 트랜잭션에 참여하는 모든 컴포넌트가 동시에 구동 중이어야 트랜잭션이 실행될 수 있으므로 2PC 의 가용성은 각 컴포넌트의 가용성의 곱이 된다. 반면 사가의 경우 만약 어떤 트랜잭션 참여자가 다운이 되더라도 나중에 재구동되고 난 후에 멈춰진 부분부터 시작할 수 있으니 꼭 모든 컴포넌트가 동시에 구동 중이지 않더라도 트랜잭션이 진행될 수 있으므로 상대적으로 높은 가용성을 가질 수 있는 것이다. 보통 사가에 참여하는 컴포넌트는 메시지 브로커를 통해 통신한다. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>: <a href="https://discuss.axoniq.io/t/the-outbox-pattern/2031">https://discuss.axoniq.io/t/the-outbox-pattern/2031</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>Istio 는 각 파드에 Envoy 사이드카 프록시를 주입하여 기존의 코드를 (거의)전혀 변경하지 않고도 Circuit Breaking, Retry, Telemetry 같은 다양한 기능을 쉽게 사용할 수 있게 한다. 그리고 Jaeger, Kiali, Prometheus, Grafana 애드온을 통해 비교적 쉽게 분산 트레이싱, 트래픽 관리, 시스템 모니터링 등을 할 수 있게 하여 마이크로서비스 간의 통신을 high-level view 에서 관장하는데 큰 도움이 된다. <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>스트랭글러 덩굴은 열대 우림 지대에서 흔히 자라는 식물로, 숲 꼭대기 너머로 햇볕을 쬐기 위해 나무 주위를 칭칭 감고 자란다. 언젠가 나무 전체를 덩굴로 뒤덮어 나무가 수명이 다 되어 죽으면 나무 모양의 덩굴만 덩그러니 남게 된다. 스트랭글러 패턴은 MSA 에서 스트랭글러 애플리케이션이 기존 모놀리스의 역할을 점점 작게 만들어 결국에는 소멸시키는 모양을 이 스트랭글러 덩굴에 비유한 것이다. 모놀리스에서 한 서비스씩 분리해 나갈 때 이 분리된 서비스들을 통틀어 스트랭글러 애플리케이션이라고 부르는데, 이 스트랭글러 애플리케이션이 점점 커지다 보면 어느새 원래의 모놀리스는 점점 작아져 사라져 버리거나 하나의 마이크로 서비스가 된다. <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2021/10/22/about-msa/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[책 리뷰] 테스트 주도 개발</title>
      <link>http://sgc109.github.io/2021/07/23/tdd-review/</link>
      <guid>http://sgc109.github.io/2021/07/23/tdd-review/</guid>
      <pubDate>Thu, 22 Jul 2021 15:40:53 GMT</pubDate>
      <description>
      
        &lt;p&gt;본 포스트에서는 켄트 벡(Kent Beck)의 &lt;code&gt;테스트 주도 개발(Test-Driven Development)&lt;/code&gt; 에 대해 리뷰한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>본 포스트에서는 켄트 벡(Kent Beck)의 <code>테스트 주도 개발(Test-Driven Development)</code> 에 대해 리뷰한다.</p><a id="more"></a><img src="/images/tdd-review/cover.jpg" style="width:350px;"/><h1>TL;DR;</h1><ul><li>3개의 파트로 이루어져 있음</li><li>파트1, 2는 각각 서로 다른 예제를 TDD 를 사용하여 바닥부터 개발하면서 TDD 가 어떤식으로 진행되는지 체험 시켜주고, TDD 에서 사용할 수 있는 기술들과 핵심 개념에 대해서 설명해 줌</li><li>파트3은 코드 보다는 TDD 와 관련하여 전반적인 개념 설명을 하고 팁을 알려 줌</li><li>각 파트를 개인적으로 도움이 된 정도로 비교해보자면 1 &gt;&gt; 3 &gt;&gt; 2</li><li>그러므로 시간이 없다면 파트1만 이라도 읽어보길 권하고 싶음(TDD가 뭔지 제대로 느낄 수 있게 해 줌)</li><li>파트1은 코드를 따라치는게 중요하다고 생각<ul><li>TDD 에 대한 전반적인 개념을 알게된다고 해도 이 방법론을 실제 개발에 사용하는 것은 다른 이야기</li><li>실제로 코드를 작성하며 TDD 장점을 몸소 체득하지 않으면 왜 이것을 사용해야되는지 와 닿지 않을 것이고, 그럼 결과적으로 사용하지 않게 될 가능성이 크기 때문</li></ul></li></ul><h1>파트1</h1><p>파트1은 TDD 를 사용하여 다중 통화 시스템을 구현한다. 여기서 TDD 의 가장 핵심적인 내용을 거의 다 다룬다.</p><p>다음은 기억이 나는 내용들에 대해 정리해봤다. 내가 가장 중요하다고 생각이 되는 부분을 생각나는 대로 나열했기 때문에 조금 두서가 없을 수도 있다.</p><p>일반적인 소프트웨어 개발에서는 보통 먼저 전체적으로 윤곽을 설계하고나서 세부적인 구현을 하는 탑다운 방식을 사용하게 된다. 하지만 TDD 는 일반적으로 이와 반대로<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 전체적인 설계를 전혀 하지 않은 채, 그때 그때 필요한 기능들을 할일 목록에 적어가면서 지금 당장 필요한 구체적인 구현을 한다. 그럼에도 불구하고 우리의 소프트웨어는 저절로 좋은 설계를 향해 가는데, 그 이유는 TDD 의 개발 사이클 내에서 중간 중간 중복을 없애는 리팩토링의 과정을 거치기 때문이다. 참고로, 저자는 파트1의 예제를 TDD 로 여러번 개발해 봤지만 최종 결과물이 매번 다른 설계를 갖게 되었다고 한다. 즉, 구현 이전에 설계가 선행되지 않기 때문에 최종적으로 어떤 설계가 나올지 알 수가 없는 것이다.</p><p>소프트웨어 개발은 전통적으로 건물을 짓는 행위에 비유되곤 한다. 하지만 실제로는 건물을 짓는 행위와는 엄연히 다르다. 건물은 처음 설계된대로 지어지고 나면 잘 바뀌지 않는다. 그렇기 때문에 처음 설계를 하고, 그대로 지으면 웬만해선 그냥 끝이다. 하지만 소프트웨어는 성격이 조금 다르다. 예를 들어, 개발 도중이나 이후에 요구사항이 바뀌는 경우가 많으며, 개발이 완료된 이후에 발견되는 버그들이 많다. 즉, 처음에 설계한대로 깔끔하게 개발이되고 끝나는 경우는 드물다. 그렇기 때문에 건물을 짓는 것보다는 정원을 가꾸는 것에 비유하는것이 좀 더 정확하다.</p><p>TDD 로 개발을 할 때는 테스트를 작성하기 전에 절대로 기능 코드를 작성하지 않으며, 이미 널리 알려진 것처럼 Red-Green-Refactor 이렇게 3가지 단계로 이루어진 사이클을 반복하게 된다. 여기서 중요한 점 몇가지에 대해 말해보겠다. 우선, Red 에서 Green 으로 갈 때는 가능하면 가장 빨리 가야한다. 우선 컴파일조차 되지 않는 상황이 있을 것이다. 예를 들어, 특정 타입의 객체를 반환하는 특정 이름의 메서드가 존재하지 않는다는 컴파일 에러가 발생하면 해당 이름을 가진 null 을 반환하는 메서드를 생성하여 일단 컴파일이 되게 한다. 이제는 컴파일은 되지만 NullPointerException 이 발생할 것이다. 이번엔 테스트에서 원하는 바로 그 객체를 반환하도록 변경한다. 이것을 가짜 구현이라고 한다. 가짜 구현을 통해 가능한한 빨리 Green(초록 막대라고도 부른다)을 본다. 이것이 핵심이다. 일단 초록 막대를 보고 난 후에 리팩토링 단계에서 명확한 코드를 작성하거나 삼각측량법 등을 사용하여 가짜 구현을 일반화한다. 만약 확신이 있다면 즉시 명확한 코드를 원하는 만큼 작성해도 된다. 하지만 그렇게 했더니 테스트가 실패한다면? 다시 작성한 코드를 지우고 전 단계로 돌아가 더 적은 기능을 구현해 보거나 삼각측량법을 사용하던 한다. 만약 중간 중간에 새로 개발해야하거나 수정해야하는 부분이 생각나면 일단 할 일 목록(To-Do List)에 적어놓기만 한다.<br>이러한 TDD 의 개발 방식은 다음과같은 장점이 있다.</p><ul><li>개발자가 자유자재로 개발의 보폭을 조절할 수 있다.</li><li>현재 프로젝트 내에서 자신이 위치한 곳을 정확히 인지할 수 있다.</li><li>매 단계 마다 지금 해야할 일을 정확히 알고 그것에만 온전히 집중할 수 있다.</li><li>지금까지 작성한 코드에 대한 확신을 가지게 된다.</li><li>그렇기 때문에 오히려 전체적인 개발 속도를 향상시키는 결과를 가져온다.</li><li>TDD 의 라이프사이클 특성상 개발 도중 반복적으로 리팩토링을 수행하기 때문에 개발 도중 어떠한 순간에도 코드의 품질은 좋은 상태로 유지된다.</li><li>내가 다음에 구현할 기능에 대한 테스트만 작성하며, 테스트를 통과하기 위한 만큼의 코드만 작성하기 때문에 오버 엔지니어링의 가능성이 줄어들게 된다.<ul><li>(파트3 의 내용) 꼭 필요한 기능만 구현하기 때문에 지금 당장은 미래에 발생할지도 모르는 변화에 대해 유연한 코드는 아닐 수 있다. 이를테면 일시적으로 OCP 를 위반하게 될 수도 있으나, 이미 작성해 둔 많은 테스트가 서포트 해주기 때문에 미래에 변화가 발생하는 그 시점에 코드를 변경하더라도 비용이 그리 크지 않게 된다.</li></ul></li></ul><h1>파트2</h1><ul><li>파트1에서와 비슷하게 TDD 를 사용하여 또다른 앱인 xUnit 을 직접 작성하는 예제를 담았다.</li><li>특별히 기억에 남는 내용은 없고, 파트1에서 배운 TDD 개발 과정을 다른 예제와 언어를 통해 다시 한 번 연습하기위한 파트라고 생각이 든다.</li><li>이 파트에서는 스스로 뇌 수술을 하는 것에 비유하기도 하는, 자기참조 프로그래밍이라는 것을 하는데(테스트 케이스를 작성하기 위해 사용할 프레임워크를 테스트하기 위한 테스트 케이스를 작성해야 하기 때문..) 굉장히 신기한 작업이라 중간 중간 이해를 위해 생각해야하는 시간이 조금 있었다.</li><li>여담으로, 저자는 새로운 언어를 학습할 때 TDD 로 xUnit 을 작성해본다고 한다. xUnit 을 작성하기 위해 사용되는 여러 문법과 함수 등을 익히다보면 그 언어의 핵심 기능들을 대부분 익힐 수 있게 되기 때문이라고.</li></ul><h1>파트3</h1><p>실무에서 유용하게 사용할 수 있는 테스트의 종류들, 실제 개발을 할 때 마주칠 수 있는 다양한 경우에 대한 저자의 견해, 여러 디자인 패턴들을 TDD 에서 어떤 식으로 활용할 수 있는지 등에 대한 이야기를 한다. 파트3의 마지막에는 자문자답을 통해 TDD 에 대해 깊이 알아본다. 다음은 내가 가장 기억에 남는 내용이다.</p><ul><li>훌륭한 엔지니어링이 프로젝트의 성공의 필수적인 부분이 아니기 때문에 적당한 수준의 엔지니어링 만으로도 프로젝트를 성공적으로 이끌 수도 있다는 점에서 TDD 는 오버액션이라고 볼 수도 있다. 그렇기 때문에 TDD 가 항상 가장 좋은 방법은 아니다. 업계에서 통용하는 수준보다 훨씬 더 적은 결함과 훨씬 더 깨끗한 설계의 코드를 작성하게 해주기 때문이다.</li><li>보통 프로젝트가 진행됨에 따라 코드의 품질은 떨어지게 되고, 다른 프로젝트를 하고싶어 지는데, TDD 는 프로젝트를 처음 시작할 때의 흥미와 설렘을 유지할 수 있게 해준다.</li></ul><p>개인적으로 파트1만 읽고 실제 개발에 TDD 를 적용해보면서 들었던 고민이 일부 해소가 되기도 했고, 읽어도 잘 이해가 잘 가지 않은 부분도 있었던 파트였다.</p><p>마지막 쯤에 있는 마틴 파울러의 추천사가 TDD 의 장점을 굉장히 잘 정리한것 같다. TDD 는 여러가지 고민을 한 번에 하는 것이 아니라 한 번에 한 가지 기능에만 집중할 수 있게 해준다. 그리고 그 기능에 있어서도, 기능을 구현하거나  리팩토링을 하거나, 둘 중 하나에만 집중할수 있게 해준다.</p><h1>느낀점</h1><p>실무에서 TDD 로 코드를 작성해보니 잦은 리팩토링과 테스트 코드의 실행을 통해 나중에 꽤나 힘겹게 발견했을 구현 실수를 조기에 발견할 수 있게되는 경우가 꽤 많았다. 그래서 테스트를 작성하는데 시간이 든 만큼 앞선 경우로 인해 절감된 시간도 있기 때문에 단기적인 개발 시간만 보더라도 그렇게 손해보는 장사는 아니라고 생각했다. 게다가 사실 테스트는 TDD 와는 별개로 당연히 작성해야되는 것이기 때문에 대부분의 경우 TDD 로 개발하는 것이 이득이라고 볼 수도 있을것 같다.<br>또한, 어떻게보면 내가 추가하고자 하는 모든 기능에 대해 강제로 테스트를 작성하게 되기 때문에 확실히 나의 코드에 자신감을 가지게 된다. 그렇기 때문에 리팩토링을 하는데 부담이 별로 없게 되어 리팩토링을 자주하게 되고, 자연스레 코드 품질은 올라간다.<br>일부 빨간색(혹은 노란색)인 테스트 결과를 모두 초록색으로 바꾸는 단순한 행위 자체가 더욱 성취감을 줘서 프로그래밍을 더 재미있게 만들어주기도 한다.</p><p>아쉬운 점도 있었다. 개인적으로는 예제와 실무 코드 사이에 약간의 괴리가 있다고 느꼈다. 책에서 나오는 예제들은 주로 굉장히 단순한 도메인 룰을 작성하는 경우가 대부분이다. 하지만, 실무에서 스프링 프레임워크를 사용하여 개발을 하다보면 하나의 Service 클래스가 여러 서비스와 리포지토리, mapper 등의 의존성을 주입받는 경우가 많은데, mocking 을 해야하는 의존성이 많은 경우 AAA(Arrange, Action, Assert)의 Arrange 와 Assert 에 해당하는 부분에서 해야할 일이 많아진다. 도메인 엔티티가 가진 필드의 수나 메서드의 인자의 수가 많으면 더미 데이터를 선언하는 부분이 장황해 지기도 한다. 책에 나오는 모든 예제는, 물론 설명을 위해 단순화한 형태의 코드를 사용한 것이겠지만서도, 테스트 코드가 굉장히 짧기 때문에 하나의 기능에 대해 여러개의 테스트 코드를 작성하는것에 대해 아무런 부담감이 들지 않는다. 하지만 의존성이 많아지면 때때로 하나의 기능에 대해 여러개의 테스트 코드를 작성하는 것을 주저하게 되는 자신을 발견했다. 예를 들어 삼각측량법을 통해 중복을 제거하고 일반화를 하기 위해서는 사실상 거의 같은 코드를 한 번 더 작성해야 되는데 하나의 테스트가 너무 길다보니 주저하게 되는 것이다. 그래서 개인적으로 삼각측량법은 자연스레 안쓰게 되었다. 물론 어느정도의 확신이 있다면 굳이 굉장히 짧은 호흡인 삼각측량법같은 방법을 사용하지 않아도 된다. 하지만 빠르고 간단하게 사용할 수 있지만 불필요해서 사용하지 않는 것과, 필요성이 모호한 상황에서 약간의 귀찮음이 더해져 사용하지 않는건 엄연히 다르다. 그리고 테스트 코드에서 발생하는 중복도 리팩토링을 통해 적절히 줄일 수가 있다. 하지만 나는 하나의 테스트 클래스 내 존재하는 여러 테스트들이 가진 중복을 private 메서드로 분리하여 호출하는 것을 웬만해선 하고싶지 않아하는 편이다. 왜냐하면 테스트 코드는 위에서 아래로 쭉 읽기만 해도 스토리가 자연스럽게 읽히도록 작성하는것이 베스트라고 생각한다. 하지만 메서드를 분리하게 되면 이것에 방해가 되어 다소 가독성이 떨어지기 때문이다. 중복이 많아지면 어쩔 수 없이 메서드를 분리하는 편이긴 하다.</p><p>TDD 로 코드를 구현하면 IDE 의 자동완성 기능을 조금은 포기해야 한다는 것을 느끼기도 했다. 아직 존재하지 않는 클래스, 메서드, 변수 등을 사용하는 코드를 작성하기 때문이다. 물론, 존재하지 않는 클래스, 메서드, 변수를 사용하는 코드를 먼저 작성하고나서 IDE 가 제공하는 자동생성 기능을 활용할 수도 있다. 하지만 존재하지 않는 변수 등을 테스트 내에서 여러번 사용해야 하는 경우에는 매번 직접 타이핑하거나 복붙을 하기 위해 마우스를 사용하든, 커서를 위로 올렸다 내려야 해야하는 귀찮음이 있기 때문에 결국 일반적인 개발 순서와 반대로 개발하는 것에 대한 아주 약간의 불편함이 존재한다고 느꼈다. 새로운 방식이라 적응을 위해 좀 더 시간이 필요할 것 같기도 하다.</p><p>물론 위와 같은 이유로 실무에 적용하기 어렵다고 느낀다기 보다는, 책에서 언급하지 않은 특정 상황에서는 어떻게 적용하는 것이 맞는지에 대한 일부 물음이 해소가 되지 않았다는 표현이 정확할 것같다. 단순히 내가 아직 TDD 에 익숙하지 않아서 그런 것일 수도 있다. 그래서 앞으로 TDD 의 강력함을 실무에서 좀 더 느껴보아야 할 것 같다. 다른 사람들의 TDD 에 대한 경험은 어땠는지 알아보며 실무의 다양한 상황에서의 구체적인 적용방법에 대한 사례도 들어 보아야 할 것 같다.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>TDD 에서 일반적으로는 전체 시스템의 작은 조각을 나타내는 테스트부터 조금씩 붙여나가는 바텀업 빙식을 사용하겠지만, 사실 탑다운과 바텀업을 모두 사용할 수 있기 때문에 켄트 백은 TDD 의 개발 방향이 단순히 수직적인 메타포 보다는 '아는 것에서 모르는 것으로'(known-to-unknown)라는 표현이 정확할 것이라고 말하고 있긴 하다. 왜냐하면 TDD 에서는 확실히 아는 것부터 구현을 하게 되고 그러다 보면 계속 새로운 것을 알게되면서 할 일 목록에 적어나가기 때문이다. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2021/07/23/tdd-review/#disqus_thread</comments>
    </item>
    
    <item>
      <title>히스토그램에서 가장 큰 직사각형</title>
      <link>http://sgc109.github.io/2021/03/18/largest-rectangle-in-histogram/</link>
      <guid>http://sgc109.github.io/2021/03/18/largest-rectangle-in-histogram/</guid>
      <pubDate>Thu, 18 Mar 2021 12:15:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;히스토그램에서 가장 큰 직사각형(Largest Rectangle in Histogram)&lt;/code&gt;이라는 문제를 푸는 다양한 방법에 대해 알아보자.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>히스토그램에서 가장 큰 직사각형(Largest Rectangle in Histogram)</code>이라는 문제를 푸는 다양한 방법에 대해 알아보자.</p><a id="more"></a><p>이 문제는 임의의 높이를 가진 $N$개의 막대가 주어질 때, 막대 안에 포함되는 직사각형 중 가장 넓이가 큰 직사각형의 넓이를 구하는 유명한 문제인데, 푸는 방법이 다양하다는 점에서 재미있다.</p><p>유명한 문제이기 때문에 다양한 온라인 저지 사이트에서 이 문제가 올라와 있는 것을 볼 수 있다. 문제마다 입력으로 주어지는 값들의 조건은 조금씩 다르기도 하다.</p><p>여기서는 <a href="https://leetcode.com/problems/largest-rectangle-in-histogram/">LeetCode 84. Largest Rectangle in Histogram</a> 를 기준으로 설명하겠다.</p><p>본 글에서는 이 문제를 해결하는 5가지 풀이에 대해 알아볼 것이다.</p><h1>풀이</h1><h2 id="브루트포스">브루트포스</h2><p>시간복잡도 : $O(N^3)$</p><p>우선 알고리즘의 효율성에 대해 생각하지 말고 가장 무식한 방법을 떠올려보자. 만들 수 있는 모든 직사각형을 만들어 직사각형의 넓이를 구하면 답을 계산할 수 있을 것이다. 모든 직사각형은 자신의 가장 왼쪽에 위치한 막대와 가장 오른쪽에 위치한 막대가 있을 것이다. 그 직사각형의 높이는 위치상 직사각형에 포함되는 막대들의 높이 중 가장 낮은 막대의 높이가 될 것이다. 그렇기 때문에 모든 막대 쌍 l, r 에 대해 l 부터 r 까지의 막대 중 가장 높이가 낮은 막대의 높이를 계산한 뒤 직사각형의 넓이를 계산해 답을 갱신하면 문제를 해결할 수 있다.</p><p>모든 막대 쌍을 순회하는 데 $O(N^2)$ 의 시간이 소요되고, 각 막대 쌍에 대해 최대 높이를 구하는데 $O(N)$ 의 시간이 소요되므로, 총 $O(N^3)$ 의 시간이 소요된다.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAX_H = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = heights.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> minH = MAX_H + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class="line">                    minH = min(minH, heights[k]);</span><br><span class="line">                &#125;</span><br><span class="line">                ans = max(ans, (j - i + <span class="number">1</span>) * minH);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="최적화된-브루트포스">최적화된 브루트포스</h2><p>시간복잡도 : $O(N^2)$</p><p>앞서 설명한 알고리즘을 다시 한 번 보자. 첫번째 반복문에서 왼쪽 막대를 정하고, 두번째 반복문에서 오른쪽 막대를 정하게 된다. 그런데 직사각형의 높이를 찾기위한 세번째 반복문을 잘 보면, 오른쪽 막대를 오른쪽으로 한 칸씩 이동할 때마다 매번 맨 왼쪽 막대부터 처음부터 확인하는 것을 알 수 있다. 굳이 이미 봤던 막대를 다시 볼 필요가 없기 때문에 두번째와 세번째 반복문을 하나의 반복문으로 합칠 수가 있다. 그리하여 시간복잡도는 $O(N^2)$ 이 된다.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = heights.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> minH = heights[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; N; j++) &#123;</span><br><span class="line">                minH = min(minH, heights[j]);</span><br><span class="line">                ans = max(ans, (j - i + <span class="number">1</span>) * minH);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="세그먼트-트리">세그먼트 트리</h2><p>시간복잡도 : $O(NlogH)$</p><p>이번에는 문제를 다르게 한 번 정의해 보자. 앞에서는 양쪽 막대의 가능한 쌍을 모두 확인했기 때문에 그것만으로도 $O(N^2)$ 의 시간복잡도가 소요되었다.</p><p>하지만 잘 생각해보면 히스토그램 안에 있는 직사각형들은 높이를 가지고, 직사각형 안에는 항상 직사각형과 같은 높이를 가지는 막대가 있을 것이다.</p><p>그렇기 때문에 이번에는 높이가 되는 막대를 정하고 그 높이를 가지는 직사각형 중 가장 큰 직사각형을 찾아보자. 즉, 정해진 높이를 가질 수 있는 가장 왼쪽 막대와 가장 오른쪽 막대를 찾아보자.</p><p>문제를 단순화하기 위해 왼쪽과 오른쪽 중에 일단 왼쪽부터 보자.</p><p>즉, 각 막대에 대해 해당 막대의 높이로 직사각형을 만들 수 있는 가장 왼쪽 막대의 인덱스를 찾아보자.</p><p>살짝 다르게 말해서, (1) 나보다 왼쪽에 있는 막대 중, (2) 나보다 낮은 막대 중에 (3) 가장 오른쪽에 있는 막대를 찾아보자. 그럼 그 막대의 오른쪽 막대가 현재 보는 기둥의 높이로 만들 수 있는 직사각형의 가장 왼쪽 막대가 된다.</p><p>그럼 maxIdx 라는 배열을 만들어 maxIdx[i] 를 i의 높이를 가지는 막대들의 index 중 최대값이라고 정의해보자.</p><p>막대는 왼쪽부터 오른쪽으로 봐 나갈 것이고, 막대를 볼 때마다 해당 막대의 높이 정보로 maxIdx 를 업데이트한다고 하면, 결국 1번 조건은 자동으로 만족되고, 2번과 3번 조건은 <strong>RMQ(Range Maximum Query)</strong> 를 통해 로그 시간으로 계산할 수 있다. 쿼리를 수행하는 범위(range)는 [0, 직사각형 높이 - 1] 이 된다. 여기서 주의해야할 점은, 문제에서 주어지는 막대의 최대 높이가 너무 커서 세그먼트 트리를 구축할 수 없는 경우다. 하지만, 막대의 개수는 충분히 작을 것이기 때문에(대부분의 경우는 $10^5$ 이하) 좌표 압축을 수행하면 된다. 여기서는 막대의 최대 높이가 $10^4$ 라고 가정하겠다. 아무튼 이렇게 하여 막대의 최대 높이가 $H$ 일 때, $O(NlogH)$ 의 시간복잡도로 각 막대를 높이로 삼는 직사각형의 왼쪽 끝 막대를 찾을 수 있었다.</p><p>이번엔 오른쪽 끝 막대를 찾아볼 텐데, 사실 잘 생각해보면 막대의 순서를 뒤집어서 같은 일을 하면 된다.</p><p>여기서 오른쪽 끝 막대의 경우 계산하고 난 뒤에 배열과 인덱스들을 다시 뒤집어 주는 것을 잊으면 안된다.</p><p>결론적으로, 세그먼트 트리를 구축하는데 $O(H)$ 의 시간이 걸리고 각 높이 별 왼쪽 끝 막대와 오른쪽 끝 막대의 인덱스를 찾는데 각각 $O(NlogH)$ 의 시간 복잡도가 걸려서, 전체 시간 복잡도는 $O(H + NlogH)$ 다. 물론, 여기서 $H$ 가 커진다면 $O(NlogN)$ 으로 좌표압축을 해야하지만, 지금은 $H &lt; N$ 이기 때문에, 무시해도 될 것이다. 즉, 최종 시간복잡도는 $O(NlogH)$.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> MAX_H = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">int</span> maxRange = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lBorders;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rBorders;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Solution() &#123;</span><br><span class="line">        <span class="keyword">while</span>(maxRange &lt; MAX_H) maxRange *= <span class="number">2</span>;</span><br><span class="line">        tree = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(maxRange * <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        pos += maxRange;</span><br><span class="line">        tree[pos] = max(tree[pos], val);</span><br><span class="line">        <span class="keyword">for</span>(; pos &gt; <span class="number">1</span>; pos /= <span class="number">2</span>) &#123;</span><br><span class="line">            tree[pos / <span class="number">2</span>] = max(tree[pos], tree[pos ^ <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        l += maxRange, r += maxRange;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(; l &lt;= r; l /= <span class="number">2</span>, r /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l &amp; <span class="number">1</span>) ret = max(ret, tree[l++]);</span><br><span class="line">            <span class="keyword">if</span>(~r &amp; <span class="number">1</span>) ret = max(ret, tree[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; borders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.size(); i++) &#123;</span><br><span class="line">            borders[i] = query(<span class="number">0</span>, heights[i] - <span class="number">1</span>);</span><br><span class="line">            update(heights[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = heights.size();</span><br><span class="line">        lBorders = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">0</span>);</span><br><span class="line">        rBorders = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        solve(heights, lBorders);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; reversed = heights;</span><br><span class="line">        reverse(begin(reversed), end(reversed));</span><br><span class="line">        tree = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span> * maxRange, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        solve(reversed, rBorders);</span><br><span class="line">        reverse(begin(rBorders), end(rBorders));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) rBorders[i] = N - rBorders[i] - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            ans = max(ans, (rBorders[i] - lBorders[i] - <span class="number">1</span>) * heights[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="분할정복-그리디">분할정복 + 그리디</h2><p>시간복잡도 : $O(NlogN)$</p><p>재귀적으로 문제를 해결해보자. 일단 $N$ 개의 막대로 이루어진 임의의 히스토그램이 주어졌을 때 막대들을 절반으로 나누어보자. 히스토그램 내 직사각형은 3가지 경우 중 하나일 것이다. (1) 왼쪽 절반에 있거나, (2) 오른쪽 절반에 있거나, (3) 사이에 걸쳐있거나. 그럼 (1)번과 (2)번의 경우는 결국 일부 막대에 대해 완전히 동일한 문제를 푸는 것이 되기 때문에 재귀 호출로 간단히 해결할 수 있다. 그럼 (3)번의 경우만 계산해주면 문제를 해결할 수 있다. 풀이2 에서 썼던 무식한 방법으로도 계산할 수 있지만, 이러면 애초에 풀이2 로 푸는것보다도 비효율적이다. 여기서는 잘 생각해보면 다음과같이 그리디하게 $O(N)$ 으로 계산할 수가 있다.</p><p>왼쪽 끝 막대와 오른쪽 끝 막대를 2개의 포인터로 가리키게 해보자. 이 두 포인터를 가장 가운데 있는 두 막대를 가리키도록 초기화 하고 둘을 바깥쪽으로 하나씩 이동시키면서 답을 계산할 것이다. 매 단계마다 두 포인터 중에서 다음 막대의 높이가 더 높은 포인터를 이동시킨다. 그리고 새로 가리킨 막대의 높이로 직사각형의 높이를 갱신한다. 이렇게 했을 때 답을 구할 수 있다는 것을 증명해보자.</p><p>위의 알고리즘의 경우 매 반복마다 두 포인터 중 하나를 한 칸 이동시키기 때문에 직사각형의 너비는 항상 1만큼 증가한다. 중요한 것은 높이의 변화인데, 다음 4가지 상황으로 나눌 수 있다.</p><ul><li>(1) 만약 왼쪽 포인터와 오른쪽 포인터 모두에 대해 다음 막대가 현재 직사각형의 높이보다 높거나 같은 높이인 경우</li></ul><p>어느 포인터를 이동시키든 직사각형의 높이는 그대로 유지되기 때문에 어느쪽을 이동시키든 상관없다.</p><ul><li>(2) 왼쪽 포인터와 오른쪽 포인터 모두, 다음 막대가 현재 직사각형의 높이보다 낮은 경우</li></ul><p>이 경우에는 높이가 최소한으로 줄어들 수 있는 선택을 해야한다. 직사각형의 높이는 직사각형을 이루는 모든 막대들의 높이 중 최소값이므로 이 경우 직사각형의 높이는 새로 가리키게 되는 막대의 높이로 변한다. 그렇기 때문에 다음 막대의 높이가 더 큰 포인터를 이동시킨다.</p><ul><li>(3) 한쪽은 직사각형의 높이보다 높거나 같고, 한쪽은 낮은 경우</li></ul><p>높거나 같은 쪽으로 움직여야 직사각형의 높이가 줄어들지 않고 그대로 유지되므로 높이가 높은 쪽 포인터를 움직인다.</p><p>위의 방법은 직사각형의 높이가 가능한한 천천히 감소하도록 너비를 1씩 증가시켰기 때문에, 가능한 모든 너비에서 가장 높은 높이로 답을 계산하게 된다.</p><p>다르게 생각해보면, 직사각형의 높이는 절대 커지지 않는다. 만약 변한다면 작아지기만 한다. 그렇기 때문에 위의 알고리즘은 높이가 유지되는 선에서 최대한 양쪽 포인터를 바깥쪽으로 늘리게 되고, 작아져야만 하는 경우에는 최소한으로만 감소시키기 때문에 결국엔 모든 막대들을 높이로 내림차순 정렬한 배열에서, 초기 높이에서부터 하나씩 작아지는 방향으로 직사각형의 높이를 변화시키게 된다.</p><p>이 때 재귀함수 호출의 깊이는 최대 $logN$ 번이고, 각 함수에서는 전체 막대기를 한 번씩 보게 된다. 그렇기 때문에 각 재귀 단계마다 전체 막대를 한 번씩 확인하는 셈이며, 그래서 전체 시간 복잡도는 $O(NlogN)$ 이다.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAX_H = <span class="number">10000</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; heights;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right) <span class="keyword">return</span> heights[left];</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = max(solve(left, mid), solve(mid + <span class="number">1</span>, right));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lpos = mid, rpos = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> minH = MAX_H + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= lpos &amp;&amp; rpos &lt;= right) &#123;</span><br><span class="line">            minH = min(&#123;minH, heights[lpos], heights[rpos]&#125;);</span><br><span class="line">            ans = max(ans, (rpos - lpos + <span class="number">1</span>) * minH);</span><br><span class="line">            <span class="keyword">if</span>(left == lpos) ++rpos;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(right == rpos) --lpos;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(heights[lpos - <span class="number">1</span>] &lt;= heights[rpos + <span class="number">1</span>]) ++rpos;</span><br><span class="line">            <span class="keyword">else</span> --lpos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;heights = heights;</span><br><span class="line">        <span class="keyword">return</span> solve(<span class="number">0</span>, heights.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="스택">스택</h2><p>시간복잡도 : $O(N)$</p><p>이번에도 마찬가지로 각 막대의 높이를 기둥으로 하는 직사각형의 가장 왼쪽 막대와 가장 오른쪽 막대를 찾아볼 것이다. 여기서는 스택을 사용하여 왼쪽 막대부터 보면서 하나씩 스택에 넣어줄 건데, 이 막대를 높이로하는 직사각형의 넓이의 계산은 나중으로 미루게 된다. 언제 계산하냐면, 이 막대보다 작은 높이의 막대를 발견하는 즉시 계산해준다. 왜냐하면 발견한 막대가 바로 앞서 스택에 넣었던 막대보다 오른쪽에 있으면서 높이가 작은 가장 왼쪽 막대이기 때문이다. 직사각형 넓이의 계산과 동시에 해당 막대는 스택에서 빼준다. 해당 막대를 높이로 하는 직사각형을 이미 계산했기 때문이다. 이런 방식으로 스택을 관리해주면 자연스레 스택에 있는 막대들은 높이가 오름차순으로 정렬된 상태가 되며, 스택 내에서 특정 막대의 바로 이전 막대는 그 막대보다 왼쪽에 있으면서 높이가 작은 가장 오른쪽 막대가 된다. 즉, 직사각형의 넓이를 계산해야 될 때, 왼쪽 막대(스택에서 최상위 막대 바로 이전에 저장된 막대), 높이(스택의 최상위 막대), 오른쪽 막대(현재 보는 막대)를 모두 상수 시간에 알 수 있다는 뜻이다. 즉, 모든 막대를 한 번 씩 보면서 각 막대가 딱 한 번 씩 스택에 들어갔다 나오며, 중간 중간 직사각형의 넓이를 상수시간에 계산하기 때문에 전체 시간 복잡도는 $O(N)$ 이 된다.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        heights.push_back(<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">        stk.push(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(stk.size() &gt; <span class="number">1</span> &amp;&amp; heights[i] &lt; heights[stk.top()]) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">                <span class="keyword">int</span> left = left = stk.top();</span><br><span class="line">                ans = max(ans, (i - left - <span class="number">1</span>) * heights[mid]);</span><br><span class="line">            &#125;</span><br><span class="line">            stk.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>사실 그림으로 설명하면 훨씬 이해가 쉬울텐데 그리기가 귀찮기 때문에 나중에 그림이 그리고 싶어졌을 때 첨부할 예정이다.</p><h1>문제 링크</h1><p>리트코드(LeetCode) - <a href="https://leetcode.com/problems/largest-rectangle-in-histogram/">https://leetcode.com/problems/largest-rectangle-in-histogram/</a><br>백준 온라인저지(BOJ) - <a href="https://www.acmicpc.net/problem/6549">https://www.acmicpc.net/problem/6549</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2021/03/18/largest-rectangle-in-histogram/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[책 리뷰] Kubernetes in Action</title>
      <link>http://sgc109.github.io/2021/01/26/kubernetes-in-action-review/</link>
      <guid>http://sgc109.github.io/2021/01/26/kubernetes-in-action-review/</guid>
      <pubDate>Tue, 26 Jan 2021 04:57:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;본 포스트에서는 &lt;code&gt;쿠버네티스 인 액션(Kubernetes in Action)&lt;/code&gt; 재출간판에 대한 리뷰를 한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>본 포스트에서는 <code>쿠버네티스 인 액션(Kubernetes in Action)</code> 재출간판에 대한 리뷰를 한다.</p><a id="more"></a><img src="/images/kubernetes-in-action-review/cover.jpg" style="width:350px;"/><p>쿠버네티스 인 액션 재출간판은 2판이 아니라 1판의 초기 번역본의 번역 품질이 좋지 않아 재출간을 버전인 것으로 알고 있다.</p><p>이 책은 쿠버네티스를 제대로 공부하고 싶은 입문자라면 강력하게 추천하고 싶은 책이다.</p><h2 id="책의-장점">책의 장점</h2><p>다음은 이 책의 장점을 크게 5가지로 정리해보았다.</p><h3 id="번역-품질">번역 품질</h3><p>번역의 질이 굉장히 좋다. 여러 번역서를 읽어봤지만, 어떤 번역서의 경우는 분명히 읽었는데 읽은것 같지 않거나 몇 초만에 머릿속에서 사라지게 하는 신기한 경험을 선사한다. 하지만 이 책은 정말 술술 잘 읽힌다.</p><p>가끔 다른 번역서를 읽다보면 굳이 이것을 한글로 번역해야하나 라는 생각이 들 때도 있고, 단어만 그대로 직역하여 옮긴듯하여 분명 한국어인데 이해가 잘 가지 않는 경우가 많다. 하지만 이 책은 굉장히 매끄럽게 잘 읽힌다.</p><p>이 책의 경우도 초기판은 번역 품질이 좋지 않다고 들었다. 그렇기 때문에 만약 책을 구매하려고 한다면 재출간판인지 잘 확인하자.</p><h3 id="내용의-순서">내용의 순서</h3><p>내용의 순서가 정말 좋다.</p><p>쿠버네티스 문서도 많은 정보를 제공하지만 레퍼런스의 성격이 강하기 때문에 이해에 최적화된 순서로 구성되어있지는 않다. 그래서 처음 공부하는 사람은 읽어도 이해할 수 없는 내용이 앞 부분부터 가득하다.</p><p>예를 들어 문서의 경우 쿠버네티스란 무엇인지 설명하고 나서, 바로 쿠버네티스의 구조와 여러 컴포넌트에 대해 설명한다.</p><p>반면, 책에서는 의도적으로 절반도 훌쩍 지난 11장에서야 쿠버네티스의 구조와 내부 동작 원리에 대해 설명한다. 물론 내부 구조를 먼저 알고 싶은 사람이 있을 수도 있지만, 아는 만큼 보인다는 말처럼 쿠버네티스의 기능과 사용 방법에 대해 모르는 상태에서는 읽어도 별로 와닿지 않을 가능성이 높다고 생각한다.</p><p>책을 읽으면서 내용의 순서에 신경을 많이 썼다는 느낌을 많이 받았다. 책을 처음부터 순서대로 따라 읽다보면 자연스레 빠르게 이해가 되도록 챕터가 배치되어있다.</p><p>물론 꼭 순서대로 읽어야 하는 것은 아니고, 그때 그때 궁금한 개념이 있을 때마다 건너뛰면서 읽어도 된다고 생각한다. 나도 그랬다. 하지만 일부 챕터가 연관성을 가지고있기 때문에 특별한 이유가 없다면 순서대로 읽으면 이해에 더 도움이 될것 같다.</p><h3 id="내용의-범위">내용의 범위</h3><p>쿠버네티스의 전반을 자세하게 다뤘다. 설명도 굉장히 친절하다. 물론 이 책을 모두 읽는다고 쿠버네티스를 마스터할 수 있는 것은 아닐 것이다. 하지만 꼭 알아야하는 핵심적인 내용을 전반적으로 다뤘다. 그렇기 때문에 만약 이 책을 모두 읽고 나서 모르는 내용이 나온다고 하더라도 쉽게 찾을 수 있을 것이라고 생각한다.</p><h3 id="도표와-예제">도표와 예제</h3><p>쿠버네티스가 여러 컴포넌트로 구성된 꽤 복잡한 시스템인 만큼, 이해를 도와주는 그림이 굉장히 중요하다고 생각한다. 이 책도 그림이 적절하여 이해에 도움을 준다. 예제도 따라하고 이해하기 쉽다.</p><h3 id="최근-버전과의-차이">최근 버전과의 차이</h3><p>최근 버전에서 달라진 점들이 잘 표시되어 있다. 가끔 일부 서적들은 예제를 그대로 따라 쳤는데도 다른 결과가 나오는 경우가 있다. 물론 대부분의 경우는 별 문제가 되지 않거나 구글링을 조금 해보면 금방 해결할 수 있지만, 이런 일이 반복되면 책을 읽는 것이 지칠 수가 있다. 이 책은 최근 버전에서 달라진 점들에 대해 잘 명시하였고 위와같은 경우가 특별히 없었던것 같다.</p><h2 id="결론">결론</h2><p>읽기 잘했다는 생각이 들었다.<br>좋은 책은 새로운 기술을 학습할 때 기초를 빠르게 습득하는데 큰 도움을 준다고 생각한다. 물론 책에 나오지 않는 내용은 문서나 소스 코드 분석을 통해 보충해야 할 것이고, 가장 중요한 것은 실무에서 사용하면서 익히는 것이라고 생각한다.<br>하지만 지식의 수준을 어느정도 궤도에 빠르게 올리는 것이 목적이라면 이 책은 후회없는 선택이 될 것이라고 생각한다.</p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2021/01/26/kubernetes-in-action-review/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Kubernetes 의 API 서버 보안</title>
      <link>http://sgc109.github.io/2021/01/23/api-server-security-in-k8s/</link>
      <guid>http://sgc109.github.io/2021/01/23/api-server-security-in-k8s/</guid>
      <pubDate>Sat, 23 Jan 2021 07:13:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;이 포스팅에서는 쿠버네티스에에서 &lt;code&gt;API 서버의 보안&lt;/code&gt;과 아래의 리소스들에 대해 이야기한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ServiceAccount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Role&lt;/code&gt; 과 &lt;code&gt;RoleBinding&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClusterRole&lt;/code&gt; 과 &lt;code&gt;ClusterRoleBinding&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이 포스팅에서는 쿠버네티스에에서 <code>API 서버의 보안</code>과 아래의 리소스들에 대해 이야기한다.</p><ul><li><code>ServiceAccount</code></li><li><code>Role</code> 과 <code>RoleBinding</code></li><li><code>ClusterRole</code> 과 <code>ClusterRoleBinding</code></li></ul><a id="more"></a><h2 id="쿠버네티스에서-API-서버-보안은-왜-필요할까">쿠버네티스에서 API 서버 보안은 왜 필요할까?</h2><p>쿠버네티스에서는 이론적으로 파드 외부 또는 내부에서 API 서버로 적절한 요청을 하면 어떤 리소스던 생성, 삭제, 수정, 조회가 가능하다.</p><p>그런데 만약 개발자의 코딩 실수로 어떤 파드에서 아무 관련이 없는 다른 파드를 삭제해버릴 수 있다면 큰 문제가 될 것이다.</p><p>그렇기 때문에 사용자 또는 파드에게 적절하게 권한을 부여하는 기능은 보안과 안정적인 운영을 위해 필수적이다.</p><p>회사에서 여러개의 팀이 하나의 공용 클러스터를 함께 사용하는 멀티테넌트 환경에서는 이러한 권한의 분리가 더욱 중요할 것이다.</p><p>만약 어떤 팀에서 실행 중인 파드의 목록과 상세 정보를 다른 팀에서 볼 수 있고, 심지어 삭제할 수가 있다면 문제가 될 것이다.</p><p>악의적인 목적이건, 실수이건 간에 위와 같은 일은 언제라도 벌어질 수 있기 때문에 모든 유저와 파드에게 적절한 권한을 부여해야 하는 것이다.</p><p>쿠버네티스 클러스터는 보통 위와 같은 문제가 발생하지 않도록 하기 위해 API 서버가 사용자나 Pod 의 요청을 받을 때 명시적으로 설정된 권한만 허용하고, 그 이외의 모든 권한은 허용하지 않도록 동작한다.</p><h2 id="Service-Account">Service Account</h2><h3 id="Service-Account-란">Service Account 란?</h3><p><strong>서비스 어카운트(Service Account)</strong> 는 Kubernetes 의 파드에서 API 서버에 요청을 보냈을 때 이 &quot;파드&quot;를 식별하기 위한 리소스다. (사용자를 식별하는데 사용되지는 않는다)</p><p>파드에서 API 서버에 요청을 보내면 이 파드의 정체가 무엇인지 알아야 어떤 권한을 가지고 있는지도 알 수 있고,</p><p>이를 기반으로 파드의 요청이 권한에 맞는지를 확인하여 요청을 처리해줄지 말지를 결정할 것이다.</p><p>실제로 권한을 정의하고, 설정하는 부분은 이후에 설명할 <strong>Role, ClusterRole, RoleBinding, ClusterRoleBinding</strong> 의 역할이고,</p><p>ServiceAccount 는 이러한 권한을 적용할 수 있는 주체 중 한가지로서, Pod 의 신분증같은 것이라고 생각하면된다.</p><p>(물론 하나의 ServiceAccount 는 여러 Pod 가 사용할 수 있기 때문에 정확히 신분증과 동일한 개념은 아닐 것이다.)</p><h3 id="ServiceAccount-의-특징">ServiceAccount 의 특징</h3><p>모든 파드는 무조건 하나의 ServiceAccount 와 매핑이 되어야 실행될 수가 있다.</p><p>그런데 ServiceAccount 를 만들지 않고, 파드의 매니페스트에 ServiceAccount 를 명시적으로 적어주지 않아도 파드가 잘 생성이 되고 실행 되는 것을 보고 의아할 수도 있다.</p><p>사실 이것은, 쿠버네티스의 <strong>ServiceAccount Controller</strong> 가 모든 네임스페이스에 <code>default</code> 라는 이름의 서비스어카운트가 있도록 자동 생성해주며,</p><p><code>ServiceAccount</code> <strong>Admission Controller</strong> 가 파드의 매니페스트에 명시적으로 서비스어카운트를 정의하지 않으면 <code>default</code> 서비스어카운트를 매핑해주기 때문에 가능한것이다.</p><p>뿐만 아니라, 서비스어카운트는 mountable secrets 에 지정한 시크릿만 파드에 마운트할 수 있도록 강제하는 기능과,</p><p>Image pull secrets 기능을 통해 프라이빗 이미지 레지스트리에서 이미지를 가져올 수 있도록 하기 위한 시크릿을 이 서비스어카운트를 사용하는 파드에 자동으로 마운트시켜주는 기능도 가지고 있는데</p><p>image pull secrets 기능도 <code>ServiceAccount</code> Admission Controller 가 수행한다.</p><h3 id="ServiceAccount-의-동작-방식">ServiceAccount 의 동작 방식</h3><p><code>kubectl create sa &lt;name&gt;</code> 명령어로 서비스어카운트를 생성할 수 있다.</p><p><strong>Token Controller</strong> 는 서비스어카운트가 생성될 때마다 자동으로 <code>kubernetes.io/service-account-token</code> 타입의 Secret 을 생성하여 매핑시켜준다.</p><p><img src="/images/api-server-security-in-k8s/create-service-account.png" alt="서비스어카운트 만들기"></p><p>Token Controller 에 의해 생성된 Secret 에는 아래와 같은 3가지 데이터가 base64 로 인코딩되어 들어있다.</p><ul><li>ca.crt - API 서버와 통신 시, SSL 인증을 위한 증명서</li><li>token - 서비스어카운트 이름, Secret 이름 등의 정보에 서명한 JWT. API 서버에 요청시 Bearer 토큰으로 사용됨</li><li>namespace - 네임스페이스</li></ul><p>파드 내 애플리케이션은 위의 데이터를 사용하여 API 서버와 통신한다.</p><p>API 서버는 요청의 Authorization 헤더에 있는 Bearer token 을 디코딩하여 어느 서비스어카운트를 사용해 보낸 요청인지 식별하게 된다.</p><h2 id="RBAC-란">RBAC 란?</h2><p>어떤 사람, 혹은 파드가 API 서버에 요청을 하면 API 서버는 인증(Authentication)과 인가(Authorization)를 수행한다.</p><p>인증은 접근 가능 여부를 확인하는 것이고, 인가는 접근 가능한 요청에 대해 요청된 자원에 접근할 수 있는지를 확인하는 것이다.</p><p><strong>RBAC(Role-Based Access Control)</strong> 는 API 서버가 인가를 수행하는 여러 방법 중 하나다.</p><p>쿠버네티스는 다음과 같은 인가 방식을 제공한다.</p><ul><li>Node<ul><li>Kubelet 에 의한 요청에 대한 인가를 위한 방식</li></ul></li><li>ABAC(Attribute-Based Access Control)<ul><li>리소스의 속성에 따라 인가를 하는 방식</li></ul></li><li>RBAC<ul><li>Role 을 기반으로 인가를 하는 방식</li></ul></li><li>Webhook<ul><li>외부 API 를 통해 인가를 하는 방식</li></ul></li></ul><p>이 중에서 RBAC가 표준이며, 1.8.0 부터는 대부분의 클러스터에서 기본적으로 사용하는 방식이다.</p><p>RBAC 는 특정 <strong>주체(subject)</strong> 가 <strong>특정 대상(url, resource 타입, 혹은 특정 resource)</strong> 에 대해 <strong>특정 행위(verb)</strong> 를 할 수 있는지를 지정하는 방식이다.</p><p>이를 어떻게 지정하는 지는 이후 Role 과 RoleBinding 에 대한 설명에서 명확해 질 것이다.</p><h2 id="Role-과-RoleBinding">Role 과 RoleBinding</h2><p>앞서 RBAC 는 특정 주체가 특정 대상에 대해 특정 행위를 할 수 있는지를 지정하는 방식이라고 했다.</p><p>여기서 Role 에 <strong>대상(resource 등)</strong> 과 <strong>행위(verb)</strong> 를 지정하며, RoleBinding 에 <strong>주체(subject)</strong> 를 지정한다.</p><p>여기서 주체는 3가지(User, Group, <strong>ServiceAccount</strong>) 중 한가지가 된다.</p><p>대상은 보통 resource 의 타입을 정하는데, resourceName 으로 특정 리소스를 지정할 수도 있다.</p><p>이후에 설명할 ClusterRole 에서는 리소스가 아닌 URL 을 지정할 수도 있다. <code>/healthz</code> 와 같이 특정 리소스에 대한 요청이 아닌 경우도 있기 때문이다.</p><p>행위는 아래 표와같이 API 요청에 사용된 HTTP 메서드에 따라 특정 행위에 매핑되는데,</p><table><thead><tr><th>HTTP method</th><th>verb</th></tr></thead><tbody><tr><td>POST</td><td>create</td></tr><tr><td>GET, HEAD</td><td>get(개별 리소스), list(전체 오브젝트 내용을 포함한 리소스 모음), watch(개별 리소스 또는 리소스 모음을 주시)</td></tr><tr><td>PUT</td><td>update</td></tr><tr><td>PATCH</td><td>patch</td></tr><tr><td>DELETE</td><td>delete(개별 리소스), deletecollection(리소스 모음)</td></tr></tbody></table><p>행위에 대한 대상이 리소스라면 행위를 verb 로 적어주고, URL 이라면 HTTP 메소드로 적어준다.</p><p>이름 그대로 Role 은 역할이고, RoleBinding 은 이러한 역할을, 역할을 수행하는 주체에 연결시켜 주는 것이다.</p><h3 id="Role-과-RoleBinding-의-특징">Role 과 RoleBinding 의 특징</h3><p>Role 과 RoleBinding 은 특정 네임스페이스에 종속된 개념이다. 그렇기 때문에 RoleBinding 은 다른 네임스페이스의 Role 을 바인딩해줄 수는 없다.</p><p>하지만, RoleBinding 이 같은 네임스페이스의 Role 을 <strong>다른 네임스페이스의 subject</strong> 에게 바인딩해 줄 수는 있다.</p><p>그래서 RoleBinding 에 subject 들을 명시할 때는 name 과 namespace, 그리고 kind(user/group/serviceaccount) 를 함께 명시한다.</p><p>하나의 Role 은 여러개의 RoleBinding 에 의해 바인드될 수 있고, 하나의 RoleBinding 은 하나의 Role 만 참조할 수 있다.</p><p>즉, <strong>Role 과 RoleBinding 은 일대다(one-to-many) 관계</strong>다.</p><p>반면 하나의 RoleBinding 은 하나의 Role 을 여러 주체에 연결시켜 줄 수 있고, 하나의 주체는 여러개의 RoleBinding 에 의해 권한이 부여될 수 있다.</p><p>즉, <strong>RoleBinding 과 Subject(ServiceAccount 등) 는 다대다(many-to-many) 관계</strong>다.</p><h3 id="Role-과-RoleBinding-만들기">Role 과 RoleBinding 만들기</h3><p>Role 과 RoleBinidng 을 만드는 방법은 크게 두가지가 있다.</p><p>하나는 매니페스트를 통해 만드는 방법이고, 나머지 하나는 <code>kubectl create</code> 명령어를 통해 만드는 방법이다.</p><p>다음과 같이 YAML 파일을 작성하지 않고도 직접 verb, resource, role, serviceaccount 등을 인자로 주어 Role 과 RoleBinding 을 생성할 수 있다.</p><p><img src="/images/api-server-security-in-k8s/create-role.png" alt="롤 만들기"></p><p><img src="/images/api-server-security-in-k8s/create-role-binding.png" alt="롤바인딩 만들기"></p><p>RoleBinding 의 속성 중 Role 은 단수형이고, Subjects 는 복수형이라는 것을 봐도 이들간의 연관관계를 짐작할 수 있다.</p><p>다음과 같이 YAML 파일을 통해 Role 과 RoleBinding 을 생성할 수도 있다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">foo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service-reader</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["services"]</span></span><br></pre></td></tr></table></figure><h2 id="ClusterRole-과-ClusterRoleBinding">ClusterRole 과 ClusterRoleBinding</h2><p>ClusterRole 과 ClusterRoleBinding 이 필요한 이유는, Role 과 RoleBinding 이 특정 네임스페이스에 종속된 개념이기 때문이다.</p><p>그렇기 때문에 크게 다음과 같은 3가지 한계가 존재한다.</p><h3 id="Role-과-RoleBinding-의-한계">Role 과 RoleBinding 의 한계</h3><p>첫번째로, 모든 네임스페이스에 대해 똑같은 권한을 부여하고 싶은 경우에 각 네임스페이스마다 매번 똑같은 내용의 Role 을 만들어줘야 할 것이다.</p><p>하지만 이런 방식은 번거롭고 실수하기도 쉽다.</p><p>두번째로, Role 은 같은 네임스페이스에 존재하는 리소스에 대한 권한만 허용할 수 있다.</p><p>그렇기 때문에 하나의 서비스어카운트에 모든 네임스페이스에 존재하는 특정 리소스에 대한 권한을 주고 싶은 경우에</p><p>모든 네임스이스마다 Role 과 RoleBinding 을 만들고 이 서비스어카운트에 바인딩해줘야 한다.</p><p>세번째로, 네임스페이스에 독립적인 클러스터 수준의 리소스나 리소스와 관련이 없는 요청도 있다.</p><p>예를 들어, Node 나 Namespace 와 같은 리소스은 물론이고, ClusterRole 과 ClusterRoleBinding 또한 특정 네임스페이스에 속한 리소스가 아니며,</p><p>앞서 언급한 <code>/healthz</code> 와 같은 URL 은 리소스와는 관련이 없는 요청이다.</p><p>위와 같은 3가지 경우 ClusterRole 과 ClusterRoleBinding 을 사용해야 한다.</p><p>첫번째의 경우는, RoleBinding 은 Role 뿐 아니라 ClusterRole 도 참조할 수 있기 때문에</p><p>ClusterRole 만 하나 만들어 두고, 각 네임스페이스에 있는 RoleBinding 이 이를 참조하여 subject 에 바인딩해주도록 하면</p><p>네임스페이스마다 Role 을 정의하는 대신 ClusterRole 이라는 글로벌한 Role 을 정의할 수 있게 된다.</p><p>두번째의 경우는, ClusterRole 에 위와 같이 RoleBinding 을 사용하는 것이 아니라, ClusterRoleBinding 을 사용하면 해결할 수 있다.</p><p>ClusterRole 을 사용하더라도 RoleBinding 을 사용하면 RoleBinding 과 같은 네임스페이스에 속한 리소스에대한 권한만 얻을 수 있다.</p><p>반면, ClusterRoleBinding 을 사용하여 subject 에 ClusterRole 을 바인딩을 해주면 모든 네임스페이스에 속한 리소스에 대한 권한을 얻을 수 있다.</p><p>세번째의 경우도 두번째의 경우와 마찬가지로 ClusterRole 과 ClusterRoleBinding 을 사용하면 해결할 수 있다.</p><p>ClusterRole 에는 Role 과는 달리 Resources 는 물론 Non-Resource URLs 을 정의할 수가 있다.</p><p>다음은 kubectl 을 통해 ClusterRole 을 만들고 이를 조회한 결과 화면이다.</p><p><img src="/images/api-server-security-in-k8s/create-cluster-role.png" alt="클러스터롤 만들기"></p><h3 id="디폴트-ClusterRole-ClusterRoleBinding">디폴트 ClusterRole &amp; ClusterRoleBinding</h3><p>API 서버는 기본적으로 디폴트 ClusterRole 과 ClusterRoleBinding 을 생성한다.</p><p>보통 디폴트로 생성된 클러스터롤과 클러스터롤바인딩은 <code>system:</code> 접두사를 가진다.</p><p>대부분의 디폴트 ClusterRole 들은 같은 이름을 가진 ClusterRoleBinding 이 존재한다.</p><p><img src="/images/api-server-security-in-k8s/default-cluster-role.png" alt="디폴트 클러스터롤 조회하기"><br><img src="/images/api-server-security-in-k8s/default-cluster-role-binding.png" alt="디폴트 클러스터롤바인딩 조회하기"></p><p>그 중에서도 <strong>system:discovery</strong> 와 <strong>system:public-info-viewer</strong> 의 경우</p><p>공개되어도 안전하다고 여겨지는 정보들에 대한 읽기 권한을 <strong>system:authenticated</strong> 이나 <strong>system:unauthenticated</strong> group 에 바인딩하며,</p><p><code>system:controller:</code> 접두사를 가지는 것들은 쿠버네티스의 여러 컨트롤러들에게 권한을 부여하는데 사용된다.</p><p>다음과같이 <code>system:</code> 접두사를 가지지 않은 디폴트 클러스터롤(&amp; 클러스터롤바인딩)도 존재한다.</p><table><thead><tr><th>cluster-admin</th><th>모든 리소스에 대한 모든 권한</th></tr></thead><tbody><tr><td>admin</td><td>ResourceQuota 와 Namespace 를 제외한 모든 리소스에 대한 조회 및 수정 가능</td></tr><tr><td>edit</td><td>admin 의 권한에서 (Cluster)Role 과 (Cluster)RoleBinding 은 조회만 가능</td></tr><tr><td>view</td><td>(Cluster)Role, (Cluster)RoleBinding, Secret 을 제외한 모든 리소스 조회만 가능</td></tr></tbody></table><p>이 중 <strong>system:masters</strong> group 에 바인딩 되어있는 cluster-admin 을 제외하고</p><p>나머지 ClusterRole 들은 기본적으로 ClusterRoleBinding 에 의해 어딘가에 바인딩 되어 있진 않다.</p><h2 id="참조">참조</h2><ul><li>쿠버네티스 인 액션(2020, 에이콘출판사)</li><li>서비스 어카운트 관리하기(<a href="https://kubernetes.io/ko/docs/reference/access-authn-authz/service-accounts-admin/">https://kubernetes.io/ko/docs/reference/access-authn-authz/service-accounts-admin/</a>)</li><li>Authentication(<a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">https://kubernetes.io/docs/reference/access-authn-authz/authentication/</a>)</li><li>인가 개요(<a href="https://kubernetes.io/ko/docs/reference/access-authn-authz/authorization/">https://kubernetes.io/ko/docs/reference/access-authn-authz/authorization/</a>)</li><li>Using RBAC Authorization(<a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/docs/reference/access-authn-authz/rbac/</a>)</li></ul>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2021/01/23/api-server-security-in-k8s/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Kubernetes 의 Downward API</title>
      <link>http://sgc109.github.io/2021/01/17/k8s-downward-api/</link>
      <guid>http://sgc109.github.io/2021/01/17/k8s-downward-api/</guid>
      <pubDate>Sun, 17 Jan 2021 14:07:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;쿠버네티스의 파드 내에서 파드의 매니페스트나 속성에 대한 정보를 얻기위한 방법인 &lt;code&gt;Downward API&lt;/code&gt; 에 대해 알아보자.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>쿠버네티스의 파드 내에서 파드의 매니페스트나 속성에 대한 정보를 얻기위한 방법인 <code>Downward API</code> 에 대해 알아보자.</p><a id="more"></a><h2 id="Downward-API-란">Downward API 란?</h2><p>애플리케이션이 실행되기 전에 이미 알고있는 속성이나 설정 값들은 <strong>ConfigMap</strong> 이나 <strong>Secret</strong> 으로 파드에 전달할 수 있지만,</p><p>파드의 이름, 파드의 IP, 파드가 실행되는 노드의 이름 등 실제로 파드가 생성 및 실행이 되기전에는 알 수 없는 속성들도 존재한다.</p><p>물론 파드의 레이블이나 어노테이션과 같은 일부 속성들은 파드 생성 이전에도 알 수 있지만,</p><p>파드 내에서 정보를 사용하고 싶다는 이유로 이미 설정되어 있는 속성을 ConfigMap 등을 통해 중복하여 정의하고 싶지는 않을 것이다.</p><p>이런 속성들을 컨테이너에서 실행 중인 애플리케이션에서 알아내려면 어떻게 해야할까?</p><p>이 때 사용되는 것이 <strong>Downward API</strong> 이다.</p><p>Downward API 는 단순히 <strong>환경변수</strong>, 또는 <strong>파일(downwardAPI 볼륨을 통해)</strong> 로 위와 같은 속성들을 컨테이너에서 손쉽게 사용할 수 있도록 하는 기능일 뿐이다.</p><p>Downward API 를 통해 전달할 수 있는 정보는 다음과 같다.</p><ul><li>파드의 이름</li><li>파드의 IP 주소</li><li>파드가 속한 네임스페이스</li><li>파드가 실행중인 노드의 이름</li><li>파드가 실행 중인 서비스 어카운트 이름</li><li>각 컨테이너의 CPU와 메모리 request</li><li>각 컨테이너의 CPU와 메모리 limit</li><li>파드의 label</li><li>파드의 annotation</li></ul><p>참고로, 네임스페이스 정보를 얻기 위해서는 굳이 Downward API 를 사용할 필요도 없다.</p><p>k8s 에서는 파드가 API server 와 통신할 수 있도록 하기 위해</p><p>각 파드마다 기본적으로 Default token 시크릿 볼륨을 만들어</p><p>파드 내 컨테이너의 <code>/var/run/secrets/kubernetes.io/serviceaccount/</code>에 마운트해 주는데,</p><p>이 곳에 <strong>namespace</strong> 라는 파일에 네임스페이스가 적혀있기 때문이다.</p><h2 id="환경-변수로-전달하기-vs-볼륨으로-전달하기">환경 변수로 전달하기 vs 볼륨으로 전달하기</h2><p>Downward API 를 통해 데이터를 전달하기 위한 방법으로는</p><p>환경 변수를 통한 방법과 볼륨을 통한 방법, 이렇게 크게 두가지가 있다.</p><p>대부분의 경우 환경변수를 통한 방법과 볼륨을 통한 방법 중 어떤 방법을 사용해도 크게 문제가 없지만</p><p>약간의 차이점이 있다. 우선 일부 정보들은 둘 중 한가지 방법으로만 얻을 수 있다.</p><p>예를 들어 Pod 의 label 과 annotation 은 downwardAPI 볼륨을 통해서만 전달할 수 있다.</p><p>그 이유는, Pod 의 label 과 annotation 은 Pod 가 실행되는 동안 수정될 수가 있는데,</p><p>이 때 Pod 가 변경된 데이터를 볼 수 있도록 해야 한다.</p><p>하지만 환경변수는 컨테이너가 생성된 이후에 외부에서 변경할 수 있는 방법이 없기 때문이다.</p><p>반면, 파드가 실행중인 노드의 이름과 IP 는 환경 변수를 통한 방법으로만 얻을 수 있다.</p><p>각 방법을 통해 얻을 수 있는 정보들의 전체 목록은 <a href="https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#capabilities-of-the-downward-api">공식 문서</a>를 통해 확인할 수 있다.</p><p>다음으로, 각 컨테이너가 가지는 속성인 컨테이너의 리소스 request 와 limit 의 경우</p><p>환경변수를 통한 방식으로는 다른 컨테이너의 리소스 정보를 사용할 수가 없지만,</p><p>볼륨을 통한 방식으로는 다른 컨테이너의 리소스 정보도 사용할 수가 있다.</p><p>왜냐하면 애초에 컨테이너 마다 정의해야 하는 환경변수(env 속성)와는 달리</p><p>볼륨은 파드 단위로 정의하기 때문이다(spec.volumes 속성을 통해)</p><p>그렇기 때문에 볼륨에서 item 을 정의할 때는 container 를 명시하게 되는데</p><p>이 때문에 다른 컨테이너의 리소스 정보도 사용할 수 있는 것이다.</p><h3 id="환경-변수로-전달하기">환경 변수로 전달하기</h3><p>다음 매니페스트 파일로 파드를 생성해보자.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">downward-env</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["sleep",</span> <span class="string">"99999"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">15m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">100Ki</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">20Mi</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SERVICE_ACCOUNT</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">spec.serviceAccountName</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONTAINER_CPU_REQUEST_MILLICORES</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">resourceFieldRef:</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">requests.cpu</span></span><br><span class="line">          <span class="attr">divisor:</span> <span class="string">1m</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONTAINER_MEMORY_LIMIT_KIBIBYTES</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">resourceFieldRef:</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">limits.memory</span></span><br><span class="line">          <span class="attr">divisor:</span> <span class="string">1Ki</span></span><br></pre></td></tr></table></figure><p><img src="/images/k8s-downward-api/downward-env.png" alt=""></p><p>위와 같이 환경변수로 파드의 매니페스트 파일에 정의한 값들이 설정되어있는 것을 확인할 수 있다.</p><h3 id="볼륨으로-전달하기">볼륨으로 전달하기</h3><p>다음 매니페스트 파일로 파드를 생성해보자.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">downward-volume</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">foo:</span> <span class="string">bar</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line">    <span class="attr">key2:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">multi</span></span><br><span class="line">      <span class="string">line</span></span><br><span class="line">      <span class="string">value</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["sleep",</span> <span class="string">"9999999"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">15m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">100Ki</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">40Mi</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">downward</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/downward</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">downward</span></span><br><span class="line">    <span class="attr">downwardAPI:</span></span><br><span class="line">      <span class="attr">items:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">"podName"</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">"podNamespace"</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">"labels"</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.labels</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">"annotations"</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.annotations</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">"containerCpuRequestMilliCores"</span></span><br><span class="line">        <span class="attr">resourceFieldRef:</span></span><br><span class="line">          <span class="attr">containerName:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">requests.cpu</span></span><br><span class="line">          <span class="attr">divisor:</span> <span class="string">1m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">"containerMemoryLimitBytes"</span></span><br><span class="line">        <span class="attr">resourceFieldRef:</span></span><br><span class="line">          <span class="attr">containerName:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">resource:</span> <span class="string">limits.memory</span></span><br><span class="line">          <span class="attr">divisor:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/images/k8s-downward-api/downward-volume.png" alt=""></p><p>위와 같이 <code>/etc/downward</code>에 볼륨이 잘 마운트되어 매니페스트 파일에서 정의한 필드들이 파일로 세팅되어있는 것을 확인할 수 있다.</p><h2 id="Downward-API-의-한계">Downward API 의 한계</h2><p>Downward API 는 특정 파드에서 자신의 메타데이터 및 속성 정보를 얻을 수 있게 해주는 기능이다.</p><p>그런데 만약 다른 파드, 혹은 파드가 아닌 다른 리소스(예를 들면 job)의 정보가 필요한 경우에는 Downward API 가 도움이 되지 않는다.</p><p>이런 정보는 서비스 관련 환경변수나 DNS 로 얻거나, API Server 와 직접 통신해야 한다.</p><h3 id="API-서버와-통신하기">API 서버와 통신하기</h3><p>API 서버와 통신하기 위해서는 우선 API 서버의 IP 와 포트를 알아야 한다.</p><p>쿠버네티스에서는 default 네임스페이스의 경우 <em>kubernetes</em> 라는 이름의 서비스가 자동으로 노출되고 API 서버를 가리키도록 되어있다.</p><p>고로, <code>kubectl get svc kubernetes</code> 명령어를 실행하면 API 서버의 IP 와 포트를 알 수 있다.</p><p>또한, 파드에는 각 서비스에 대한 정보가 환경변수로 세팅되어 있으므로,</p><p>파드 내에서 <code>env | grep KUBERNETES_SERVICE</code> 명령어를 실행해도 <em>kubernetes</em> 서비스, 즉 API Server 의 IP 와 PORT 를 알 수 있다.</p><p>이제 IP 와 포트를 알았으니, 앞서 잠깐 언급했던 default token 시크릿 볼륨에 있는 token 과 ca.crt 를 사용하여 API 서버에 정보를 요청할 수 있다.</p><p>다음 명령어는 API 서버에 현재 네임스페이스 내에 있는 모든 파드의 목록을 요청하는 명령어다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)</span><br><span class="line">$ CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">$ NS=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)</span><br><span class="line">$ curl -H <span class="string">"Authorization: Bearer <span class="variable">$TOKEN</span>"</span> https://kubernetes/api/v1/namespaces/<span class="variable">$NS</span>/pods</span><br></pre></td></tr></table></figure><p>아마 대부분의 경우 위의 명령어를 수행했을 때 액세스 권한이 없다는 응답이 올 것이다. 이는 <strong>RBAC(Role-Based Access Control)</strong> 라는 것이 활성화되어 있기 때문이다.</p><p>테스트 목적이라면 다음의 명령어를 수행하여 <code>cluster-admin</code> ClusterRole 를 통해 모든 파드에 API 서버에 대한 모든 권한을 부여할 수 있다.</p><p><strong>RBAC(Role-Based Access Control)</strong> 와 ServiceAccount, Role, ClusterRole, ClusterRoleBinding 에 대해서는 <a href="https://sgc109.github.io/2021/01/23/api-server-security-in-k8s/">추후 다른 포스트</a>에서 다룰 예정이다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl create clusterrolebinding permissive-binding --clusterrole=cluster-admin --group=system:serviceaccounts</span><br></pre></td></tr></table></figure><p>GET 요청 대신 PUT 이나 PATCH 를 통해 리소스를 업데이트 하는 등 CRUD 작업을 모두 수행할 수 있다.</p><p>앰배서더 컨테이너를 두어, 애플리케이션에서는 아무런 헤더 없이 단순히 http 요청을 하면</p><p>인증서와 토큰 세팅과같은 번거로운 과정을 앰배서더 컨테이너가 대신하도록 할 수도 있다.</p><h2 id="참고">참고</h2><ul><li>쿠버네티스 공식 문서(<a href="https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#capabilities-of-the-downward-api">https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#capabilities-of-the-downward-api</a>)</li><li>쿠버네티스 인 액션(<a href="http://www.yes24.com/Product/Goods/89607047">http://www.yes24.com/Product/Goods/89607047</a>)</li></ul>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2021/01/17/k8s-downward-api/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[책 리뷰] Programming in Scala</title>
      <link>http://sgc109.github.io/2021/01/09/programming-in-scala/</link>
      <guid>http://sgc109.github.io/2021/01/09/programming-in-scala/</guid>
      <pubDate>Sat, 09 Jan 2021 13:17:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;Programming in Scala&lt;/code&gt; 는 Scala 의 창시자인 &lt;strong&gt;마틴 오더스키(Martin Odersky)&lt;/strong&gt; 가 집필한 Scala 서적이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>Programming in Scala</code> 는 Scala 의 창시자인 <strong>마틴 오더스키(Martin Odersky)</strong> 가 집필한 Scala 서적이다.</p><a id="more"></a><img src="https://sgc109.github.io/images/programming-in-scala/book-cover.png" width="400"/><h2 id="저자-소개">저자 소개</h2><p>일단 책의 저자인 마틴 오더스키에 대한 설명이 필요할 것같다.</p><p>마틴 오더스키는 세계적인 명문 대학인 스위스의 로잔 연방 공과대학교(약칭 EPFL)의 교수이며,</p><p>Akka<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 를 만든 Jonas Boner 등과 함께, 현재는 라이트밴드(Lightbend)로 이름이 바뀐 타입세이프(Typesafe)사의 공동 창업자다.</p><p>프로그래밍 언어와 시스템 분야에서 일해왔으며, 주로 객체지향과 함수형 프로그래밍을 조합하는 분야를 연구해왔다.</p><p>자바 제네릭 설계자 중 한 명으로 자바 언어에 크게 기여하였고, javac 컴파일러를 맨 처음 작성한 프로그래머다.</p><p>2001년 이후에는 스칼라를 설계하고 구현하고 다듬는 일을 해왔으며, ACM의 펠로우이기도 하다.</p><h2 id="책-구매-동기">책 구매 동기</h2><p>내가 처음 스칼라를 공부하려고 할 때 처음으로 본 것은 Coursera 에 있는 마틴 오더스키의 강좌<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>였다.</p><p>언어의 창시자가 강좌를 올리는 경우는 흔하지 않는데다, 꽤 유명한 강좌였고, 평도 좋은 편이기 때문에 한 번 쯤은 보고 싶었다.</p><p>강의의 내용은 굉장히 좋았다. 사실 이 강좌의 이름은 <strong>Functional Programming Principles in Scala</strong> 인데,</p><p>이름 처럼 단순히 스칼라에 대한 강의라기 보다는 함수형 프로그래밍에 대한 내용이 중심이다.</p><p>하지만 '스칼라를 통한' 함수형 프로그래밍 강좌인 만큼,</p><p>스칼라의 몇몇 API 와 문법들에 대한 설명도 있기 때문에 스칼라에 대해서도 어느정도 경험할 수 있었다.</p><p>하지만 이것만으로는 뭔가 조금 아쉬운 느낌이 들었다. 스칼라에 대해 좀 더 알고 싶었다.</p><p>그래서 <strong>924 페이지</strong>에 달하는 분량의 <strong>Programming in Scala</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> 를 구매하게 되었다.</p><p>엄청난 분량임에도 이 책을 구입한 이유는, 우선 저자인 마틴 오더스키가 스칼라 언어의 창시자라는 점이 꽤 컸고,</p><p>코세라 강좌에서 처럼 책에서도 설명을 잘 해주지 않을까 하는 기대에서였다. 읽어보니 정말 설명이 괜찮았다.</p><p>그리고 스칼라의 모든 문법을 한 번쯤은 다 훑어보고 싶었다.</p><h2 id="책의-특징">책의 특징</h2><p>스칼라의 창시자 답게 스칼라를 만든 동기와 철학, 역사에 대해서도 기술 하였으며,</p><p>단순히 스칼라의 기본적인 문법과 API, 그리고 활용에 대한 내용 뿐 아니라 함수형 프로그래밍에 대한 내용도 있어 굉장히 유익하다.</p><p>물론 함수형 프로그래밍에 대해서 더욱 상세하게 알고 싶다면 <strong>'스칼라로 배우는 함수형 프로그래밍(functional programming in scala)'</strong><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> 와 같은 책을 별도로 봐야겠지만,</p><p>이 책에도 순수 함수, 부수 효과, 일급 함수 등 함수형 프로그래밍의 기본적인 용어에 대한 내용을 가볍게 다뤄서 FP 에 대한 기본적인 개념에 대해 배울 수 있다.</p><p>명령형(imperative)이 아닌 functional 하게 코드를 작성하는 방법에 대한 팁이나 FP 의 장점 등에 대한 내용도 있어 유익하다.</p><p>자바에 큰 기여를 한 사람 답게 자바와의 차이를 중심으로 설명하는 부분들도 꽤 있는데, 자바에 익숙한 개발자라면 이런 부분은 더 잘 읽힐 것이다.</p><p>유일한 단점을 꼽자면 책의 분량이 너무 많다는 것인데, 그럼에도 불구하고 충분히 읽을만 한 가치가 있다고 생각한다.</p><p>왜냐하면 그 만큼 유익한 내용이 많고, 스칼라의 거의 모든 문법을 상세히 다루기 때문이다.</p><h2 id="결론">결론</h2><p>스칼라를 제대로 알고 사용하고 싶은 사람이라면 추천하고 싶다.</p><p>하지만, 만약 새로운 언어를 배울 때 빠르게 기본적인 문법을 훑고 바로 써먹는 것을 좋아하는 싶은 사람이라면 맞지 않을 수도 있을것 같다.</p><p>물론 이 책을 모두 읽는다고 해서 스칼라 프로그래밍을 잘 할 수 있게 되는 것은 아닐 것이다.</p><p>함수적으로 코드를 작성하는 것은 제쳐 두더라도, 스칼라 자체가 굉장히 공부할 게 많은 언어라고 생각하고,</p><p>실무에서 스칼라를 사용하여 개발을 하기 위해서는 추가적으로 다양한 라이브러리를 알아야 하기 때문이다.</p><p>Scala 라는 언어가 굉장히 매력적인 언어긴 하지만 러닝 커브가 높은 언어임에는 분명하다는 생각이 든다.</p><p>하지만 이 책을 읽고나서 든 생각은 읽길 잘했다는 것이었다.</p><p>개인적으로 어떤 언어를 처음 배울 때 구글링을 통해 기본 문법과 함수들을 빠르게 학습하여 사용하면 어딘가 허전한 기분이 들 때가 있다.</p><p>이 책은 이런 허전함을 없애 주기에 충분했고 스칼라의 여러 매력을 느끼게 해준 매우 유익한 책이었다.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://akka.io/">https://akka.io/</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="http://coursera.org/learn/progfun1">http://coursera.org/learn/progfun1</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="http://www.yes24.com/Product/Goods/96640057">http://www.yes24.com/Product/Goods/96640057</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="http://www.yes24.com/Product/Goods/16969986">http://www.yes24.com/Product/Goods/16969986</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2021/01/09/programming-in-scala/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Boyer-Moore 과반수 투표 알고리즘</title>
      <link>http://sgc109.github.io/2020/11/30/boyer-moore-majority-vote-algorithm/</link>
      <guid>http://sgc109.github.io/2020/11/30/boyer-moore-majority-vote-algorithm/</guid>
      <pubDate>Sun, 29 Nov 2020 17:26:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;Boyer-Moore 과반수 투표 알고리즘(majority vote algorithm)&lt;/code&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;은 배열에 포함된 원소들 중 절반 이상 포함된 원소를 linear time 과 constant space 로 찾을 수 있는 알고리즘이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>Boyer-Moore 과반수 투표 알고리즘(majority vote algorithm)</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>은 배열에 포함된 원소들 중 절반 이상 포함된 원소를 linear time 과 constant space 로 찾을 수 있는 알고리즘이다.</p><a id="more"></a><p>참고로 <a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm">Boyer–Moore 문자열 검색 알고리즘(string-search algorithm)</a>과는 다르므로 헷갈리지 말자.</p><p>보이어 무어 과반수 투표 알고리즘은 <a href="https://en.wikipedia.org/wiki/Streaming_algorithm">스트리밍 알고리즘(streaming algorithm)</a>의 대표적인 예다.</p><p>만약 배열 내 과반수(절반이 넘는 수)에 해당하는 원소가 존재한다는 보장이 된다면, 결과값은 항상 과반수 원소가 된다.</p><p>주의할 점은, 만약 배열 내에 과반수 만큼 등장하는 원소가 없다면 결과값으로 임의의 의미없는 값이 나오게 된다(딱 절반 만큼 등장하는 원소가 있더라도 마찬가지다)</p><p>즉, 과반수 만큼 등장하는 원소가 있다는 보장이 없다면, 결과값이 항상 과반수에 해당하는 원소라는 보장도 없다는 것이다.</p><h2 id="동작-방식">동작 방식</h2><ul><li>major 와 count 를 0 으로 초기화 한다.</li><li>배열의 각각의 원소 x에 대해<ul><li>if <code>count = 0</code>, <code>major = x</code>, <code>count = 1</code> 대입</li><li>else if <code>major = x</code>, <code>count = count + 1</code></li><li>else, <code>count = count - 1</code></li></ul></li><li>major 를 반환<ul><li>만약 딱 절반 만큼 존재하는 원소</li></ul></li></ul><p>위의 로직을 그림으로 나타내면 다음과 같다.</p><p><img src="/images/boyer-moore-majority-vote-algorithm/diagram.png" alt="출처: https://en.wikipedia.org/wiki/File:Boyer-Moore_MJRTY.svg"></p><p>X축에 있는 도형이 배열에 있는 원소이고, Y축에 있는 숫자가 <code>count</code> 값이며, 꺾은선 그래프 위에 있는 도형이 현재 <code>major</code> 변수에 들어있는 원소다.</p><h2 id="증명">증명</h2><p>우선, 과반수 원소가 있을 때 위 로직대로 수행하면 결과값이 항상 과반수 원소가 된다는 것을 증명해보겠다.</p><p>뭔가 직관적으로 당연한것 같으면서도 애매한 분들을 위해 쉬운 비유를 하나 들어보겠다.</p><blockquote><p>하나의 성을 차지하기 위해 여러 나라가 전투를 벌인다. 여러 나라에서 온 병사들은 일렬로 줄을 서 있고, 한 명씩 차례대로 성을 향해서 돌진한다.</p><p>만약 성에 아무도 없다면 바로 성을 함락하여 성의 주인이 된다. 성에 누군가가 있다면 2가지 케이스로 나뉜다.</p><p>성에 있는 사람이 나와 같은 나라 사람이면 성에 합류하고, 다른 나라 사람이면 싸워서 성에 있는 병사 한 명과 동반 자살(?)한다.</p><p>즉, 성에 있는 사람 수를 1만큼 감소시키는 동시에 자기 자신 또한 사라진다.</p><p>어떤 나라가 성을 함락하는 순간 다른 모든 나라는 같은 팀이나 다름없다. 왜냐하면 모두 성을 향해서만 공격하기 때문에 성을 함락한 나라의 병사 숫자가 집중적으로 감소하기 때문이다.</p><p>모든 병사가 돌진한 뒤에도 성에 병사가 남아있다면 그 병사의 나라가 최종적으로 성의 주인이 된다. 만약 성에 아무도 남지 않는다면 마지막으로 성을 소유했던 나라가 성의 주인이 된다.</p></blockquote><p>결국 위의 동작 방식에서 얘기한 <code>major</code> 변수가 <em>성</em>이고, <code>count</code> 변수가 성에 있는 <em>병사의 수</em>이며, <code>배열의 각 원소</code>는 <em>병사</em>, 원소의 값 <code>x</code>는 각 <em>병사가 속한 나라</em>이다.</p><p>그리고 결과값이 나타내는 것은 최종적으로 성의 주인이 되는 나라이다.</p><p>만약 병사의 숫자가 과반수에 해당하는 나라가 있다면 이 나라에게 최악의 경우는 처음부터 성을 함락하여 다른 모든 나라가 동맹을 맺어 성을 향해 돌진하게 되는 상황이다.</p><p>하지만 어차피 과반수 나라는 적어도 최후의 1인은 살아남아 성의 주인으로 남을 것이다.</p><p>만약 다른 나라가 성을 함락한 적이 있다면, 오히려 이득이다. 과반수가 아닌 다른 나라끼리 싸워서 자신들의 병사들을 비축시킬 수도 있기 때문이다.</p><p>그렇기 때문에 과반에 해당하는 원소가 있을 경우, 앞서 언급한 로직대로 수행하면 무조건 결과값으로 세팅되는 것이다.</p><p>하지만 과반에 해당하는 나라가 없다면 어떤 나라가 먼저 성을 함락하느냐에 따라 성의 최종 주인이 달라지게 되므로, 앞선 로직의 결과값은 의미가 없다.</p><p>다음으로, 과반수 원소가 없을 때 정확히 절반 만큼 존재하는 원소가 있으면 결과값이 해당 원소가 될 듯한 느낌도 드는데, 아니라는 것을 반례를 들어 증명하겠다.</p><p>만약 주어진 배열이 [1, 1, 1, 2, 3, 3] 이라면 결과값이 1이 되지만, 같은 구성에 순서만 바꾼 [2, 1, 1, 3, 3, 1] 이라면 결과값이 3이 된다.</p><h2 id="소스-코드">소스 코드</h2><p>알고리즘의 로직 자체가 단순하기 때문에 소스코드 또한 굉장히 간단하다.</p><p>다음은 C++ 로 보이어 무어 과반수 투표 알고리즘을 구현한 코드이다.</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMajority</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> major = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) major = num;</span><br><span class="line">        <span class="keyword">if</span> (major == num) count++;</span><br><span class="line">        <span class="keyword">else</span> count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> major;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="예제">예제</h2><p><a href="https://leetcode.com/problems/online-majority-element-in-subarray/">LeetCode 1157. Online Majority Element In Subarray</a><br><a href="https://leetcode.com/problems/online-majority-element-in-subarray/discuss/356227/C%2B%2B-Codes-of-different-approaches-(Random-Pick-Trade-off-Segment-Tree-Bucket)">풀이</a></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm">https://en.wikipedia.org/wiki/Boyer–Moore_majority_vote_algorithm</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/11/30/boyer-moore-majority-vote-algorithm/#disqus_thread</comments>
    </item>
    
    <item>
      <title>파이썬과 동시성 프로그래밍</title>
      <link>http://sgc109.github.io/2020/11/25/python-and-concurrency/</link>
      <guid>http://sgc109.github.io/2020/11/25/python-and-concurrency/</guid>
      <pubDate>Wed, 25 Nov 2020 13:40:32 GMT</pubDate>
      <description>
      
        &lt;p&gt;파이썬의 동시성 프로그래밍과 관련하여 삽질한 내용을 바탕으로 블로그 포스팅을 작성해보았다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>파이썬의 동시성 프로그래밍과 관련하여 삽질한 내용을 바탕으로 블로그 포스팅을 작성해보았다.</p><a id="more"></a><p>지금까지는 파이썬으로 비교적 단순한 코드만 작성해 보았고, 팀에서 주로 사용하는 언어가 스칼라이기 때문에 파이썬에서의 동시성 프로그래밍에 대해서는 완전히 문외한이었다.</p><p>하지만 어쩌다 파이썬으로 동시성 프로그래밍을 해야할 일이 생겼고, 간단하게나마 내용을 정리해보았다.</p><h2 id="동시성과-병렬성">동시성과 병렬성</h2><p>우선 동시성(Concurrency)과 병렬성(Parallelism)의 차이에 대해 이야기 해보자.<br>철수가 소파에 앉아있고, 앞에 3개의 TV 가 서로 적당한 간격을 두고 있다고 가정하자. 철수는 자신이 가장 좋아하는 예능 프로그램인 무한도전, 1박2일, 아는형님을 각각의 TV 에 틀어놓았다.<br>3개의 예능 프로그램을 너무나도 좋아한 나머지 동시에 보고싶었기 때문이다. 철수는 우선 무한도전을 틀어놓은 TV를 10초 보다가, 1박2일을 틀어놓은 TV를 3초 보다가, 아는형님을 틀어놓은 TV를 5초간 보았다.<br>여기서 알 수 있는 사실은, 철수는 3개의 예능 프로를 동시에(Concurrent) 시청하고 있지만 한 번에 하나의 TV 만 볼 수 있다. 즉, 눈이 3쌍이 아니기 때문에 3개의 TV 를 한 번에(Parallel)볼 수는 없는 것이다.<br>물론 한국어와 영어 단어 사이에 1대1 대응이 어려워 두 행위 모두 '동시에'라고 얘기할 수 있기 때문에 헷갈릴 수도 있다. 하지만 철수가 한 번에 하나의 TV 만 볼 수 있기 때문에 병렬성은 없는 것이며, 동시에 여러개의 예능 프로를 본다는 것은 동시성은 있는 것이다.<br>컴퓨터의 세계에서는 철수를 컴퓨터로, 철수의 눈 한 쌍이 CPU 의 코어 하나라고 볼 수 있고, 각 예능 프로그램이 스레드라고 볼 수 있다. 여러개의 스레드가 실행중이지만 싱글 코어 CPU 이기 때문에 한 번에 하나의 작업만 수행할 수 있는 것이다. 물론 여러 스레드를 아주 빠른 속도로 번갈아 수행하면 마치 병렬적으로 수행되는것처럼 보일 수도 있다. 반면 멀티 코어 CPU 에서 여러개의 스레드가 동시에 여러개의 코어에서 실행될 수 있다. 어떤 특정 시점에 두 개 이상의 스레드가 코어에서 실행 중이라면 그것은 병렬성이 있다고 하는것이다.</p><h2 id="파이썬에서의-동시성-프로그래밍">파이썬에서의 동시성 프로그래밍</h2><h3 id="멀티프로세싱과-멀티스레딩">멀티프로세싱과 멀티스레딩</h3><p>파이썬에서 동시성 프로그래밍을 하는 방법은 정말 많다. 우선 가장 쉽게 떠올릴 수 있는 방법은 멀티프로세싱과 멀티스레딩이다.</p><p>파이썬에는 <code>GIL(Global Interpreter Lock)</code>이라는 것이 있어서, 하나의 process 내의 여러개의 thread 가 병렬적으로 실행될 수 없다. 즉, 멀티 코어 CPU 에서 동작한다고 하더라도 하나의 프로세스는 동시에 여러개의 코어를 사용할 수 없다는 뜻이다. 그렇기 때문에 만약 수행하고자 하는 작업이 CPU bound job 이고 multi-core CPU 환경인 경우에는 멀티프로세싱을 사용하는 것이 유리하다. 왜냐하면 하나의 프로세스 내에서 아무리 여러개의 스레드를 만들어봐야, 하나의 스레드에서 순차적으로 수행하는것과 비교하여 딱히 성능이 좋아지지 않기 때문이다. context switching 을 생각하면 멀티스레딩 쪽이 오히려 더 느릴 수도 있다. 게다가 여러개의 스레드를 사용하면 메모리 사용량도 많아진다.</p><p>하지만 만약 수행하고자 하는 작업이 I/O bound job 이라면 이야기가 달라진다. 어떤 스레드가 I/O 를 수행하기 위해 block 이 되면 GIL 을 반환하게 되고, 그 동안 다른 스레드가 실행될 수 있기 때문이다. 물론 복수의 스레드가 복수의 코어에서 병렬적으로 실행될 수 없다는 사실은 변함이 없지만, 하나의 스레드만 사용하여 여러 작업을 동시에 수행하고자 하는 경우에는 이 스레드가 block 이 되면 아무런 일도 하지 않게 되기 때문에 이런 경우에는 멀티스레딩을 사용할 가치가 충분히 있는것이다. 하지만 스레드는 직접 사용하기가 까다롭다. race condition 도 발생할 수 있고, 메모리 사용량과 context switching 측면에서도 비용이 비싸다.</p><p>다음은 David Beazley 의 발표 영상에서 발췌한 파이썬에서 동시성 프로그래밍의 발전 과정을 단순화한 그림이다.<br><img src="/images/python-and-concurrency/history.png" alt="A history of concurrent programming in python"><br>영상을 보면 파란 화살표가 둥그렇게 돌아서 다시 스레드와 가까운 쪽으로 오도록 그린 의도가, 스레드를 직접 사용하는 것의 단점에서 출발하여 결국은 스레드와 비슷한 모양새로 발전해왔기 때문이라고 한다.<br>asyncio 와 같은 라이브러리들은 마치 스레드를 사용하는 것과 비슷한 느낌이 들지만, 실제로 기본적으로는 여러 스레드를 사용하지 않기 때문에 스레딩의 단점이었던 몇몇 특징을 가지고있지 않다.</p><h3 id="코루틴">코루틴</h3><p>파이썬에서 동시성 프로그래밍을 할 수 있는 또다른 방법은 <code>코루틴(Coroutine)</code>을 사용하는 것이다.<br>코루틴은 특정 언어에 종속되는 개념이 아닌 general 한 개념이다. 보통의 프로그램은 함수1에서 함수2를 호출한 경우 함수2를 서브루틴이라고 부른다. 이 때 함수1과 함수2는 종속적인 관계를 갖는다고 볼 수 있다. 함수2에 정의된 일련에 코드가 모두 수행되면 항상 함수1로 실행의 흐름이 돌아가게 된다.<br>하지만 코루틴은 서로 종속적인 관계가 아닌 상호 협력적인(<strong>cooperative</strong>) 관계다. 코루틴1은 원하는 시점에 코루틴2, 혹은 코루틴3 에게 실행의 흐름을 넘겨줄 수 있다. 그러면 코루틴1은 실행 흐름을 넘겨준 지점에서 멈춰있는 상태가 되고 나중에 언제든지 해당 지점부터 다시 이어서 실행될 수 있는 상태가 된다. 실행 흐름을 양보(yield)받은 코루틴은 처음 실행되는 거라면 처음부터 실행되고 만약 이전에 코드를 실행하다 멈춰져있던 상태라면 멈춘 지점부터 다시 순차적으로 코드가 실행되기 시작한다. 그리고 마찬가지로 원하는 시점에 다른 코루틴으로 실행 흐름을 넘겨줄 수 있다. 이것은 한편으로는 스레드와 비슷하다. 다른 코루틴에게 실행의 흐름을 넘겨주는 행위는 스레드간의 컨텍스트 스위칭과 비슷하다고 할 수 있다. 다만 스레드간의 컨텍스트 스위칭이 발생하는 시점과 다음에 어떤 스레드가 실행될 것인지 결정하는 것은 kernel 영역에서, 즉 OS에 의해 결정되는 반면, 코루틴간에 흐름이 변경되는 지점은 user 영역에서, 즉 개발자가 코드로 명시하게 된다. 즉, 코루틴간의 제어의 흐름을 개발자가 완벽하게 컨트롤할 수 있다는 뜻이다(물론 여러 코루틴이 실행되는 스레드가 컨텍스트 스위칭에 의해 실행이 멈춰 그 안에서 수행되던 모든 코루틴의 실행도 함께 멈출 수는 있다). 이는 <strong>preemptive</strong> 한 OS 의 native thread 와는 대조된다. 게다가 코루틴은 스레드보다 메모리 사용량도 적으며, 컨텍스트 스위칭으로 인한 비용도 없다.<br>파이썬에서는 주로 이 코루틴과 이벤트 루프를 함께 사용하여 편리하게 동시성 프로그래밍을 할 수 있게 하는 패키지들이 많다. 많은 패키지들은 내부적으로 다음과같이 구현되어있다. 코루틴은 큐 안에 들어가고 이벤트 루프는 큐 안에 있는 코루틴을 하나씩 빼 코드를 실행하다가 비동기 작업이 시작되면 해당 라인에서 멈추어 다시 큐의 뒷부분에 넣는다. 만약 큐에서 코루틴을 꺼냈는데 비동기 작업이 종료된 상태라면 결과값을 사용하여 멈췄던 부분부터 다시 코드를 실행한다. 이렇기 때문에 하나의 스레드로도 여러 비동기 작업들을 동시에 수행할 수 있는 것이다. 또한 우리가 원하는 시점에 context switching 없이 다음 코루틴에게 실행권을 양도할 수 있게된다.</p><h2 id="파이썬에서-코루틴-사용하기">파이썬에서 코루틴 사용하기</h2><h3 id="generator">generator</h3><p>파이썬에서 코루틴을 사용하는 방법은 여러가지가 있다. 우선 <code>generator</code> 를 코루틴으로 사용할 수 있다. generator 의 동작 방식을 보면 코루틴의 동작방식과 유사하다. 제너레이터 내부에서 yield 키워드를 만날 때마다 실행의 흐름이 generator 를 인자로 next() 함수를 호출한 쪽으로 넘어가면서 값을 뱉는다. 그리고 언제든지 next() 메소드를 사용하여 generator 의 이전에 멈춘 지점부터 실행하여 다음 yield 문을 만날 때까지 실행된다. 파이썬 3.4 부터는 subgenerator 에게 위임하기 위한 문법으로 <a href="https://www.python.org/dev/peps/pep-0380/#generators-as-threads">yield from이 추가</a>되었는데 이를 통해 generator 를 활용한 동시성 프로그래밍이 더 편해졌다.</p><h3 id="asyncio">asyncio</h3><p>또 다른 방법은 파이썬 빌트인 라이브러리인 <a href="https://www.python.org/dev/peps/pep-3156/">파이썬 3.4 버전부터 도입</a>된 <code>asyncio</code> 와 <a href="https://www.python.org/dev/peps/pep-0492/">파이썬 3.5 버전부터 도입</a>된 <code>async/await</code> 키워드를 통한 방법이다.<br>asyncio 는 자체적으로 coroutine 과 event loop 를 가지고 있어서 이를 통해 동시성 프로그래밍을 지원한다. 동작 원리와 구현 스타일은 전체적으로 generator 방식과 매우 유사하다.<br>개인적으로는 현시점에서 굳이 asyncio 를 안 쓸 이유가 있나 싶다. 왜냐하면 asyncio 는 파이썬에서 공식적으로 지원하는 built-in 패키지이기 때문에 수많은 파이썬 서버와 라이브러리가 이 asyncio 를 지원하며, 문서화도 잘 되어있기 때문이다.</p><h3 id="3rd-party-라이브러리">3rd-party 라이브러리</h3><p>또 하나는 써드파티 라이브러리를 통한 방법이다. 파이썬에는 <code>greenlet</code> 과 같은 써드파티 코루틴 라이브러리들이 있다.<br>대표적으로 <code>gevent</code> 는 내부적으로 greenlet 를 사용하며, 거기에 libev 라는 이벤트루프와 monkey patch 라는 기술 등등을 사용하여 동시성을 구현한다.<br>greenlet 을 <code>green thread</code> 라고도 부른다. green thread 또한 general 한 개념인데, 위에서 설명한 코루틴의 특징과 비슷하게, OS가 아닌 user 영역에서 생성되고 관리되며, cooperative 한 lightweight 스레드라고 보면 된다.<br>asyncio 가 등장하고 어느정도 정착되기 전까지는 gevent 와 같은 써드파티 라이브러리들이 많이 사용되었고, 아직도 많이 사용되는것 같다.</p><h2 id="파이썬-서버-및-프레임워크와-동시성">파이썬 서버 및 프레임워크와 동시성</h2><p>보통 파이썬으로 프로덕션 수준의 서버를 개발한다면 Flask 의 Werkzeug 과 같이 프레임워크에 내장된 WSGI 서버를 사용하기 보다는 uWSGI 나 Gunicorn 와 같은 별도의 서버를 사용하는 경우가 많다. gunicorn 의 경우는 worker-class 옵션을 통해 각 worker process 가 어떤 방식으로 요청을 처리하게 할 지 설정할 수가 있는데, 기본적으로는 하나의 worker process 가 최대 하나의 요청만 동기적으로 처리하게 된다. worker-class 옵션을 <em>gthread</em> 로 설정하여 멀티스레드 기반으로 동작하도록 할 수도 있고, <em>gevent</em> 와 같은 비동기 worker 를 사용하여 처리하도록 할 수도 있다. 주의할 점이 있다면 gunicorn 에서 gevent worker 를 사용하고 스크립트 코드상에서는 asyncio 를 사용한다면 각자 코루틴과 이벤트 루프의 구현체가 다르기 때문에 둘의 호환을 위한 중간 라이브러리를 추가로 사용하거나 두 곳에서 같은 라이브러리를 사용하도록 통일해야 한다.<br>애초부터 비동기 프레임워크를 사용할 수도 있다. 특히 Sanic 이나 Quart 같은 프레임워크는 플라스크와 사용 방법이 매우 비슷하여 처음 사용하는데도 큰 무리가 없다. 이들은 비동기 서버를 내장하여 뷰 함수를 작성할 때 <code>async def</code> 와 같이 정의한다.<br>비동기 서버로 Uvicorn 이나 Hypercon 과 같은 ASGI 서버를 사용할 수도 있다. Hypercon 은 본래 Quart 내장 서버에서 분리된 프로젝트여서 Quart 는 기본적으로 Hypercon 을 사용한다.<br>아무튼 위와 같은 비동기 서버 및 비동기 worker 들은 멀티스레드를 사용하지 않고도 여러개의 요청을 비동기적으로 처리할 수 있게 한다.</p><h2 id="참고-자료">참고 자료</h2><p>GIL 유튜브 영상(<a href="https://www.youtube.com/watch?v=Obt-vMVdM8s">https://www.youtube.com/watch?v=Obt-vMVdM8s</a>)<br>python coroutine 원리 유튜브 영상(<a href="https://www.youtube.com/watch?v=MCs5OvhV9S4">https://www.youtube.com/watch?v=MCs5OvhV9S4</a>)<br>python concurrency 유튜브 영상(<a href="https://www.youtube.com/watch?v=lYe8W04ERnY">https://www.youtube.com/watch?v=lYe8W04ERnY</a>)<br>gevent 유튜브 영상(<a href="https://www.youtube.com/watch?v=GunMToxbE0E">https://www.youtube.com/watch?v=GunMToxbE0E</a>)</p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/11/25/python-and-concurrency/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WSGI 란?</title>
      <link>http://sgc109.github.io/2020/08/15/python-wsgi/</link>
      <guid>http://sgc109.github.io/2020/08/15/python-wsgi/</guid>
      <pubDate>Sat, 15 Aug 2020 01:46:57 GMT</pubDate>
      <description>
      
        &lt;p&gt;Python 으로 서버 개발을 하다보면 &lt;code&gt;WSGI&lt;/code&gt;, &lt;code&gt;uWSGI&lt;/code&gt;, &lt;code&gt;Werzeug&lt;/code&gt; 등의 단어들이 자주 보인다.&lt;/p&gt;
&lt;p&gt;본 포스트에서는 이것들에 대해 알아본다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Python 으로 서버 개발을 하다보면 <code>WSGI</code>, <code>uWSGI</code>, <code>Werzeug</code> 등의 단어들이 자주 보인다.</p><p>본 포스트에서는 이것들에 대해 알아본다.</p><a id="more"></a><h2 id="Web-Server-와-Web-Application">Web Server 와 Web Application</h2><p>우선 Web Server 의 개념과 간단한 히스토리를 알아야 한다.</p><p>Web Server 는 다소 광범위한 용어라서 Hardware 로서의 의미와 Software 로서의 의미를 함께 가지고 있다. 하지만 여기서는 Software 로서의 의미에 대해 이야기하겠다.</p><p>Web Server 는 Client 의 정적인 리소스(File, Image, HTML page, ...) 요청을 처리하는 프로그램이며, 대표적으로 Apache HTTP Server 와 Nginx 가 있다.</p><p>그리고 동적인 요청이 들어오면 비즈니스 로직을 수행하기 위해 Web Application(혹은, WAS, AS) 에게 요청을 위임하고, Web Application 은 Web Server 에게 로직을 수행한 결과를 다시 돌려준다.</p><p>그럼 Web Server 가 Web Application 과 대화할 수 있는 인터페이스가 필요할 것이다.</p><p>특히, 다양한 종류의 Web Server 와 Web Application 을 Interchangable 하게 사용하기 위해서는 잘 정의된 인터페이스가 필수다.</p><h2 id="CGI">CGI</h2><p>2003년까지 Python Web Framework 는 주로 CGI 와 같은 방식으로 Web Server 와 대화했다.</p><p><strong>CGI(Common Gateway Interface)</strong> 는 다음과 같이 동작한다.</p><ul><li>먼저 Web Server 가 Client 로 부터 HTTP Request 를 받는다.</li><li>Web Server 는 Request 에 대한 정보(Method, Url, Parameters, ...)를 Environment Variable 과 Standard Input 을 통해 전달하면서 Script 를 실행한다.</li><li>Script 는 비즈니스 로직을 수행하고 Standard Output 으로 결과를 Web Server 에게 전달한다.</li><li>Web Server 는 이를 다시 Client 에게 전달한다.</li></ul><p>문제는 매번 다시 스크립트를 실행하여 메모리에 적재하는 과정에서 발생하는 추가적인 시간 소요 등이었다.</p><p>이 때 2003년에 Python 표준(<a href="https://www.python.org/dev/peps/pep-0333/">PEP333</a>)인 WSGI 가 등장하게 된다.</p><h2 id="WSGI">WSGI</h2><p><strong>WSGI(Web Server Gateway Interface)</strong>(위스키라고 읽는다) 는 <em>Callable Object</em> 라는 녀석을 통해 Web Server 가 요청에 대한 정보를 Application 에 전달한다.</p><p>Callable Object 는 Function 이나 Object 의 형태가 될 수 있으며, Web Server 는 Callable Object 를 통해 2가지 정보를 전해주어야 한다.</p><ul><li>HTTP Request 에 대한 정보(Method, URL, Data, ...)</li><li>Callback 함수</li></ul><p>다음은 각각 함수와 클래스 형태로 정의된 Callable Object 의 예이다.</p><p><em>environ</em> 이 HTTP Request 에 대한 정보를 담고 있고, <em>start_response</em> 가 Web Server 에게 결과를 돌려주기 위한 콜백 함수다.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    body = <span class="string">b'Hello world!\n'</span></span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line">    headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)]</span><br><span class="line">    start_response(status, headers)</span><br><span class="line">    <span class="keyword">return</span> [body]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        self.environ = environ</span><br><span class="line">        self.start_response = start_response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        body = <span class="string">b'Hello world!\n'</span></span><br><span class="line">        status = <span class="string">'200 OK'</span></span><br><span class="line">        headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)]</span><br><span class="line">        self.start_response(status, headers)</span><br><span class="line">        <span class="keyword">yield</span> body</span><br></pre></td></tr></table></figure><p>Web Application 는 HTTP Request 에 대한 정보를 가지고 Business Logic 을 수행한 뒤에 Callback Function 을 통해 결과를 웹서버에 반환한다.</p><p>이러한 WSGI Interface 를 구현하는 Web Server 나 Application 을 WSGI compatible 하다고 하며,</p><p>WSGI compatible 한 Application 을 WSGI Application 이라고 부르기도 한다.</p><p>또한, 이 WSGI 인터페이스를 구현하기만 한다면 누구나 Python Web Server 나 Python Framework 를 만들어서 기존에 WSGI 를 지원하던 웹서버나 프레임워크와 함께 동작하게 할 수 있다.</p><h2 id="WSGI-Middleware">WSGI Middleware</h2><p>Web Service 를 개발하다 보면 공통적으로 필요한 기능들이 있는데, <em>Authentication, Routing, Session, Cookie, Error Page 보여주기, ...</em> 와 같은 기능들이다.</p><p>WSGI Middleware 는 Middleware 라는 이름처럼 Web Application 의 실행 전과 후에 이러한 기능들을 추가해주는 녀석이며, 그 자체로도 WSGI Application 이다.</p><p>Design Pattern 의 Decorator Pattern 을 생각하면 이해가 쉽다. 양파 껍질 처럼 Web Application 을 감싸고 있는 구조이다.</p><h2 id="uWSGI-Gunicorn-Werkzeug">uWSGI, Gunicorn, Werkzeug</h2><p>글 맨 처음에 언급한 <strong>uWSGI</strong>, <strong>Gunicorn</strong>, <strong>Werkzeug</strong> 과 같은 라이브러리들이 바로 위에서 이야기한 WSGI Middleware 의 기능을 가진 라이브러리들이다.</p><p>WSGI Middleware 역할 외에도 uWSGI, Gunicorn, Werkzeug 은 자체적으로 Web Server 의 역할을 할 수도 있다. 그래서 WSGI Server 나 Stand alone WSGI Container 라고 불리기도 한다.</p><p>Flask 에서 기본적으로 사용하는 WSGI Middleware 가 Werkzeug 인데, 별다른 설정없이 Flask 앱을 실행 해보면</p><p>Production 에서는 사용하지 말라는 경고 문구가 나올 정도로 단순한 개발용 서버를 내장하고 있다.</p><p>Production Level 에서는 Nginx, Gunicorn, Django 와 같은 식의 구성을 많이 사용하기도 한다.</p><p>Nginx 는 주로 Buffering, Reverse Proxying, Load Balancing 등의 기능을 위해 Gunicorn 앞단에 배치하고,</p><p>Gunicorn 은 Django 로 작성한 Web Application 에 HTTP 요청을 전달해주는 역할의 WSGI HTTP Server 로서 사용하는 것이다.</p><p>Gunicorn 을 사용할 땐 worker process 의 개수와 worker class(async 방식인 Gevent, Tornado, ...)를 설정하여 요청 처리 성능을 높일 수 있다.</p><h2 id="더-읽을거리">더 읽을거리</h2><p><a href="https://www.ibm.com/cloud/learn/web-server-vs-application-server">https://www.ibm.com/cloud/learn/web-server-vs-application-server</a><br><a href="https://www.nginx.com/resources/glossary/application-server-vs-web-server/">https://www.nginx.com/resources/glossary/application-server-vs-web-server/</a><br><a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface</a><br><a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface">https://en.wikipedia.org/wiki/Common_Gateway_Interface</a><br><a href="https://www.python.org/dev/peps/pep-0333/">https://www.python.org/dev/peps/pep-0333/</a><br><a href="https://www.youtube.com/watch?v=WqrCnVAkLIo">https://www.youtube.com/watch?v=WqrCnVAkLIo</a><br><a href="http://xplordat.com/2020/02/16/a-flask-full-of-whiskey-wsgi/">http://xplordat.com/2020/02/16/a-flask-full-of-whiskey-wsgi/</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/08/15/python-wsgi/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DDD 의 Aggregate</title>
      <link>http://sgc109.github.io/2020/08/09/ddd-aggregate/</link>
      <guid>http://sgc109.github.io/2020/08/09/ddd-aggregate/</guid>
      <pubDate>Sun, 09 Aug 2020 13:17:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;본 글에서는 도메인 주도 설계(Domain Driven Design) 에서 굉장히 중요한 개념인 &lt;code&gt;애그리거트(Aggregate)&lt;/code&gt;에 대해 알아본다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>본 글에서는 도메인 주도 설계(Domain Driven Design) 에서 굉장히 중요한 개념인 <code>애그리거트(Aggregate)</code>에 대해 알아본다.</p><a id="more"></a><p>간략한 설명은 <a href="/2020/08/09/ddd-basic/">DDD 시작하기</a> 에서 다룬다. 본 포스팅에 없는 내용도 있으니 함께 읽는것을 추천한다.</p><h2 id="Aggregate-란">Aggregate 란?</h2><p>애그리거트(Aggregate)는 한마디로 <strong>서로 관련이 있는 도메인 모델들의 집합</strong>이다.</p><p>많은 수의 도메인 모델 간의 복잡한 관계를 파악하기란 쉬운 일이 아니다.</p><p>그렇기 때문에 서로 관련이 있는 도메인 모델들 끼리 묶어 각 도메인 모델의 상세 구현보다는 더 큰 그림으로 도메인 모델간의 관계를 파악하는것이 좋다.</p><p>자세한 사항이 궁금하면 그 때 애그리거트 내부를 살펴보면 된다.</p><p>대부분의 경우 하나의 애그리거트는 하나의 엔티티와 여러개의 밸류로 구성된다. 드물게 하나의 애그리거트에 두개의 엔티티가 존재하기도 한다.</p><p>각 애그리거트에는 <strong>애그리거트 루트</strong>라는 도메인 엔티티가 하나씩 있다.</p><p>애그리거트 루트는 애그리거트 내에 속한 객체의 변경을 책임지며, 도메인 규칙에 따라 언제나 애그리거트 내 모든 도메인 모델들의 일관성을 유지할 책임이 있다.</p><p>애그리거트는 DB 에 도메인을 저장하거나 읽어들이는 단위이며, 애그리거트를 읽을 때는 애그리거트 루트의 id 를 이용한다.</p><p>일반적으로 하나의 애그리거트에는 하나의 도메인 엔티티(애그리거트 루트)가 존재하며, 0개 이상의 밸류 타입이 존재한다.</p><p>드물게 한 애그리거트에 2개 이상의 엔티티가 존재하지만, 사실은 애그리거트 루트를 제외한 도메인 모델이 엔티티가 아니라 밸류 타입이거나 다른 애그리거트에 속해야 하는 경우가 많으므로 잘 확인해야한다.</p><p>서로 다른 도메인 모델이 변경의 주체와 생성 및 변경의 시점이 같다면 같은 애그리거트에 속할 가능성이 높다.</p><h2 id="Aggregate-와-트랜잭션">Aggregate 와 트랜잭션</h2><p>하나의 트랜잭션에서 둘 이상의 애그리거트를 수정하는 것은 성능상 좋지 않아 피하는 것이 좋다.</p><p>그러기 위해서는 하나의 애그리거트에서 다른 애그리거트를 변경하지 말아야 한다는 이야기가 된다.</p><p>(물론, 그러지 말아야 하는 또다른 이유는 그러한 행위가 애그리거트간의 결합도를 높이기 때문이기도 하다)</p><p>만약, 하나의 트랜잭션에서 둘 이상의 애그리거트를 변경해야 한다면 보통은 이벤트나 비동기를 사용하여 이를 피할 수 있으며,</p><p>이벤트나 비동기를 사용할 수 없는 경우에는 다른 애그리거트의 변경을 응용 서비스에서 수행하여 적어도 한 애그리거트에서 다른 애그리거트를 변경하는 것만은 피해야한다.</p><h2 id="Aggregate-의-참조">Aggregate 의 참조</h2><p>또하나 주의 해야 할 점은, 하나의 애그리거트 내에서 필드를 통해 다른 애그리거트를 직접 참조하면 다음과 같은 문제가 발생한다는 것이다.</p><ul><li>객체 그래프 탐색이 쉬움<ul><li>즉, 다른 애그리거트를 수정하기가 쉬움</li></ul></li><li>성능에 대한 고민이 필요<ul><li>지연 로딩/즉시 로딩</li></ul></li><li>확장의 어려움<ul><li>애그리거트1은 MySQL, 애그리거트2는 MongoDB, 애그리거트3은 Redis 에 저장</li></ul></li></ul><p>필드 대신 id 를 통해 애그리거트를 간접적으로 참조한다면 위와같은 문제가 모두 해결된다.</p><p>특정 애그리거트가 필요할 때마다 id 를 사용하여 Repository 를 통해 애그리거트를 가져오는것이다.</p><p>대신 이렇게 하면 <code>N+1</code> 과같은 문제를 해결하기 위해 JPQL 등으로 한 번에 데이터를 불러오는 조인 쿼리를 별도로 만들어줄 필요는 있다.</p><h2 id="Aggregate-간-연관-관계">Aggregate 간 연관 관계</h2><p>JPA 를 처음 접하는 경우 흔히 하는 실수가 객체의 모든 연관 관계를 지연 로딩과 즉시 로딩으로 어떻게든 처리하고 싶은 욕구에 사로잡히는 것이다.</p><p>하지만 위에서 설명한 바와 같이, 애그리거트는 Id 를 통해 간접적으로 참조하는 것이 좋으며,</p><p>1:N 이나 M:N 연관 관계를 가지는 객체라고 하더라도 이를 그대로 실제로 구현에 반영하는 경우는 드물다.</p><p>예를 들어, User 와 User 가 작성한 Post 간의 관계는 1:N 관계이지만, 보통은 이 User 가 작성한 모든 Post 를 한 번에 불러오는 것이 아니라 페이징을 이용해 조금씩 불러오게 된다.</p><p>또한, Category 와 Product 간의 관계는 M:N 관계이지만, 하나의 Product 가 속한 Category 는 한 번에 보여줘도, 한 Category 에 속하는 모든 Product 를 한 번에 보여주지는 않기 때문에 단방향 M:N 연관만 적용하게 된다.</p><h2 id="Aggregate-와-팩토리">Aggregate 와 팩토리</h2><p>하나의 애그리거트가 다른 애그리거트를 생성하는 팩토리의 역할을 할 수도 있다.</p><p>예를 들어, 다른 유저의 신고로 인해 특정 유저가 일정 기간 댓글을 작성할 수 없다고 가정하자.</p><p>그럼 특정 유저 id 를 가진 경우 댓글 엔티티를 생성하는 것을 막아야할 것이다.</p><p>이 때, User 의 상태에 따라 Comment 생성 가능 여부를 판단해야하며, 이와 동시에 Comment 애그리거트를 생성할 때는 어차피 User 의 id 가 필요하기 때문에</p><p>User 클래스에 팩토리 메서드를 추가하여 User 애그리거트를 Comment 애그리거트의 팩토리로 사용하면 응용 서비스로 도메인 로직이 분산되는 것을 막고, 도메인의 응집도를 높일 수 있다.</p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/08/09/ddd-aggregate/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DDD 시작하기</title>
      <link>http://sgc109.github.io/2020/08/09/ddd-basic/</link>
      <guid>http://sgc109.github.io/2020/08/09/ddd-basic/</guid>
      <pubDate>Sun, 09 Aug 2020 06:44:05 GMT</pubDate>
      <description>
      
        &lt;p&gt;본 글에서는 &lt;code&gt;도메인 주도 설계(Domain Driven Design)&lt;/code&gt;의 기본 개념에 대해서 알아본다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>본 글에서는 <code>도메인 주도 설계(Domain Driven Design)</code>의 기본 개념에 대해서 알아본다.</p><a id="more"></a><p>도메인 주도 설계(이하 DDD)에 대해 알기 위해서는 우선 기본적인 용어에 대한 정리가 필요하다.</p><h2 id="도메인과-도메인-모델">도메인과 도메인 모델</h2><p><strong>도메인(Domain)</strong> 이란 우리가 소프트웨어로 해결하고자 하는 대상이다. 예를 들어 화상 채팅 서비스를 구현하고자 하는 경우에는 화상 채팅이 도메인이 된다.</p><p>도메인은 하위 도메인으로 나뉠 수도 있다. 예를 들어, 화상 채팅 도메인은 화면 공유, 텍스트 채팅, 친구 목록 등의 하위 도메인으로 나뉜다.</p><p><strong>도메인 모델(Domain Model)</strong> 은 여러 정의가 있지만 우선 기본적으로 <strong>도메인을 개념적으로 표현한 것</strong>을 도메인 모델이라고 한다.</p><p>도메인을 개념적으로 표현하는 방법은 다양하기 때문에, 예를 들어 클래스 다이어그램이나 상태 다이어그램, 또는 그래프나 수학 공식이 모두 도메인 모델이 될 수 있다.</p><p>또한, 도메인 모델은 <strong>도메인 모델 패턴(Domain Model Pattern)</strong> 을 의미하기도 하는데, 도메인 모델 패턴은 아래와 같은 아키텍처 구조에서 도메인 계층을 객체 지향 기법으로 구현한 것을 의미한다.<br><img src="/images/ddd-basic/architecture.png" alt="일반적인 애플리케이션 아키텍처"></p><p>여기서 도메인 모델은 인프라스트럭쳐 계층(DB, OS 등)과 프레젠테이션 계층(HTTP, HTML 등)에 종속성 없이 순수하게 비즈니스 요구사항을 담는다.</p><p>본 글에서는 객체 지향 기법을 사용하여 도메인 모델링을 설명하기 때문에, 도메인 모델의 의미는 두번째 의미에 좀 더 가까우며, 도메인 모델은 클래스나 인터페이스 형태라고 가정한다.</p><p>하지만 두 가지 모두가 본질적으로 갖는 공통점은, 도메인 모델이 도메인 규칙(비즈니스 룰, 요구사항)을 담고 있다는 것이다. 예를 들어, 자리 비움 상태인 유저에게는 화상 채팅 요청을 할 수 없다는 조건을 표현할 수 있다.</p><p>도메인을 모델링하기 위해서는 우선 핵심 구성요소, 규칙, 기능을 정의해야 하며, 도메인 모델은 이를 잘 담고 있어야한다.</p><p>코드가 도메인을 잘 표현해야 가독성이 높아지고, 코드 자체로 문서의 역할을 할 수가 있다.</p><p>이를 방해하는 하나의 예시는, 도메인 모델에 습관적으로 public 인 set/get 메서드를 추가하는 것이다.</p><p>일부 도메인 규칙을 위해서는 public set/get 메서드가 있으면 안되는 경우가 있기 때문에 잘 생각하여 필요한 경우에만 추가해야한다.</p><p>물론 불변 타입을 사용하면 set 메서드는 자연스레 사라질 것이다.</p><h2 id="엔티티와-밸류">엔티티와 밸류</h2><p><strong>엔티티(Entity)</strong> 와 <strong>밸류(Value)</strong> 는 대표적인 도메인 모델이다.</p><p>둘의 가장 큰 차이는 식별자의 유무이다. 각 <em>엔티티</em>는 <strong>고유한 식별자를 가져서 이를 통해 엔티티 간의 구분이 가능</strong>하다. 예를 들어, 화상 채팅 앱에서 id 라는 고유한 값을 두어서 각 User 를 구분할 수 있다.</p><p>반면, <em>밸류</em>는 엔티티에 속하는 일종의 <strong>데이터의 묶음</strong>이며 식별자가 없다. 예를 들어, firstName, middleName, lastName 을 묶어서 Name 이라는 하나의 밸류 타입을 만들 수 있다.</p><p>동명 이인이 있을 수 있다는 사실만 보아도 Name 이라는 도메인 모델은 엔티티가 아닌 밸류라는 것을 알 수 있다.</p><p>주의할 점은, 밸류도 DB에 저장되면 테이블의 PK가 있을 텐데 식별자가 있는 것 아닌가 하는 생각이 들 수도 있다.</p><p>하지만 엔티티에서 얘기했던 식별자는 이것을 의미하는 것은 아니다. PK 는 단순히 관계형 데이터베이스에 저장하기 위해 필요한 개념이지, 도메인 모델간의 구분에 사용되는 것은 아니기 때문이다.</p><p>그런데 밸류 타입이 꼭 두 개 이상의 데이터를 가져야하는 것은 아니다. 예를 들어, 돈의 액수를 나타내기 위해 단순히 int 타입을 사용할 수도 있지만 의미를 확실히 하고 돈과 관련된 연산을 내재하기 위해</p><p>int 타입의 변수를 하나 가진, Money 라는 밸류 타입을 만들 수도 있다. 이럴 경우, 코드에서 도메인 규칙이 더 잘 드러나기 때문에 코드의 가독성이 높아진다.</p><p>물론, Money 라는 밸류 타입을 만들지 않고 변수명을 money 로 할 수도 있겠지만, 밸류 타입을 만들면 변수 네이밍을 더 자유롭게 할 수 있고, 도메인 로직을 메소드 형태로 넣을 수 있다는 것과 같은 추가적인 장점이 있다.</p><p>밸류 타입은 Immutable 로 구현하는 것을 선호한다. 즉, 내부 상태를 변경하는 것보단 변경된 상태를 갖는 새로운 객체를 생성하는 것이다.</p><p>그 이유는 참조 투명성과 Thread Safety 를 갖게 되어 안전한 코드를 작성할 수 있기 때문이다.</p><h2 id="도메인-용어">도메인 용어</h2><p>도메인 용어는 말 그대로 <strong>도메인 내에서 사용하는 용어</strong>이다. 예를 들어, 도메인 규칙에 사용자가 '자리 비움' 이나 '바쁨' 상태일 때는 통화를 걸 수 없으며, '한가함' 항태일 때는 통화를 걸 수 있다는 내용이 있다고 가정하자.</p><p>그렇다면 '자리 비움', '바쁨', '한가함' 은 모두 도메인 용어이다. 이 코드에는 이러한 도메인 용어가 잘 드러나도록 작성되어야 한다.</p><p>즉, 'STATE1', 'STATE2', 'STATE3' 과 같은 네이밍이 아닌, 'ABSENT', 'BUSY', 'FREE' 와 같은 네이밍을 사용해야 도메인이 잘 표현되었다고 할 수 있으며, 유지보수성과 가독성이 높아진다.</p><h2 id="애그리거트">애그리거트</h2><p>애그리거트(Aggregate)는 <strong>서로 관련이 있는 도메인 모델들의 집합</strong>이다.</p><p>도메인이 커지면 엔티티와 밸류의 수도 점점 많아지게 된다. 이 때 애그리거트 단위로 캡슐화를 하면 내부 구현을 숨기고 도메인 모델을 더 상위 수준에서 바라볼 수 있게 되어 관리나 변경도 용이해지며, 도메인 모델간의 관계를 좀 더 쉽게 파악할 수 있게 된다.</p><p>예를 들어, 인스타그램에서 타임라인과 관련된 기능을 하나의 애그리거트로 묶고, 채팅과 관련된 기능을 하나의 애그리거트로 묶을 수가 있을 것이다.</p><p>같은 애그리거트에 속하는 모델들은 유사하거나 동일한 라이프사이클을 가진다. 함께 생성되는 구성 요소들은 같은 애그리거트에 속할 가능성이 높다.</p><p>예를 들어, 주문, 주문할 상품 정보(상품의 종류와 개수), 수령인 정보, 배송지 정보 등은 주문이 들어올 때 함께 생성되므로 같은 애그리거트에 속한다.</p><p>또한, 함께 변경되는 빈도가 높은 구성요소들도 같은 애그리거트에 속할 가능성이 높다.</p><p>예를 들어, 주문하는 상품의 개수가 변경되면 주문의 총 액수를 다시 계산해야하며, 배송지 정보와 주문할 상품의 개수, 수령인 등을 동시에 변경하기도 한다.</p><p>또한, 같은 애그리거트에 속하는 모델들은 변경의 주체가 같다.</p><p>예를 들어, 상품의 상세 정보와 상품의 리뷰를 생각해보자. 상품의 상세 정보 페이지가 리뷰를 포함하기 때문에 둘이 같은 애그리거트에 속한다고 착각하기 쉬운데,</p><p>상품의 상세정보는 판매자가 수정하지만, 리뷰는 고객이 수정하므로 변경의 주체가 다르며, 생성이나 변경이 함께 이루어지지도 않기 때문에 둘은 다른 애그리거트에 속한다.</p><p>참고로, 하나의 애그리거트는 하나의 엔티티 객체만 포함하는 경우가 많으며, 둘 이상의 엔티티로 이루어진 경우는 드물다. (밸류는 여러개가 있을 수 있다.)</p><p>애그리거트는 DDD 에서 굉장히 중요한 개념이기 때문에 자세한 설명은 별도의 포스트인 <a href="/2020/08/09/ddd-aggregate">DDD 의 Aggregate</a>에서 다루도록 하겠다.</p><h2 id="리포지터리">리포지터리</h2><p>리포지터리(Repository)는 <strong>도메인 모델의 영속성(Persistency)를 위해 필요한 도메인 모델이다.</strong></p><p>엔티티와 밸류가 요구사항에서 도출되는 도메인 모델이라면, 리포지터리는 구현을 위한 도메인 모델이다.</p><p>리포지터리도 도메인 모델이기 때문에 엔티티와 밸류와 함꼐 도메인 계층에 포함된다.</p><p>덧붙이자면, 리포지터리는 특정 기술에 종속되지 않고 순수하게 도메인 규칙을 정의하기 때문에 보통 인터페이스 형태로 존재하는데</p><p>실제로 도메인 모델을 저장하기 위해서는 리포지터리를 구현하는 구체적인 구현체가 필요하며, 이는 인프라스트럭처 계층에 속한다.</p><p>리포지터리는 애그리거트 단위로 도메인 모들을 저장하거나, 애그리거트 루트의 식별자로 애그리거트를 조회하는 역할을 한다.</p><h2 id="도메인-서비스">도메인 서비스</h2><p>여러 애그리거트가 사용되어 하나의 애그리거트에 넣기는 애매한 로직을 가지는 개념이다.</p><p>여러 애그리거트가 관여하는 로직을 한 애그리거트에 넣게되면, 그 애그리거트는 역할이 늘어나고 응집도가 떨어지게 된다.</p><p>이 때 도메인 서비스라는 별도의 클래스를 만들어 이러한 로직을 가지는 메서드를 정의할 수 있다.</p><p>도메인 서비스는 응용 서비스에서 사용될 수도 있고, 애그리거트에서 사용될 수도 있는데,</p><p>애그리거트의 메소드 인자로 도메인 서비스와 다른 애그리거트를 전달하는 경우는 애그리거트가 도메인 서비스를 사용하는 주체가 된다.</p><p>이 때, 응용 서비스는 도메인 서비스를 애그리거트에게 전달해줄 책임이 있다.</p><p>도메인 서비스의 메서드 인자로 여러 애그리거트를 넣어 로직을 수행하는 경우엔 응용 서비스가 도메인 서비스의 사용 주체가 된다.</p><p>도메인 서비스를 응용 서비스와 헷갈릴 수 있는데, 둘은 엄연히 다르다.</p><p>도메인 서비스는 도메인 계층에 있으며 도메인 로직을 다루는 반면, 응용 서비스는 응용 계층에 있으며 응용 로직을 다룬다.</p><p>또한, 응용 서비스는 다른 도메인 모델들을 이용하여 애플리케이션의 기능을 구현한다.</p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/08/09/ddd-basic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JPA 이해하기 (feat. ORM)</title>
      <link>http://sgc109.github.io/2020/07/26/jpa-basic/</link>
      <guid>http://sgc109.github.io/2020/07/26/jpa-basic/</guid>
      <pubDate>Sun, 26 Jul 2020 07:24:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;JPA(Java Persistence API)&lt;/code&gt; 은 자바의 표준 ORM API 이다.&lt;/p&gt;
&lt;p&gt;그렇다면 ORM 이란 무엇일까? JPA 를 제대로 이해하기 위해 우선 ORM 에 대한 이해가 필요하다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>JPA(Java Persistence API)</code> 은 자바의 표준 ORM API 이다.</p><p>그렇다면 ORM 이란 무엇일까? JPA 를 제대로 이해하기 위해 우선 ORM 에 대한 이해가 필요하다.</p><a id="more"></a><h2 id="ORM-이란">ORM 이란?</h2><p><strong>ORM</strong> 이란 <strong>Object-Relational Mapping</strong> 의 약자로, 이름 그대로 객체(Object)와 관계형 데이터(Relational data) 를 매핑하기 위한 기술이다.</p><p>이러한 매핑이 필요한 이유는 객체 지향 언어(Object Oriented Language)과 관계형 데이터베이스(Relational Database)에서 데이터를 표현 하는 방식이 다르기 때문이다.</p><p>이 둘 간의 차이 때문에 개발자는 더 많은 코드를 작성해야 하며, 이는 반복적이고 실수하기 쉬운 작업이 된다.</p><p>그렇기 때문에 개발자는 Object Oriented 한 Design 에 집중할 수 없게 된다.</p><p>ORM 은 이러한 문제를 해결해 준다.</p><h2 id="패러다임의-불일치">패러다임의 불일치</h2><p>객체 지향 프로그래밍(이하 OOP)과 관계형 데이터베이스(이하 RDB)의 데이터 표현 방식이 다른 문제를 <strong>패러다임의 불일치</strong>라고 부르기도 한다.</p><p>OOP 와 RDB 에서 데이터를 표현하는 방식이 다른 이유는 애초에 이들의 목표와 동작 방식이 다르기 때문이다.</p><p>예를 들어, RDB 에서는 데이터의 중복을 줄이고 및 일관성을 높이기 위해 하나의 데이터를 여러개의 테이블로 쪼개어 저장하고 필요할 때 조인하여 사용하게 된다.</p><p>반면, OOP 에서는 하나의 객체가 다른 객체에 대한 참조를 포함하며, 연관된 두 객체는 모두 메모리 상에 존재하기 때문에 하나의 객체로 이와 연관된 객체들의 데이터를 손쉽게 얻을 수 있다.</p><p>그럼 4가지 관점에서 OOP 와 RDB 가 데이터를 다루는 방식이 어떻게 다른지, 또 JPA 는 이를 어떻게 해결하는지 좀 더 살펴보자.</p><h3 id="상속">상속</h3><p>객체는 상속이라는 개념이 있는 반면 테이블은 상속의 개념이 없다.</p><p>예를 들어 여러 운송 수단의 리스트를 표현하기 위해 운송 수단에 대한 클래스를 다음과 같이 설계했다고 가정하자.</p><p><img src="/images/jpa-basic/object-modeling.png" alt="OOP 에서의 데이터 모델링"></p><p>그렇다면 RDB 에서는 다음과 같이 테이블을 설계해야 할 것이다.</p><p><img src="/images/jpa-basic/table-modeling.png" alt="RDB 에서의 데이터 모델링"></p><p>즉, Car 객체를 DB 에 저장하기 위해서는 Vehicle 클래스에 해당하는 데이터와 Car 에서 정의한 데이터로 나누어 2번의 INSERT 쿼리가 필요하며,</p><p>DB 에서 데이터를 가져올 때는 조인을 통해 가져온 데이터로 Car 객체를 생성해야 한다.</p><p>반면, OOP 에서는 단순히 list.add() 와 list.get() 명령어 한 번으로 원하는 데이터를 저장하고 읽을 수 있다.</p><p>JPA 는 개발자가 OOP 스타일로 Car 객체를 저장하더라도 내부적으로 2개의 쿼리를 만들어 상속 관계를 RDB 에 맞는 데이터로 변환하여 저장해준다.</p><h3 id="연관-관계">연관 관계</h3><p>학교에서 한 명의 학생이 하나의 반에 속해있는 상황을 가정해보자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> studentId;</span><br><span class="line">    String name;</span><br><span class="line">    Class clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> classId;</span><br><span class="line">    String className;</span><br><span class="line">    Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OOP 에서는 학생에 대한 객체가 반에 대한 객체를 포함한다. 정확히는 참조를 가지고 있다.</p><p>반면, RDB 에서는 참조를 가지는 것이 아니라 반에 대한 참조를 FK 로 대체하고, 반에 대한 데이터를 분리하여 따로 저장해야한다.</p><p>즉, 데이터 저장 시에 데이터를 분리하여 2개의 쿼리를 사용해야 하며, 다시 읽을 때는 조인을 통한 재조립이 필요하다.</p><p>JPA 는 이를 내부적으로 처리해주기 때문에 개발자는 OOP 스타일로 데이터를 저장하고 읽을 수 있게 된다.</p><h3 id="객체-그래프-탐색">객체 그래프 탐색</h3><p>객체 연관관계가 다음과 같은 그래프 형태를 이루고 있다고 하자.<br><img src="/images/jpa-basic/relation-graph.png" alt="연관관계 그래프"></p><p>이때 어떤 사람이 거주하는 국가를 얻기 위해 다음과 같은 코드를 작성했다고 하자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.getHouse().getCity().getCountry();</span><br></pre></td></tr></table></figure><p>이렇게 연관된 객체를 얻기 위한 행위를 <strong>객체 그래프 탐색</strong>이라고 한다.</p><p>DB 에서 person 데이터를 가져오려면 앞서 말한것 처럼 연관된 테이블과의 조인을 통해 가져와야 한다.</p><p>그리고 이때 정해진 쿼리문에 따라 탐색이 가능한 경계가 정해지게 된다. 만약 이 경계를 넘는 객체를 얻어 사용하려 하면 NPE(Null Pointer Exception)가 발생할 것이다.</p><p>문제는, 처음 프로그램을 개발할 때는 person 에서 부터 어디까지 그래프를 탐색해야 하는지 알 수 없다는 것이다.</p><p>물론 넉넉하게 모든 연관된 테이블을 조인하여 데이터를 가져올 수도 있을 것이다. 하지만 불필요하게 많은 테이블을 조인하여 모든 데이터를 가져오는 것은 좋은 방법이 아닐 것이다.</p><p>JPA 는 <strong>지연 로딩</strong>을 사용하여 이 문제를 해결한다. 그때 그때 연관된 데이터가 필요할 때 데이터를 로딩하는 것이다.</p><h3 id="비교">비교</h3><p>RDB 에서는 데이터를 PK 값으로 식별하기 때문에 같은 id 를 가진 데이터는 당연히 같은 데이터로 취급된다.</p><p>반면, OOP 에서 두 객체 간의 동일성 비교는 '==' 연산자를 사용한다. 즉, 두 객체가 같은 참조를 가지고 있는지를 보는것이다.</p><p>그런데 다음과 같이 DB 에서 가져온 객체의 동등성을 비교하는 경우를 보자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student1 = studentDAO.getStudent(studentId);</span><br><span class="line">Student student2 = studentDAO.getStudent(studentId);</span><br><span class="line"><span class="keyword">assert</span> student1 == student2;</span><br></pre></td></tr></table></figure><p>일반적으로 DAO 는 매번 새로운 인스턴스를 만들어 반환하도록 구현되기 때문에 두 객체의 동일성을 비교하면 물론 다르다는 결과가 나올 것이다.</p><p>JPA 에서는 동일한 키 값으로 데이터를 요청하면 같은 인스턴스를 반환하기 때문에 이런 문제가 발생하지 않는다.</p><p>그럼 이제 JPA 에 대해 자세히 알아보자.</p><h2 id="JPA-란">JPA 란?</h2><p><strong>JPA</strong> 는 <strong>Java Persistence API</strong> 의 약자로 자바 진영에서 만든 표준 ORM API 이다.<br>(<a href="https://github.com/eclipse-ee4j/jpa-api/issues/212">참고로 2019년에 Jakarta Persistence 로 이름이 바뀌었다</a>)</p><p>JPA 는 캐싱, 지연 로딩, 쓰기 지연 등을 통한 성능을 향상시켜 주고, 변경 감지, 동일성 보장 등을 통해 개발 편의성을 향상시켜 준다.</p><p>다음은 JPA 의 동작 방식에 대해 알아보자.</p><h2 id="JPA-의-동작-방식">JPA 의 동작 방식</h2><p>JPA 에서는 저장하고자 하는 데이터를 엔티티라고 부르는데, 우선 JPA 에서 엔티티를 DB 에 저장하는 샘플 코드를 보자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EntityManagerFactory emf = Persistence.createEntityManagerFactory(<span class="string">"persistence-unit"</span>);</span><br><span class="line">EntityManager em = emf.createEntityManager();</span><br><span class="line"></span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    tx.begin();</span><br><span class="line">    </span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setName(<span class="string">"홍길동"</span>);</span><br><span class="line">    em.persist(student);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    tx.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emf.close();</span><br></pre></td></tr></table></figure><p>Persistence 클래스의 createEntityManagerFactory() 메소드로 <strong>엔티티 매니저 팩토리(Entity Manager Factory)</strong> 를 생성하는데, 이때 DB 의 커넥션 풀도 함께 생성된다.</p><p>그렇기 때문에 팩토리를 생성하는 일은 비용이 많이 들며, 보통 하나만 만들어 애플리케이션 전체에서 공유한다.</p><p>EntityManagerFactory 의 createEntityManager() 메소드로 <strong>엔티티 매니저(Entity Manager)</strong> 를 생성할 수 있는데, 이 엔티티 매니저는 가상의 DB 와 같은 역할을 한다고 보면된다.</p><p>우리는 엔티티와 관련된 일을 할 때 이 엔티티 매니저와 상호작용하게 된다. 엔티티를 생성하는 비용은 거의 없으며 각 엔티티 매니저는 필요할 때 커넥션 풀에서 커넥션을 얻어 사용한다.</p><p>Entity Manager 를 생성할 때는 <strong>영속성 컨텍스트(Persistence Context)</strong> 가 같이 생성되는데, 이 영속성 컨텍스트를 이해하는 것이 중요하다.</p><p>기본적으로 하나의 엔티티 매니저에는 하나의 영속성 컨텍스트가 할당되지만 서로 다른 엔티티 매니저가 하나의 영속성 컨텍스를 사용할 수도 있다.</p><p>엔티티와 관련된 동작을 수행할 땐 트랜잭션 사이에 수행되어야 한다.</p><p>그럼 엔티티를 저장, 조회, 수정, 삭제할 때 내부 동작 원리를 알아보자.</p><h3 id="엔티티의-저장">엔티티의 저장</h3><p>엔티티는 생명주기를 갖는다. 엔티티에는 영속(Managed), 준영속(Detached), 비영속(Transient), 삭제(Removed) 이렇게 4가지 상태가 있으며,</p><p>엔티티 매니저의 특정 메소드가 호출되거나 JPQL 이 실행되면 상태가 변한다.</p><p><img src="/images/jpa-basic/entity-lifecycle.png" alt="엔티티의 생명주기"></p><p>entityManager.persist(entity) 의 형태로 엔티티를 저장하면 엔티티는 비영속(Transient) 상태에서 영속(Managed) 상태가 되며 영속성 컨텍스트 내에서는 다음과 같은 일이 일어난다.</p><p><img src="/images/jpa-basic/entity-save.png" alt="persist() 수행시 내부 동작 과정"></p><ol><li>엔티티 매니저의 persist() 메소드를 통해 엔티티가 영속성 컨텍스트에 들어온다.</li><li>엔티티가 영속성 컨텍스트의 1치 캐시에 저장되면서 초기 상태의 스냅샷이 따로 보관된다.</li><li>엔티티를 DB 에 저장하기 위한 쿼리가 자동 생성되어 쓰기 지연 SQL 저장소에 저장된다.</li><li>트랜잭션을 커밋하면 내부적으로 먼저 flush() 를 수행하는데, 이는 쓰기 지연 SQL 저장소에 저장된 쿼리들을 DB 에 보내 수행하게 함으로써 영속성 컨텍스트와 DB 의 상태의 동기화를 위한 것이다.</li><li>트랜잭션을 커밋한다.</li></ol><h3 id="엔티티의-조회">엔티티의 조회</h3><p>엔티티 매니저의 find() 메소드로 엔티티를 DB 에서 읽을 수 있다. 하지만 곧바로 DB 에서 데이터를 찾는 것이 아니라 먼저 1차 캐시를 살펴본다.</p><p>1차 캐시에 해당 엔티티가 있으면 곧바로 이를 반환하고, 만약 없다면 DB 에서 데이터를 다져와 1차 캐시에 저장한 뒤 반환한다.</p><p>엔티티를 조회하는 다른 방법으로는 <strong>JPQL(Java Persistence Query Language)</strong> 이 있다.</p><p>JPQL 은 SQL 과는 달리 자바 객체에 대한 쿼리를 정의한다. 그래서 JPQL 은 SQL 에 대해서는 전혀 모른다.</p><p>JPQL 을 실행하기 전에 자동으로 flush() 를 수행하고 JPQL 을 실행하는데, 그 이유는</p><p>쓰기 지연 SQL 저장소에 있는 쿼리를 DB 와 동기화해야 정상적인 결과가 나올 것이기 때문이다.</p><h3 id="엔티티의-수정">엔티티의 수정</h3><p>저장과 삭제와는 달리 수정을 위한 메소드가 따로 존재하지 않는다.</p><p>수정을 위해서는 엔티티 매니저의 메소드를 호출할 필요 없이 영속 상태의 엔티티 객체를 수정하기만 하면된다.</p><p>어떻게 엔티티 객체를 수정했을 뿐인데 DB 에 이 사실이 반영되는 것일까?</p><p>그것은 바로 영속성 컨텍스트 내부에서 <strong>변경 감지(dirty checking)</strong> 라는 것을 하기 때문이다.</p><p>엔티티 매니저의 flush() 메소드가 실행되면 엔티티가 처음 persist 될 때 저장된 스냅샷과 현재 상태를 비교하여 상태가 달라졌으면 쓰기 지연 SQL 저장소에 업데이트 쿼리를 저장한다.</p><p>그렇기 때문에 변경 사항이 DB 에 반영되는 것이다.</p><p>만약 엔티티를 영속성 컨텍스트에 의해 관리되지 않는 준영속 상태로 만들고 싶다면 엔티티 매니저의 detach() 메소드 인자로 엔티티를 넘겨주거나, clear() 메소드를 통해 영속성 컨텍스트의 내용을 모두 지우거나, 또는 close() 메소드를 통해 엔티티 매니저를 종료시키면 된다. 엔티티 매니저를 종료시키면 영속성 컨텍스트는 소멸한다.</p><p>준영속 상태의 엔티티는 1차 캐시에 존재하지 않으므로 수정해도 DB 에는 이것이 반영되지 않는다.</p><p>다시 영속 상태로 만들고 싶다면 merge() 메소드 인자로 엔티티를 넘겨주면 된다.</p><p>merge() 메소드가 실행되면 엔티티를 1차 캐시에서 찾고, 만약 있다면 메소드 인자로 넘어온 값을 복사 한뒤 1차 캐시에 있는 엔티티를 반환한다.</p><p>만약 1차 캐시에 없다면 DB 에서 값을 읽어 1차 캐시에 저장하고 동일한 동작을 수행한다.</p><p>근데 여기서 만약 DB 에 해당 데이터가 없는 경우가 있다. 이런 경우 merge() 메소드는 사실상 persist() 메소드와 동일하게 동작한다. 즉, merge() 메소드는 엔티티의 상태가 준영속이건 비영속이건 상관없이 사용할 수 있어, 엔티티의 생성과 수정 모두에 사용될 수 있다.</p><h3 id="엔티티의-삭제">엔티티의 삭제</h3><p>엔티티 매니저의 remove() 메소드 인자로 삭제하고자 하는 엔티티를 넘겨주어 삭제할 수 있다.</p><p>엔티티의 저장하거나 수정할 때와 마찬가지로, 삭제 쿼리를 쓰기 지연 SQL 저장소에 저장했다가 flush 시에 실제로 DB 에서 삭제된다.</p><p>참고1: <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">https://en.wikipedia.org/wiki/Object-relational_mapping</a><br>참고2: <a href="http://acornpub.co.kr/book/jpa-programmig">자바 ORM 표준 JPA 프로그래밍</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/26/jpa-basic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Redis 의 RESP 프로토콜</title>
      <link>http://sgc109.github.io/2020/07/22/redis-resp-protocol/</link>
      <guid>http://sgc109.github.io/2020/07/22/redis-resp-protocol/</guid>
      <pubDate>Wed, 22 Jul 2020 13:09:14 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt; 클라이언트는 Redis 서버에(보통 6379번 포트) TCP 커넥션을 맺어 통신을 하는데 &lt;code&gt;RESP&lt;/code&gt; 라는 프로토콜을 사용하여 통신을 한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Redis</strong> 클라이언트는 Redis 서버에(보통 6379번 포트) TCP 커넥션을 맺어 통신을 하는데 <code>RESP</code> 라는 프로토콜을 사용하여 통신을 한다.</p><a id="more"></a><h2 id="RESP-란">RESP 란?</h2><p><code>RESP(REdis Serialization Protocol)</code> 는 Redis 클라이언트가 Redis 서버와 통신할 때 사용하는 프로토콜이다.</p><p>RESP 는 Redis 1.2 버전에서 처음 소개되어 2.0 버전부터는 Redis 클라이언트가 구현해야만하는 표준 프로토콜이 되었다.</p><p>(참고로 RESP 는 Redis 의 client-server 통신에만 사용되며, Redis Cluster 에서 노드간의 통신은 RESP 가 아닌 binary protocol 을<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 사용한다.)</p><p>RESP 는 꼭 Redis 가 아니더라도 <em>Client-Server</em> 방식으로 통신한다면 어디에서든 사용될 수 있는 프로토콜이다.</p><p>꼭 TCP 에서 사용되어야 하는 것도 아니지만 Redis 에서는 TCP 로만 사용한다.</p><p>RESP 는 다음 3가지 요소를 중점적으로 여기며 고안되었다.</p><ul><li>쉬운 구현</li><li>빠른 파싱</li><li>사람이 읽을 수 있어야 함</li></ul><p>위와 같은 장점에 더해, Redis 문서에 따르면 성능 또한 binary protocol 과 비슷한 수준이라고 한다.</p><h2 id="Request-Response-모델">Request-Response 모델</h2><p>Redis 는 기본적으로 다음의 2가지 경우를 제외하곤 <strong>Request-Response</strong> 모델을 사용한다.</p><ul><li>Pipelining<ul><li>여러개의 명령어(Command) 를 한 번에 보내고 모든 답장이 올 때까지 기다린다.</li></ul></li><li>Pub/Sub<ul><li>어떤 Client 가 특정 channel 을 subscribe 하면 <em>push protocol</em> 로 전환되어 더이상 명령어를 보내지 않게 된다.</li></ul></li></ul><p>Redis 의 Request-Response 프로토콜은 다음과 같이 동작한다.</p><ul><li>클라이언트가 Bulk String 의 Array 타입으로 명령어를 서버로 전송한다.</li><li>서버는 클라이언트가 보낸 명령어에 맞는 타입으로 응답들을 보낸다.</li></ul><h2 id="RESP-의-Data-Types">RESP 의 Data Types</h2><p>RESP 에는 5가지의 데이터 타입이 존재한다.</p><ul><li><strong>Simple Strings</strong></li><li><strong>Erros</strong></li><li><strong>Integers</strong></li><li><strong>Bulk Strings</strong></li><li><strong>Arrays</strong></li></ul><p>서버와 클라이언트가 주고받는 메시지 내 데이터의 타입은 위 5가지 중 하나이다.</p><p>데이터의 타입은 데이터의 첫번째 바이트를 통해 구분한다. 각 타입들의 첫번째 문자는 다음과 같다.</p><ul><li>Simple Strings 는 &quot;<b>+</b>&quot;</li><li>Erros 는 &quot;<b>-</b>&quot;</li><li>Integers 는 &quot;<b>:</b>&quot;</li><li>Bulk Strings 는 &quot;<b>$</b>&quot;</li><li>Arrays 는 &quot;<b>*</b>&quot;</li></ul><p>RESP 를 통해 오고가는 Request 와 Response는 항상 &quot;\r\n&quot; 로 끝난다.</p><p>그럼 각각의 타입에 대해 자세히 알아보자.</p><h3 id="Simple-Strings">Simple Strings</h3><p>Simple Strings 타입은 binary-safe<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> 하지 않은 일반 문자열을 전송할 때 사용하는 데이터 타입이다.</p><p>(binary-safe 한 문자열을 전송하기 위해서는 이후 설명할 <em>Bulk Strings</em> 타입으로 전송해야 한다.)</p><p>앞서 설명한 것처럼 첫번째 바이트는 &quot;+&quot; 다. 뒤이어 문자열이 나오고 &quot;\r\n&quot; 으로 끝난다.</p><p>참고로 문자열은 Newline 을 포함할 수 없다. 다음은 Simple Strings 타입을 전송한 예다.</p><blockquote><p>&quot;+OK\r\n&quot;</p></blockquote><h3 id="Errors">Errors</h3><p>Errors 타입은 이름대로 에러 정보에 대한 타입이며, &quot;-&quot; 문자로 시작한다.</p><p>강제는 아니지만 관습적으로 <code>&quot;-ERRORTYPE Description for the error&quot;</code> 와 같은 형태로 먼저 에러의 이름을 쓰고</p><p>한 칸 띄운 뒤에 에러 발생 원인과 같은 더 자세한 설명을 적는다.</p><p>클라이언트에서 이러한 타입의 데이터를 받으면, 에러 타입에 맞는 예외를 발생시키거나 false 를 반환하는 식으로 구현할 수 있겠다.</p><p>다음은 Errors 타입 데이터를 전송한 예이다.</p><blockquote><p>&quot;-ERR unknown command 'foobar'\r\n&quot;<br>&quot;-WRONGTYPE Operation against a key holding the wrong kind of value\r\n&quot;</p></blockquote><h3 id="Integers">Integers</h3><p>정수 형태의 데이터이며, &quot;:&quot; 문자로 시작한다.</p><p>또한, 숫자의 크기는 signed 64 bit 범위 내여야 한다.</p><p>대표적으로, <a href="https://redis.io/commands/incr">INCR</a>, <a href="https://redis.io/commands/llen">LLEN</a>, <a href="https://redis.io/commands/lastsave">LASTSAVE</a> 와 같은 명령어에 대한 응답으로 오는 데이터의 타입이 이 Integers 타입이다.</p><p>일부 명령어(<a href="https://redis.io/commands/exists">EXISTS</a> 등) 에서는 true/false 의 의미로 이 Integers 타입의 1/0 을 쓰기도 한다.</p><h3 id="Bulk-Strings">Bulk Strings</h3><p>binary-safe 한 문자열을 나타낼 때 사용하는 타입이며, &quot;$&quot; 로 시작한다.</p><p>&quot;$&quot; 에 이어 문자열의 길이가 주어지고, 그 다음 &quot;\r\n&quot;, 그리고 실제 문자열이 등장한다.</p><p>즉, <code>&quot;$문자열길이\r\n문자열\r\n&quot;</code> 의 형태를 가진다. (e.g. <code>&quot;$6\r\nfoobar\r\n&quot;</code>)</p><p>빈 문자열을 나타낼 때는 <code>&quot;$0\r\n\r\n&quot;</code> 를 사용한다.</p><p>주의해야 할 점은, null 값을 나타낼 때는 <code>&quot;$-1\r\n&quot;</code> 를 사용한다는 것이다. 이것을 <strong>Null Bulk String</strong> 이라고 부른다.</p><p>만약 Redis 서버에서 Null Bulk String 을 받았다면 클라이언트에서는, 예를 들어 C 라이브러리라면 <em>NULL</em> 을 반환해야하하고, Ruby 라이브러리라면 <em>nil</em> 을 반환해야 할 것이다.</p><h3 id="Arrays">Arrays</h3><p><strong>Arrays</strong> 는 첫번째 byte 로 &quot;*&quot; 를 가지며, 이어서 10진수로 배열의 크기와 &quot;\r\n&quot; 이 나온다.<br>또한, 배열 내 원소는 각각 특정한 타입을 가질 수가 있으며, 그 타입은 모두 달라도 된다.</p><p>예를 들어 1 이라는 Integer, &quot;2&quot; 라는 Simple String, 그리고 &quot;bulk&quot; 라는 Bulk String 을 가지는 Arrays 타입의 Response 는 다음과 같은 형태를 띈다.</p><blockquote><p>&quot;*3\r\n:1\r\n+2\r\n$4\r\nbulk\r\n&quot;</p></blockquote><p>Null Array 의 경우에는 사이즈가 0인 Array 와 구분하기 위해 다음과 같이 표시한다.</p><blockquote><p>&quot;*-1\r\n&quot;</p></blockquote><p>예를 들어 <code>BLPOP</code> command 가 timeout 이 났을 때 위와 같은 응답을 줄 수 있다.<br>클라이언트는 서버로부터 Null Array 를 받으면 빈 배열이 아닌, null object 를 반환해야 한다.</p><p>중첩된 형태, 즉 Arrays 의 Arrays 도 가능하다.<br>다음은 2개의 배열로 이루어진 배열이다. 편의상 알아보기 좋게 따옴표를 빼고 줄바꿈을 하였다.</p><blockquote><p>*2\r\n<br>*3\r\n<br>:1\r\n<br>:2\r\n<br>:3\r\n<br>*2\r\n<br>+Foo\r\n<br>-Bar\r\n</p></blockquote><h2 id="Redis-서버에-Command-보낼-때">Redis 서버에 Command 보낼 때</h2><p>맨 처음에 Redis 클라이언트가 서버에 명령어를 보낼 때 Bulk String 의 Array 타입으로 전송한다고 했다.</p><p>만약 Redis 서버에 저장된 mylist 라는 List 데이터의 길이를 알고자 한다면 <code>LLEN mylist</code> 명령어를 사용할 것이다.</p><p>그리고 서버는 이에 대한 응답으로 리스트의 길이를 반환할 것이다.</p><p>이때 실제로 Client 와 Server 간에 오고간 데이터를 뜯어보면 다음과 같을 것이다. (편의상 줄을 바꿈)</p><ul><li>Client</li></ul><blockquote><p>*2\r\n<br>$4\r\n<br>LLEN\r\n<br>$6\r\n<br>mylist\r\n</p></blockquote><ul><li>Server</li></ul><blockquote><p>:48293\r\n</p></blockquote><p>참고: <a href="https://redis.io/topics/protocol#resp-simple-strings">https://redis.io/topics/protocol#resp-simple-strings</a></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>binary protocol 는 전송하고자 하는 데이터를 human readable 한 방식으로 인코딩하는 text protocol 과는 반대되는 개념이다. Text protocol 의 대표적인 예인 HTTP 는 &quot;200 OK&quot; 라는 상태 코드의 200 이라는 값을 나타낼 때 '2', '0', '0' 이라는 문자를 사용한다. 하지만 만약 200 을 binary protocol 로 전송한다면 단지 200을 binary 로 나타낸 값을 전송할 것이다. 그렇기 때문에 binary protocol 이 좀 더 compact 한 형태라는 것을 알 수 있다. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>문자열이 binary-safe 하다는 말은 문자열 내에 그 어떤 문자가 등장하더라도 문자열의 일부로 인식된다는 뜻이다. 예를 들어, C 에서 문자열 중간에 널 문자가 있다면 이를 문자열의 일부로 여기는 것이 아니라 널 문자 이후의 문자열을 무시하게 되는데, 이는 binary-safe 하지 않은 문자열의 예시이다. Redis 의 Bulk Strings 타입은 binary-safe 하다. 맨 앞에 문자열의 길이가 주어지는데, 그 길이 만큼은 어떠한 문자가 등장하더라도 문자열의 일부로 인식하기 때문이다. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/22/redis-resp-protocol/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[책 리뷰] Head First Design Patterns</title>
      <link>http://sgc109.github.io/2020/07/19/head-first-design-patterns/</link>
      <guid>http://sgc109.github.io/2020/07/19/head-first-design-patterns/</guid>
      <pubDate>Sat, 18 Jul 2020 16:22:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;헤드 퍼스트 디자인 패턴(Head First Design Patterns)&lt;/code&gt; 이라는 책을 읽어보았다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>헤드 퍼스트 디자인 패턴(Head First Design Patterns)</code> 이라는 책을 읽어보았다.</p><a id="more"></a><h2 id="GoF-1994-vs-Head-First-2004">GoF (1994) vs Head First (2004)</h2><img src="/images/head-first-design-patterns/GoF.jpg" alt="GoF의 디자인 패턴" style="width:400px;"/><br><p><img src="/images/head-first-design-patterns/head-first-design-pattern.jpg" alt="Head First Design Pattern"><br>디자인 패턴과 관련된 가장 유명한 책을 2권 뽑는다면 한 권은 1994년에 발간된 <strong>Design Patterns: Elements of Reusable Object-Oriented Software</strong>(번역본 제목으로는 <strong>GoF의 디자인 패턴</strong>) 이고,</p><p>나머지 한 권은 2004년에 발간된 <strong>Head First Design Patterns</strong> 일 것이다.</p><p>GoF 디자인 패턴은 최초로 디자인 패턴을 정리한 책이고 매우 다양한 패턴을 카탈로그 형식으로 정리했다는 점에서 유명하지만, 워낙 오래된 책이라 요즘에는 잘 쓰이지 않거나 조금 변형된 패턴들도 수록되어 있다고 알고있다.</p><p>반면, Head First 는 가장 자주 쓰이는 디자인 패턴들 위주로 집중적으로 설명하고 있다.</p><p>게다가 구어체를 사용하고 있으며, 각 패턴을 설명하기 위해 설정된 스토리가 너무 적절하여 매우 이해하기가 쉽다.</p><p>또한, 보통 디자인 패턴과 관련된 설명들은 가끔 너무 추상적이라 초보자에게는 이해가 간듯 안 간듯 할 때가 있는데,</p><p>이 책은 질의응답 코너가 있어서 사소할 수도 있는 질문들을 자문 자답하며 많은 궁금증을 해결 해주어 머릿속 개념이 선명해지는 것을 느꼈다.</p><h2 id="디자인-패턴을-알아야-하는-이유">디자인 패턴을 알아야 하는 이유</h2><p>보통 소프트웨어를 유지 및 보수하는 데는 소프트웨어를 개발하는 만큼의, 혹은 더 많은 양의 비용과 노력이 들기 때문에 확장성, 혹은 유지 보수성은 매우 중요하다.</p><p>디자인 패턴을 잘 활용하면 확장성있는 유연한 소프트웨어를 작성하는데 도움이 된다.</p><p>또한, 디자인 패턴을 알면 다른 개발자와 소프트웨어의 설계에 대해 이야기 할 때 장황한 설명 없이 특정 패턴의 이름을 말하는 것만으로도</p><p>어떤 구조를 말하는 건지 의도를 빠르고 명확하게 전달할 수 있다는 점에서 커뮤니케이션 실수를 줄이고 생산성을 높이는데 큰 도움이 된다.</p><p>게다가 이미 존재하는 수많은 복잡한 시스템이나 프레임 워크, 혹은 API 들은 대부분 디자인 패턴을 활용하여 작성 되었다.</p><p>그렇기 때문에 디자인 패턴을 알면 소스 코드를 조금만 훑어봐도 어떤 패턴을 사용하여 구현된건지 금방 눈치 챌 수 있어 큰 그림을 이해하는데 도움이 된다.</p><p>그럼 이 책의 구성과 내용을 간략하게 알아보자.</p><h2 id="책의-구성-및-내용">책의 구성 및 내용</h2><p>이 책은 자주 쓰이는 디자인 패턴 15가지에 대해 구체적으로 설명하는데, 이 15가지 패턴은 다음과 같다.</p><ul><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/01-Strategy-Pattern">Strategy 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/02-Observer-Pattern">Observer 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/03-Decorator-Pattern">Decorator 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/04-Factory-Pattern">Factory Method 패턴 &amp; Abstract Factory 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/05-Singleton-Pattern">Singleton 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/06-Command-Pattern">Command 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/07-Adapter-and-Facade-Patterns">Adapter 패턴 &amp; Facade 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/08-Template-Method-Pattern">Template Method 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/09-Iterator-and-Composite-Patterns">Iterator 패턴 &amp; Composite 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/10-State-Pattern">State 패턴</a></li><li><a href="https://github.com/sgc109/design-pattern-study/tree/master/11-Proxy-Pattern">Proxy 패턴</a></li><li><a href="/2020/07/18/compound-pattern-feat-mvc/">Compound 패턴</a></li></ul><p>부록에서는 상대적으로는 덜 쓰이지만 유명한 패턴 9가지에 대해 간략히 소개한다.</p><p>9가지 패턴은 다음과 같다.</p><ul><li>Bridge 패턴</li><li>Builder 패턴</li><li>Chain of Responsibility 패턴</li><li>Flyweight 패턴</li><li>Interpreter 패턴</li><li>Mediator 패턴</li><li>Memento 패턴</li><li>Prototype 패턴</li><li>Visitor 패턴</li></ul><h2 id="이-책의-좋은점">이 책의 좋은점</h2><p>이 책은 단순히 여러 디자인 패턴들에 대한 설명만 하는 것이 아니라, 객체지향의 원칙들에 대해 설명하면서</p><p>어떤 설계가 좋고, 왜 좋은지 설명해준다. 또한 비슷한 디자인 패턴들을 비교하며 공통점과 차이점에 대해 명확히하며</p><p>자칫하면 헷갈릴 수도 있고, 의문이 드는 점들을 잘 해결해준다.</p><p>게다가 디자인 패턴이 만능이 아니며, 법칙이 아니라 도구에 불과하다는 조언도 담겨있다.</p><p>초보자가 저지르기 쉬운 실수는, 무리하게 디자인 패턴을 사용해서 불필요하게 프로그램의 복잡도를 높이는 것이다.</p><p>지금 당장 변경되거나 확장될 여지가 별로 없다면 디자인 패턴을 사용하지 않는 것이 더 좋다.</p><p>그리고 굳이 디자인 패턴을 사용하지 않고 단순히 객체 지향 원칙을 적용하는 것만으로도 해결할 수 있는 문제의 경우에도 디자인 패턴을 사용하지 않는 편이 좋다.</p><p>이런 내용까지 폭넓게 다루기 때문에 책을 모두 읽었을 때 개발자로서 조금은 성장한 듯한 느낌을 받을 수 있다고 생각한다.</p><h2 id="결론">결론</h2><p>누구든 만약 객체지향 프로그래밍에 대해서 잘 알고 싶다면, 게다가 아직 디자인 패턴을 공부한 적이 없는 사람이라면 개인적으로 꼭 읽어봤으면 하는 책이다.</p><p>특히 대학생, 혹은 신입 개발자가 있다면 정말 강력하게 추천하고 싶은 책이다.</p><p>참고1: <a href="https://github.com/sgc109/design-pattern-study">https://github.com/sgc109/design-pattern-study</a><br>참고2: <a href="https://sgc109.github.io/2020/07/18/compound-pattern-feat-mvc/">https://sgc109.github.io/2020/07/18/compound-pattern-feat-mvc/</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/19/head-first-design-patterns/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Compound 패턴 (feat. MVC 패턴)</title>
      <link>http://sgc109.github.io/2020/07/18/compound-pattern-feat-mvc/</link>
      <guid>http://sgc109.github.io/2020/07/18/compound-pattern-feat-mvc/</guid>
      <pubDate>Sat, 18 Jul 2020 08:08:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;Compound&lt;/code&gt; 를 사전에서 찾아보면 &lt;code&gt;복합체, 혼합물&lt;/code&gt; 등의 뜻이 나온다.&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;strong&gt;Compound 패턴&lt;/strong&gt;은 무엇일까?&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>Compound</code> 를 사전에서 찾아보면 <code>복합체, 혼합물</code> 등의 뜻이 나온다.</p><p>그렇다면 <strong>Compound 패턴</strong>은 무엇일까?</p><a id="more"></a><h2 id="Compound-패턴이란">Compound 패턴이란?</h2><p><strong>컴파운드(Compound) 패턴</strong>은 이름 그대로 여러 디자인 패턴이 혼합된 디자인 패턴을 말한다.</p><p>하지만 단순히 여러 패턴이 사용되었다고 해서 컴파운드 패턴인 것은 아니다.</p><p>여러 패턴이 사용되는 동시에 일반적인 문제를 해결하는데 반복적으로 사용될 수 있어야 한다.</p><p>Compound Pattern 의 대표적인 예가 바로 그 유명한 <em><strong>MVC Pattern</strong></em> 이다.</p><h2 id="MVC-패턴이란">MVC 패턴이란?</h2><p><img src="/images/compound-pattern-feat-mvc/mvc-diagram.png" alt="MVC 패턴의 상호작용"></p><p><strong>MVC</strong> 는 <em>Model-View-Controller</em> 의 약자로서, 역할에 따라 3개의 컴포넌트로 분리하고</p><p>여러 디자인 패턴을 적용하여 재사용성을 높인 대표적인 컴파운드 패턴의 예다.</p><p>그렇다면 MVC 패턴에서 사용된다는 여러 디자인 패턴은 대체 무엇일까?</p><p>전통적인 MVC 패턴에서는 다음 3가지 패턴이 사용된다.</p><ul><li><strong>옵저버(Observer) 패턴</strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><ul><li>Model 의 상태가 변경 되었을 때 Controller, 혹은 View 에게 이 사실을 알리는데 사용된다.</li></ul></li><li><strong>컴포지트(Composite) 패턴</strong><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup><ul><li>View 를 구성하는 컴포넌트들은 계층 구조를 이룬다. (e.g. Java Swing 의 JFrame/JLabel 등, Android 의 View/ViewGroup, HTML 의 DOM)</li></ul></li><li><strong>스트래티지(Strategy) 패턴</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><ul><li>Controller 의 핵심 기능을 인터페이스로 분리하여 View 가 이 인터페이스를 통해 Controller 를 구성(Composition) 한다. 그렇기 때문에 View 는 Controller 를 갈아 끼우며 기능을 변경할 수 있다.</li></ul></li></ul><p>또한, 필요에 따라 <strong>어댑터(Adapter) 패턴</strong><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> 을 함께 사용할 수도 있다.</p><p>MVC 패턴은 사용되는 곳에 따라(모바일, 웹 등) 여러 프레임워크에서 다양한 형태로 변형되어 적용되곤 한다.</p><p>하지만 이번 섹션에서는 변형되지 않은 전통적인 MVC 패턴에 대해 알아보고, 이어지는 섹션에서 웹 버전의 MVC 인 JSP Model 2 에 대해 알아본다.</p><p>그렇다면 전통적인 MVC 의 3가지 컴포넌트에 대해 알아보자.</p><h3 id="모델-Model">모델(Model)</h3><p><strong>Model</strong> 은 <strong>애플리케이션의 핵심 로직과 데이터를 가지고 있는 컴포넌트</strong>다.</p><p>Controller 가 Model 에게 상태 변경을 요청하면 Model 은 일련의 과정을 거쳐 자신의 상태를 변경하게 되고</p><p>상태 변경이 완료되면 이를 Controller 와 View 에게 알린다.</p><p>그런데 Model 의 한가지 큰 특징은 Controller 와 View 에 대해 알지 못한다는 것이다.</p><p>이게 가능한 이유는 위에서 언급한 것처럼 Observer 패턴을 사용하기 때문인데</p><p>조금 설명을 하자면, Controller 와 View 는 Observer 라는 인터페이스를 구현하고</p><p>이 타입을 통해 Model 을 subscribe 하므로 Model 입장에서 이들은</p><p>단순히 모두 똑같은 Observer 일 뿐이지 각 Observer 가 실제로 어떤 객체인지는 알 필요가 없다.</p><p>클래스 다이어그램을 그려보면 다음과 같다</p><p><img src="/images/compound-pattern-feat-mvc/mvc-class-diagram.png" alt="MVC 패턴의 클래스 다이어그램"></p><p>이를 통해 Controller 와 View 에 대한 Model 의 결합(Coupling)을 느슨하게 하고, 이들의 재사용성을 높이게 된다.</p><p>참고로, 전혀 다른 비즈니스 로직을 가지는 Model 에 <em>Adapter 패턴</em>을 활용하여 기존의 View 와 Controller 를 그대로 재사용할 수도 있다.</p><h3 id="뷰-View">뷰(View)</h3><p><strong>View</strong> 는 <strong>사용자와의 상호작용을 담당</strong>하며, 크게 2가지 역할을 수행한다.</p><p><strong>첫째</strong>는 <strong>사용자에게 화면을 보여주는 것</strong>이다. GUI 환경이라면 버튼이나 체크박스 등이 될 수 있고, CLI 환경이라면 텍스트가 될 것이다.</p><p>Model 로 부터 자신의 상태가 변경 되었다는 알림을 받을 때마다 Model 에게 데이터를 받아, 이를 기반으로 화면을 업데이트한다.</p><p>Model 의 데이터를 기반으로 변경하는 것 뿐만 아니라, 단순히 Controller 요청에 따라 화면을 변경하기도 한다.</p><p><strong>둘째</strong>는 <strong>사용자의 입력 이벤트를 받는 것</strong>이다. 정확히는 사용자의 이벤트를 받아 Controller 에게 전달한다.</p><h3 id="컨트롤러-Controller">컨트롤러(Controller)</h3><p><strong>Controller</strong> 는 <strong>View 와 Model 사이의 중재자</strong>이다.</p><p>Controller 는 View 로 부터 사용자의 입력 이벤트를 받으면 다시 View 에게 화면 업데이트를 요청할 수도 있고</p><p>Model 에게 상태 변경을 요청할 수도 있다. 위에서 말한 것처럼 Model 은 상태 변경이 완료되면 Observer 패턴을 통해 Controller 와 View 에게 이를 알린다.</p><h2 id="JSP-Model-2-란">JSP Model 2 란?</h2><p><img src="/images/compound-pattern-feat-mvc/model2.png" alt="JSP Model 2 의 구조 (출처: https://en.wikipedia.org/wiki/JSP_model_2_architecture)"></p><p><strong>JSP Model 2</strong><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> 란 MVC 패턴을 웹 애플리케이션에 맞는 형태로 적용시킨 것이다.</p><p>즉, Spring 과 같은 Web Framework 에서 사용하는 MVC 패턴은 JSP 를 사용하지 않는다고 하더라도</p><p>사실상 전통적인 MVC 패턴 보다는 이 JSP Model 2 에 해당한다고 할 수 있다.</p><p>(좀 더 구체적으로 말하자면, Spring MVC 에서 사용하는 패턴은 Servlet(<code>DispatcherServlet</code>)에서 HTTP 요청을 처리하는 것을 제외한 Controller 로직을 분리한 구조로, <strong>Front Controller 패턴</strong><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> 이라고 부른다.)</p><p>사실 <strong>JSP Model 1</strong><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> 도 있는데 Model 1 에서는 View 와 Controller 의 역할이 분리되지 않고 하나의 컴포넌트에서 담당하는 모양을 하고있다.</p><p>Model 2 의 등장으로 웹 애플리케이션 개발 단위는 View 에 해당하는 JSP pages 와 Controller 에 해당하는 Servlet 이 완벽하게 분리되었기 때문에 HTML 과 약간의 JSP 에 대한 지식을 가진 웹 퍼블리셔와 전문적인 소프트웨어 지식을 가진 개발자의 역할을 분리하여 생산성을 높이는데 기여했다.</p><p>그럼 Model 2 에서는 MVC 의 각각의 컴포넌트가 전통적인 MVC 와 어떻게 다른지 알아보자</p><h3 id="Java-Bean-Model">Java Bean (Model)</h3><p>Model 2 에서의 Model 이 전통적인 MVC 에서의 Model 과 가장 큰 차이점은</p><p>Model 2 에서는 View 로 부터 사용자의 입력 이벤트가 들어올 때, 네트워크(HTTP)를 통해 들어온다는 것이다.</p><p>그렇기 때문에 Model 의 상태 변경이 완료되었을 때 View 에게 이를 알리지 않는다.</p><p>단지 Controller 의 요청이 있을 때만 Model 이 <strong>Java Bean</strong> 으로서 Controller 를 통해 View 에게 전달될 뿐이다.</p><h3 id="JSP-View">JSP (View)</h3><p>Controller 를 통해 Model 로 부터 전달받은 Java Bean 내 데이터를 기반으로 화면을 구성한다.</p><h3 id="Servlet-Controller">Servlet (Controller)</h3><p>HTTP 요청에 따라 Model 에 상태 변경을 요청하고 상태가 변경된 Model 을 View 에 전달한다.</p><p>HTTPServlet 클래스를 상속받아 <code>doGet()</code>, <code>doPost()</code>, <code>doPut()</code>, <code>doDelete()</code> 등의 메소드를 Override 하여</p><p>HTTP 요청을 받으며, 메소드 인자로 전달된 HttpServletRequest 객체를 사용하여 요청과 함께 전달된 데이터를 읽어들인다.</p><!-- Clean Architecture 읽고 내용 추가하기 --><h2 id="참고">참고</h2><p><a href="https://github.com/sgc109/design-pattern-study">https://github.com/sgc109/design-pattern-study</a><br><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;linkClass=331401&amp;barcode=9788979143409">Head First Design Patterns</a><br><a href="http://www.kirkdorffer.com/jspspecs/jsp092.html#model">JavaServer Pages Spec</a></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/sgc109/design-pattern-study/tree/master/02-Observer-Pattern">https://github.com/sgc109/design-pattern-study/tree/master/02-Observer-Pattern</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://github.com/sgc109/design-pattern-study/tree/master/09-Iterator-and-Composite-Patterns">https://github.com/sgc109/design-pattern-study/tree/master/09-Iterator-and-Composite-Patterns</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://github.com/sgc109/design-pattern-study/tree/master/01-Strategy-Pattern">https://github.com/sgc109/design-pattern-study/tree/master/01-Strategy-Pattern</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/sgc109/design-pattern-study/tree/master/07-Adapter-and-Facade-Patterns">https://github.com/sgc109/design-pattern-study/tree/master/07-Adapter-and-Facade-Patterns</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://en.wikipedia.org/wiki/JSP_model_2_architecture">https://en.wikipedia.org/wiki/JSP_model_2_architecture</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-servlet">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-servlet</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><a href="https://en.wikipedia.org/wiki/JSP_model_1_architecture">https://en.wikipedia.org/wiki/JSP_model_1_architecture</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/18/compound-pattern-feat-mvc/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git 의 서브모듈(Submodule)</title>
      <link>http://sgc109.github.io/2020/07/16/git-submodule/</link>
      <guid>http://sgc109.github.io/2020/07/16/git-submodule/</guid>
      <pubDate>Wed, 15 Jul 2020 15:19:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;Git 의 &lt;code&gt;서브모듈(Submodule)&lt;/code&gt; 이란 하나의 저장소 안에 있는 또 다른 별개의 저장소이다.&lt;/p&gt;
&lt;p&gt;보통 다른 원격 저장소를 가져와(pull) 서브모듈로 사용하게 된다.&lt;/p&gt;
&lt;p&gt;본 포스트에서는 Git 의 서브모듈에 대해 알아본다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Git 의 <code>서브모듈(Submodule)</code> 이란 하나의 저장소 안에 있는 또 다른 별개의 저장소이다.</p><p>보통 다른 원격 저장소를 가져와(pull) 서브모듈로 사용하게 된다.</p><p>본 포스트에서는 Git 의 서브모듈에 대해 알아본다.</p><a id="more"></a><h2 id="서브모듈-시작하기">서브모듈 시작하기</h2><p><strong>myblog</strong> 라는 프로젝트 디렉터리에서 <strong>블로그</strong>를 개발하다가,</p><p><strong>chat-module</strong> 이라는 <strong>채팅 모듈</strong>을 원격 저장소에서 가져와 블로그 프로젝트에서 사용하고 싶다고 가정하자.</p><p>현재 myblog 로컬 저장소에는 <strong>Comment.java</strong>, <strong>Post.java</strong> 2개의 파일이 있고,</p><p>chat-module 원격 저장소에는 <strong>Chat.java</strong> 파일이 있다.</p><p>myblog 디렉터리에서 chat-module 저장소를 서브모듈로 사용하기 위해 다음 명령어를 사용한다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/sgc109/chat-module.git</span><br></pre></td></tr></table></figure><p>그럼 아래와 같이 <strong>.gitmodules</strong> 와 <strong>chat-module/</strong> (<strong>Chat.java</strong> 와 함께)가 생성되어 스테이징 된다.</p><p><img src="/images/git-submodule/1.png" alt="메인 프로젝트에 서브모듈 추가하기"></p><p>이때 <strong>.gitmodules</strong> 파일을 열어보면 다음과 같이 서브모듈에 대한 정보(이름, 경로, 원격 저장소 url)가 적혀있다.</p><p><img src="/images/git-submodule/2.png" alt="서브모듈 추가 시 자동 생성된 .gitmodules 파일의 내용"></p><p>또, 루트 디렉터리에서 <code>git diff --cached chat-module</code> 를 실행하면, (참고로, --cached 와 --staged 는 같다)</p><p>다음과 같이 서브 디렉터리 내 모든 파일에 대한 정보가 자세히 나오는 것이 아니라 어떤 하나의 커밋에 대한 정보만 적혀있다.</p><p><img src="/images/git-submodule/3.png" alt=""></p><p>아래와 같이 스테이징된 변경사항을 commit 해보면,</p><p><img src="/images/git-submodule/5.png" alt="서브 모듈 추가 후 Commit 했을 때의 출력 화면"></p><p>일반적인 파일처럼 <code>100xxx</code> 의 형태로 표시되는 <strong>.gitmodules</strong> 와는 달리</p><p><strong>chat-module</strong> 디렉터리는 <code>160000</code> 의 형태로 하나의 특수한 파일로 인식한다는 것을 확인할 수 있다.</p><p>해당 커밋을 Github 에 push 하면 서브모듈은 다음과 같은 아이콘으로 표시된다.</p><p><img src="/images/git-submodule/6.png" alt=""></p><h2 id="서브모듈-포함한-프로젝트-Clone">서브모듈 포함한 프로젝트 Clone</h2><p>팀 내 다른 개발자가 앞서 서브모듈을 포함하여 push 된 원격 저장소를 clone 하고 싶다고 하자.</p><p>아래와 같이 <code>git clone</code> 명령어를 실행한다.</p><p><img src="/images/git-submodule/7.png" alt="비어있는 서브모듈 디렉터리"></p><p>보이는 것처럼 서브모듈 디렉터리 내 파일들은 하나도 가져오지 않는다.</p><p>메인 프로젝트 입장에서 서브모듈은 사실 단지 현재 가리키는 커밋과 변경 여부만 적혀있는 하나의 파일에 불과하기 때문이다.</p><p>서브모듈 디렉터리에서 변경사항을 만들고 상위 디렉터리에서 <code>git diff</code> 를 해보면 이 사실을 알 수 있다.</p><p><img src="/images/git-submodule/8.png" alt="메인 프로젝트에서 서브모듈의 변경사항을 추적하는 방식"></p><p>그래서 서브모듈 디렉터리에서 2가지 명령어를 추가로 실행해야 서브모듈의 파일을 모두 가져올 수 있다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><p><code>git submodule init</code> 은 서브모듈 디렉터리를 git 로컬 저장소로 초기화 해주고(<code>git init</code> 처럼)</p><p><code>git submodule update</code> 는 서브모듈의 원격 저장소에서 파일을 가져온다. 최신 commit 을 가져 오는건 아니고</p><p><em>.git/modules/chat-module/HEAD</em> 에 서브모듈이 어떤 커밋을 가리키는지 명시돼 있어서 해당 커밋을 가져온다.</p><p><img src="/images/git-submodule/9.png" alt="서브모듈 초기화를 위한 2가지 추가 명령어"></p><p>혹은, 애초에 clone 을 할 때 <code>--recurse-submodules</code> 옵션을 주면</p><p>굳이 모든 서브모듈 디렉터리에서 2개의 추가 명령어를 실행하지 않아도 한방에 초기화를 할 수 있다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/sgc109/myblog.git</span><br></pre></td></tr></table></figure><p><img src="/images/git-submodule/10.png" alt="git clone 시 옵션으로 한 번에 서브모듈 초기화 하기"></p><h2 id="서브모듈-포함한-프로젝트-작업">서브모듈 포함한 프로젝트 작업</h2><h3 id="서브모듈-업데이트하기">서브모듈 업데이트하기</h3><p>만약 다른 개발자가 채팅 모듈에 <strong>Message.java</strong> 를 추가하여</p><p><strong>chat-module</strong> 의 원격 저장소에 변경 사항을 push 했다고 가정하자.</p><p>그럼 <strong>chat-module</strong> 서브모듈을 사용하는 <strong>myblog</strong> 로컬 저장소에서는 이를 반영해야 할 것이다.</p><p>기본적인 방법은 서브모듈 디렉터리에서 다음 2가지 명령어를 입력하는 것이다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p><img src="/images/git-submodule/12.png" alt="2개의 명령어로 서브모듈 업데이트 하기"></p><p>하지만 더 간단한 방법이 있다. 서브모듈 디렉터리에서 2개의 명령어를 입력하는 대신</p><p>루트 디렉터리에서 다음 명령어를 입력하면 된다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git submodule update --remote chat-module</span><br></pre></td></tr></table></figure><p><img src="/images/git-submodule/13.png" alt="1개의 명령어로 서브모듈 업데이트 하기"></p><p>이때 만약 로컬에서도 서브모듈에 변경이 있는 경우에는 <code>--merge</code> 나 <code>--rebase</code> 옵션을 줘야한다.</p><h3 id="기본-브랜치-변경하기">기본 브랜치 변경하기</h3><p>참고로 지금까지의 명령어들은 기본적으로 서브모듈 원격 저장소의 <code>master</code> 브랜치를 기준으로 동작한다.</p><p>만약 기본 브랜치를 예를 들어 <em>bugfix-chat</em> 로 변경하고 싶다면, 다음 명령어를 사용하면 된다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git config -f .gitmodules submodule.chat-module.branch bugfix-chat</span><br></pre></td></tr></table></figure><h3 id="서브모듈-수정-사항-공유하기">서브모듈 수정 사항 공유하기</h3><p><em>myblog</em> 에서 작업을 하다가 서브모듈인 <em>chat-module</em> 의 내용에 변경이 필요한 경우도 있을 것이다.</p><p>이럴 때는 먼저 서브모듈의 내용을 원격 저장소에 반영한 뒤, 메인 프로젝트의 내용을 Push 해야한다.</p><p>그렇지 않으면 메인 프로젝트를 Pull 한 다른 개발자들은 변경된 서브모듈의 내용을 알 수 없기 떄문이다.</p><p>하지만 서브모듈의 내용을 Push 하는 것을 깜빡할 수도 있는데,</p><p>이때 <code>--recurse-submodules</code> 라는 유용한 Push 옵션이 있다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git push --recurse-submodules=check</span><br><span class="line"></span><br><span class="line">git push --recurse-submodules=on-demand</span><br></pre></td></tr></table></figure><p>이 옵션을 <code>check</code> 로 주면 서브모듈이 Push 되지 않았다면 메인 프로젝트의 Push 가 중단되며,</p><p><img src="/images/git-submodule/17.png" alt="서브모듈 수정 후 메인 프로젝트 Push 시 옵션 주기 (check)"></p><p>옵션을 <code>on-demand</code> 로 주면 자동으로 서브모듈을 Push 한다.</p><p><img src="/images/git-submodule/18.png" alt="서브모듈 수정 후 메인 프로젝트 Push 시 옵션 주기 (on-demand)"></p><p>물론 단순히 서브모듈 디렉터리에서 직접 Push 를 해주고 메인 프로젝트를 Push 할 수도 있다.</p><h3 id="서브모듈-Merge-하기">서브모듈 Merge 하기</h3><p>내가 서브모듈의 내용을 수정하고 있는데 다른 사람도 수정하여 Upstream 에 Push 했을 경우</p><p>Pull 을 했다고 하자. 만약 서브모듈의 커밋이 단순히 Fast-Forward 관계라면 최신 커밋을 선택한다.</p><p>하지만, 그렇지 않다면? 충돌이 발생하게 된다.</p><p>이때 메인 디렉터리에서 <code>git diff</code> 명령을 통해 충돌이 난 서브모듈의 두 커밋의 SHA 해시 값을 알 수 있다.</p><p>그럼 일단 Upstream 의 커밋으로 새로운 브랜치를 만들고, 서브모듈 디렉터리에서 Merge 를 한다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> chat-module</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch upstream-commit c771610</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge upstream-commit</span></span><br></pre></td></tr></table></figure><p>그럼 물론 충돌이 발생하고, 이를 서브모듈 디렉터리에서 해결한 뒤 커밋을 하고,</p><p>다시 메인 디렉터리로 가서 변경 사항을 스테이징에 올린 뒤 커밋을 하면 된다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add conflicted-file</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'merged 2 commits in submodule'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add chat-module</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'all merged in main directory'</span></span></span><br></pre></td></tr></table></figure><h2 id="서브모듈-팁">서브모듈 팁</h2><h3 id="Foreach">Foreach</h3><p>여러개의 서브모듈을 포함한 프로젝트에서 각 서브모듈에 공통적인 명령어를 수행하고 싶을 때가 있다.</p><p>예를 들어 작업 도중 메인 프로젝트에서 다른 브랜치로 변경하고 싶은데</p><p>메인 프로젝트와 여러 서브모듈에 스테이징은 됐지만 아직 Commit 하지 않은 변경사항이 있는 경우다.</p><p>직접 모든 서브모듈 디렉터리에서 <code>git stash</code> 를 하기엔 너무 번거롭다.</p><p>그럴 땐 다음과 같이 <code>foreach</code> 를 사용하면 유용하다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git stash; git submodule foreach 'git stash'</span><br></pre></td></tr></table></figure><p>그리고 다음 명령어로 모든 서브모듈과 함께 새로운 브랜치로 이동할 수 있다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git checkout -b bugfix-post; git submodule foreach 'git checkout -b bugfix-post'</span><br></pre></td></tr></table></figure><p>모든 서브모듈을 포함한 변경사항을 알고싶은 경우 다음과 같이 활용할 수도 있다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git diff; git submodule foreach 'git diff'</span><br></pre></td></tr></table></figure><h3 id="Alias">Alias</h3><p>앞서 살펴본 submodule 과 관련된 명령문은 너무 길다는 단점이 있다.</p><p>이럴 땐 다음과 같이 서브모듈과 관련된 명령어들의 Alias 로 등록하면 편하다.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config alias.sdiff <span class="string">'!'</span><span class="string">"git diff &amp;&amp; git submodule foreach 'git diff'"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config alias.spush <span class="string">'push --recurse-submodules=on-demand'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config alias.supdate <span class="string">'submodule update --remote --merge'</span></span></span><br></pre></td></tr></table></figure><p>참고로 alias 설정에서 앞에 '!' 와 같이 느낌표가 붙으면 git 명령어가 아닌 shell 명령어라는 의미이다.</p><p><em>참고: <a href="https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88">https://git-scm.com/book/ko/v2/Git-도구-서브모듈</a></em></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/16/git-submodule/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Maven 시작하기</title>
      <link>http://sgc109.github.io/2020/07/10/maven-basic/</link>
      <guid>http://sgc109.github.io/2020/07/10/maven-basic/</guid>
      <pubDate>Fri, 10 Jul 2020 13:23:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;Maven&lt;/code&gt; 은 Ant 의 대안으로 만들어진 자바용 프로젝트 관리 도구이다.&lt;/p&gt;
&lt;p&gt;본 글에서는 메이븐의 핵심 용어인 &lt;strong&gt;Lifecycle&lt;/strong&gt;, &lt;strong&gt;Phase&lt;/strong&gt;, 그리고 &lt;strong&gt;Goal&lt;/strong&gt; 에 대해 알아본다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>Maven</code> 은 Ant 의 대안으로 만들어진 자바용 프로젝트 관리 도구이다.</p><p>본 글에서는 메이븐의 핵심 용어인 <strong>Lifecycle</strong>, <strong>Phase</strong>, 그리고 <strong>Goal</strong> 에 대해 알아본다.</p><a id="more"></a><h2 id="Maven-의-Lifecycles">Maven 의 Lifecycles</h2><p>Maven 은 3개의 lifecycle 로 이루어져 있다.</p><h3 id="default">default</h3><p>프로젝트를 배포하기 위한 라이프 사이클</p><h3 id="clean">clean</h3><p>프로젝트를 클린하는 라이프 사이클</p><h3 id="site">site</h3><p>프로젝트의 사이트 문서를 만들기 위한 라이프 사이클</p><h2 id="Maven-의-Phases">Maven 의 Phases</h2><p>각각의 라이프 사이클은 여러개의 Phase 로 이루어져있다.</p><p>예를 들어, <strong>default</strong> 라이프 사이클은 다음과 같은 phase 들로 이루어져 있다.</p><ul><li><code>validate</code> - 프로젝트가 올바른 상태인지, 그리고 필요한 정보들은 모두 있는지 검증한다</li><li><code>compile</code> - 소스코드를 컴파일한다</li><li><code>test</code> - 알맞은 유닛 테스트 프레임워크로 테스트한다. 이러한 테스트는 코드가 패키징되거나 배포되었을 것을 요구헤선 안된다</li><li><code>package</code> - 컴파일된 파일을 JAR와 같이 배포 가능한 형태로 패키징한다.</li><li><code>verify</code> - 통합 테스트를 수행한다</li><li><code>install</code> - 로컬에서 다른 프로젝트의 의존성으로 사용될 수 있도록 이 패키지를 로컬 저장소에 인스톨한다</li><li><code>deploy</code> - 패키지를 원격 저장소에 복사한다</li></ul><p>물론 위의 phase 말고도 <a href="http://maven.apache.org/ref/3.6.3/maven-core/lifecycles.html#default_Lifecycle">다른 phase</a> 들이 있다.</p><p>만약 다음과 같은 명령어로 특정 phase 를 실행하고자 하면,</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn verify</span><br></pre></td></tr></table></figure><p><strong>default</strong> 라이프 사이클에 있는 phase 들을 <em>validate</em> 부터 <em>verify</em> 까지 순차적으로 실행한다.</p><p>프로젝트 내에 서브 프로젝트들이 있다면 메이븐은 모든 서브 프로젝트들에 대해 같은 동작을 수행한다.</p><p>보통 이름에 하이픈(-)이 붙은 Phase(<code>pre-*</code>, <code>post-*</code>, or <code>process-*</code>)들은 커맨드 라인에서 직접 호출되지 않는다.</p><p>이 Phase 들은 외부에는 불필요한 중간 결과물을 만들기 때문이다.</p><p>예를 들어, <code>integration-test</code> phase 에는 Jacoco 같은 코드 커버리지 툴이나 Tomcat, Docker 같은</p><p>컨테이너 플러그인들이 <code>pre-integration-test</code> Phase 에 Goal 을 바인딩 하여 컨테이너 설정 등 환경 세팅을 하도록 하며,</p><p><code>post-integration-test</code> Phase 에도 Goal 을 바인딩하여 커버리지 통계를 수집하거나 컨테이너를 해제하도록 한다.</p><p>고로, 커맨드 라인에서 <code>integration-test</code> Phase 만 직접 호출하면 커버리지 레포트도 나오지 않으며, 톰캣 웹서버나 도커 인스턴스는 실행 중인 채로 남게 된다.</p><h2 id="Maven-의-Goals">Maven 의 Goals</h2><p>Goal 은 Phase 보다도 한 단계 하위 개념이며, 보통 <code>jacoco:report</code> 나 <code>spring-boot:run</code> 과 같이 <em>plugin:goal</em> 의 형태로 적는다.</p><p>각각의 Goal 은 0개 이상의 Phase 에 포함되며,  각각의 Build Phase 는 0개 이상의 Goals 로 이루어진다.</p><p>Phase 가 실행된다는 것은 Phase 에 속한 Goal 들이 실행된다는 의미다.</p><p>메이븐 2.0.5 이상 버전에서 Phase 내 Goal 들은 POM 에 선언된 순서대로 실행된다.</p><p>어떠한 Phase 에도 속하지 않은 Goal 은 Phase 가 실행될 때 자동으로 실행되는 것이 아니라</p><p>다음의 <code>dependency:copy-dependencies</code> goal 과 같이 외부적에서 직접 명시하여 실행하는데 사용된다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean dependency:copy-dependencies package</span><br></pre></td></tr></table></figure><p>위와 같은 명령어를 실행하면 적어준 순서대로 <code>clean</code> phase 를 먼저 실행하고(물론 <em>clean</em> lifecycle 에서 <em>clean</em> phase 까지의 모든 phase 들을 순차적으로 실행한다는 뜻)</p><p><code>dependency:copy-dependencies</code> goal 을 실행하고, 마지막으로 <code>package</code> phase 를 실행한다(마찬가지로 <em>default</em> lifecycle 에서 <em>package</em> phase 까지 순차적으로 실행)</p><p>만약 특정 Phase 에 속한 Goal 이 하나도 없다면, 해당 Phase 는 실행되지 않는다.</p><p>Plugins 을 통해 새로운 Goals 을 Phases 에 추가할 수도 있다. 예를 들어, Compiler 플러그인은 메인 코드를 컴파일하는<code>compile</code> Goal 과 테스트 코드를 컴파일하는 <code>testCompile</code> Goal 을 가지고 있다.</p><p>다음은 POM 의 <build> 의 <plugins> 안에있는 특정 플러그인에 goals 을 설정해준 예다.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>display-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-test-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>time<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>참고: <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/10/maven-basic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring 애플리케이션 시작 시 실행되는 로직 작성하기</title>
      <link>http://sgc109.github.io/2020/07/09/spring-running-startup-logic/</link>
      <guid>http://sgc109.github.io/2020/07/09/spring-running-startup-logic/</guid>
      <pubDate>Wed, 08 Jul 2020 15:55:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;본 글에서는 Spring 애플리케이션 시작 도중, 혹은 시작 직후에 특정 로직이 실행되도록 하기 위한 다양한 방법을 알아본다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>본 글에서는 Spring 애플리케이션 시작 도중, 혹은 시작 직후에 특정 로직이 실행되도록 하기 위한 다양한 방법을 알아본다.</p><a id="more"></a><p>우선 용어부터 정확히 하겠다. 애플리케이션 시작 도중이라 함은 특정 빈이 초기화된 직후이며, 시작 직후라 함은 모든 빈이 초기화된 직후라고 정의하겠다.</p><p>또한, 빈이 초기화 되었다 함은 빈에 등록된 의존성들이 모두 주입되었다는 뜻으로 정의하겠다.</p><p>IoC 의 특성상 우리는 애플리케이션 실행 흐름의 제어권을 어느정도 포기해야하기 때문에,</p><p>Spring 에서 초기 셋업 로직을 작성하는 것은 아무래도 조금 귀찮기 마련이다.</p><p>단순히 Bean 의 생성자에 초기화 로직을 넣기만 해서는 안될 수도 있다.</p><p>다음의 예를 보자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvalidInitExampleBean</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvalidInitExampleBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        env.getActiveProfiles();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>InvalidInitExampleBean</strong> 객체가 생성되는 시점에는 아직 env 가 초기화되지 않은 상태이므로 <strong>NullPointerException</strong>이 발생하게 된다.</p><p>그럼 어떤 방법으로 초기 셋업 로직을 작성해야 할까?</p><h2 id="초기-셋업-로직을-정의하는-방법">초기 셋업 로직을 정의하는 방법</h2><p>본 글에서는 초기 셋업 로직을 작성하는 8가지 방법에 대해 알아본다.</p><h3 id="PostConstruct-어노테이션">@PostConstruct 어노테이션</h3><p><em>@PostConstruct</em> 어노테이션은 특정 클래스의 메소드에 붙여서 해당 클래스의 객체 내 모든 의존성(Bean) 들이 <strong>초기화 된 직후</strong>에 <strong>딱 한 번</strong>만 실행되도록 해준다.</p><p>만약 객체에 의존성이 하나도 없더라도 실행된다.</p><p>다음의 코드를 보자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostConstructExampleBean</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG </span><br><span class="line">      = Logger.getLogger(PostConstructExampleBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(Arrays.asList(environment.getDefaultProfiles()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앞서 <em>NullPointerException</em> 이 발생했던 코드와는 달리 <em>init()</em> 메소드는 클래스 내 의존성인 environment 가 초기화된 직후에 호출되기 때문에 정상적으로 동작하게된다.</p><h3 id="InitializingBean-인터페이스">InitializingBean 인터페이스</h3><p>이 방식은 어노테이션을 붙이는 대신 <em>InitializingBean</em> 인터페이스와 <em>afterPropertiesSet()</em> 메소드를 구현한다는 것말곤<br>앞서 설명한 <em>@PostConstruct</em> 방식과 유사하게 동작한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializingBeanExampleBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG </span><br><span class="line">      = Logger.getLogger(InitializingBeanExampleBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LOG.info(Arrays.asList(environment.getDefaultProfiles()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ApplicationListener">ApplicationListener</h3><p>이 방식은 앞서 설명한 방식처럼 특정 Bean 과 관련된 것이 아니라 Spring 컨텍스트의 초기화가 완료된 후, 즉 모든 Bean 의 초기화가 완료된 후에 실행되도록 하는 방식이다.<br><em>ApplicationListener<ContextRefreshedEvent></em> 인터페이스를 구현하는 Bean 을 정의하고 <em>onApplicationEvent()</em> 메소드를 Override 하여, 그 안에 원하는 로직을 작성하면 된다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartupApplicationListenerExample</span> <span class="keyword">implements</span> </span></span><br><span class="line"><span class="class">  <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG </span><br><span class="line">      = Logger.getLogger(StartupApplicationListenerExample<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counter;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Increment counter"</span>);</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필요에 따라 <em>ContextRefreshedEvent</em> 대신 상황에 맞게 다른 이벤트를 넣어줄 수도 있다.</p><h3 id="EventListener-어노테이션">@EventListener 어노테이션</h3><p>앞서 설명한 <em>ApplicationListener</em> 처럼 Bean 을 하나 정의하고, 인터페이스를 구현하는 것이 아니라 특정 메소드에 @EventListener 어노테이션을 붙여 그 안에 원하는 로직을 작성한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventListenerExampleBean</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG </span><br><span class="line">      = Logger.getLogger(EventListenerExampleBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counter;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Increment counter"</span>);</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bean-의-initMethod-속성">@Bean 의 initMethod 속성</h3><p><strong>@Bean</strong> 어노테이션의 initMethod 속성으로 이 Bean 의 초기화가 완료(의존성이 모두 주입)된 뒤에 실행 되어야할 Bean 내 메소드의 이름을 지정할 수가 있다.<br>예를 들어 다음과 같은 Bean 이 있다고 가정하자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitMethodExampleBean</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = Logger.getLogger(InitMethodExampleBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(Arrays.asList(environment.getDefaultProfiles()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 때, @Bean 메소드에 <em>initMethod</em> 속성으로 <em>InitMethodExampleBean</em> Bean 내의 메소드인 <em>init()</em> 의 이름을 설정해준다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(initMethod=<span class="string">"init"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> InitMethodExampleBean <span class="title">exBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> InitMethodExampleBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML 로도 가능하다.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"initMethodExampleBean"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"com.baeldung.startup.InitMethodExampleBean"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">init-method</span>=<span class="string">"init"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="생성자-Injection">생성자 Injection</h3><p>사실 생성자를 통해 의존성을 주입하는 경우에는 그냥 생성자에 원하는 로직을 넣으면 된다.<br>Field injection 의 경우 Bean 객체를 생성한 뒤에 나중에 의존성을 주입하기 때문에, 주입하기 이전에는 null 인 상태지만<br>Constructor Injection 의 경우에는 생성과 동시에 주입을 하기 때문에 문제가 없는것이다.<br>이것이 Field Injection 보다 Constructor Injection 이 더 권장되는 여러가지 이유 중 하나다.<br>생성자 주입이 더 권장되는 여러가지 이유에 대해서는 추후 다른 포스팅에서 다룰 것이다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicInConstructorExampleBean</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG </span><br><span class="line">      = Logger.getLogger(LogicInConstructorExampleBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Environment environment;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogicInConstructorExampleBean</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">        LOG.info(Arrays.asList(environment.getDefaultProfiles()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-의-CommandLineRunner">Spring Boot 의 CommandLineRunner</h3><p>스프링 부트는 <em>run()</em> 이라는 콜백 메소드를 가진 <em>CommandLineRunner</em> 라는 인터페이스를 제공한다.<br><em>run()</em> 메소드는 Spring application context 의 초기화가 완료된(모든 Bean 이 초기화된) 후에 실행되므로<br>이 안에 원하는 로직을 작성하면 된다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineAppStartupRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG =</span><br><span class="line">      LoggerFactory.getLogger(CommandLineAppStartupRunner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counter;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String...args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Increment counter"</span>);</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>참고로 <em>CommandLineRunner</em> Bean 은 같은 애플리케이션 컨텍스트 내에 여러개를 정의할 수 있으며,<br><em>Ordered</em> 인터페이스, 혹은 <em>@Order</em> 어노테이션으로 실행 순서를 정해줄 수도 있다.</p><p>@Component 가 아니라 다음과 같이 @Configuration 과 @Bean 을 사용한 방식으로도 정의할 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">run</span><span class="params">(UserRepository userRepository)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String[] args) -&gt; &#123;</span><br><span class="line">            User user1 = <span class="keyword">new</span> User(<span class="string">"John"</span>, <span class="string">"john@domain.com"</span>);</span><br><span class="line">            User user2 = <span class="keyword">new</span> User(<span class="string">"Julie"</span>, <span class="string">"julie@domain.com"</span>);</span><br><span class="line">            userRepository.save(user1);</span><br><span class="line">            userRepository.save(user2);</span><br><span class="line">            userRepository.findAll().forEach(user -&gt; System.out.println(user));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자바에서 하나의 메소드를 가지는 인터페이스의 경우에는 기존의 익명 클래스 방식대신 위와같이 람다식으로 작성할 수 있다.</p><h3 id="Spring-Boot-의-ApplicationRunner">Spring Boot 의 ApplicationRunner</h3><p>스프링 부트는 앞서 언급한 <em>CommandLineRunner</em> 인터페이스 외에 <em>ApplicationRunner</em> 인터페이스도 제공한다.<br>동일하게 <em>run()</em> 이라는 콜백 메소드를 가지고 있어 이 안에 원하는 로직을 작성하면 된다.<br>참고로 <em>run()</em> 메소드로 들어오는 문자열들은 커맨드 라인으로 앱을 실행할 때 들어온 명령행 인자들이다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppStartupRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG =</span><br><span class="line">      LoggerFactory.getLogger(AppStartupRunner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counter;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Application started with option names : &#123;&#125;"</span>, </span><br><span class="line">          args.getOptionNames());</span><br><span class="line">        LOG.info(<span class="string">"Increment counter"</span>);</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>CommandLineRunner</em> 와 차이가 있다면, <em>run()</em> 메소드의 인자가 String 가 아니라 <strong>ApplicationArguments</strong> 인데<br><strong>ApplicationArguments</strong> 인터페이스는 보통의 커맨드라인 인자 뿐만 아니라,<br>옵션 읽어 들일 수 있는 <em>getOptionNames()</em>, <em>getOptionValues()</em> 등의 메소드도 가지고 있다.</p><h2 id="결론">결론</h2><p>앞서 설명한 다양한 방식을 한꺼번에 적용해보면 다음과같은 모양이다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllStrategiesExampleBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG </span><br><span class="line">      = Logger.getLogger(AllStrategiesExampleBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AllStrategiesExampleBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"InitializingBean"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"PostConstruct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"init-method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 빈이 초기화된 후에 다음과 같은 로그가 찍히게 된다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[main] INFO o.b.startup.AllStrategiesExampleBean - Constructor</span><br><span class="line">[main] INFO o.b.startup.AllStrategiesExampleBean - PostConstruct</span><br><span class="line">[main] INFO o.b.startup.AllStrategiesExampleBean - InitializingBean</span><br><span class="line">[main] INFO o.b.startup.AllStrategiesExampleBean - init-method</span><br></pre></td></tr></table></figure><p>참고: <a href="https://www.baeldung.com/running-setup-logic-on-startup-in-spring#4-the-bean-initmethod-attribute">https://www.baeldung.com/running-setup-logic-on-startup-in-spring#4-the-bean-initmethod-attribute</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/09/spring-running-startup-logic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Boot 의 @ConfigurationProperties</title>
      <link>http://sgc109.github.io/2020/07/07/spring-boot-configuration-properties/</link>
      <guid>http://sgc109.github.io/2020/07/07/spring-boot-configuration-properties/</guid>
      <pubDate>Mon, 06 Jul 2020 15:04:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;@ConfigurationProperties&lt;/code&gt; 는 Spring Boot 에서 properties 파일에 정의된 프로퍼티 중 주어진 prefix 를 가지는 프로퍼티들을 POJO 에 매핑하여 Bean 으로 만들수 있게 해주는 어노테이션이다.&lt;/p&gt;
&lt;p&gt;그럼 @ConfigurationProperties 의 다양한 쓰임새에 대해 알아보자.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>@ConfigurationProperties</code> 는 Spring Boot 에서 properties 파일에 정의된 프로퍼티 중 주어진 prefix 를 가지는 프로퍼티들을 POJO 에 매핑하여 Bean 으로 만들수 있게 해주는 어노테이션이다.</p><p>그럼 @ConfigurationProperties 의 다양한 쓰임새에 대해 알아보자.</p><a id="more"></a>  <h2 id="단순한-형태의-Property">단순한 형태의 Property</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"mail"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigProperties</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> String hostName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스프링이 Bean 을 application context 에 만들도록 @Configuration 을 꼭 같이 붙여줘야하며,<br>만약 붙이지 않았을 경우에는 main Spring application 클래스에 @EnableConfigurationProperties(ConfigProperties.class) 를 붙여줘야한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ConfigProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스프링은 프로퍼티를 바인딩할 때 완화된 규칙을 적용하여 다음과같은 변형도 모두 같게 취급한다</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mail.hostName</span><br><span class="line">mail.hostname</span><br><span class="line">mail.host_name</span><br><span class="line">mail.host-name</span><br><span class="line">mail.HOST_NAME</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-2-2">Spring Boot 2.2</h3><p>스프링 부트 2.2 에서는 @ConfigurationProperties 클래스들을 모두 찾아서 등록해주므로<br>@Component, 혹은 @Configuration 과 같은 어노테이션이나 @EnableConfigurationProperties 를 붙일 필요가 없다.</p><h2 id="중첩-Property">중첩 Property</h2><p>기본 자료형 뿐만 아니라 List, Map, Class 도 만들 수가 있다.<br>다음과 같은 클래스가 있을 때,</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Credentials</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String authMethod;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같은 ConfigProperties 클래스에 프로퍼티를 바인딩 하려면</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigProperties</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; defaultRecipients;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; additionalHeaders;</span><br><span class="line">    <span class="keyword">private</span> Credentials credentials;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같은 형태로 properties 를 작성하면 된다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Simple properties</span><br><span class="line">mail.hostname&#x3D;mailer@mail.com</span><br><span class="line">mail.port&#x3D;9000</span><br><span class="line">mail.from&#x3D;mailer@mail.com</span><br><span class="line"> </span><br><span class="line">#List properties</span><br><span class="line">mail.defaultRecipients[0]&#x3D;admin@mail.com</span><br><span class="line">mail.defaultRecipients[1]&#x3D;owner@mail.com</span><br><span class="line"> </span><br><span class="line">#Map Properties</span><br><span class="line">mail.additionalHeaders.redelivery&#x3D;true</span><br><span class="line">mail.additionalHeaders.secure&#x3D;true</span><br><span class="line"> </span><br><span class="line">#Object properties</span><br><span class="line">mail.credentials.username&#x3D;john</span><br><span class="line">mail.credentials.password&#x3D;password</span><br><span class="line">mail.credentials.authMethod&#x3D;SHA1</span><br></pre></td></tr></table></figure><h2 id="Bean-메소드에-사용하기">@Bean 메소드에 사용하기</h2><p>POJO 뿐만 아니라 @Bean 어노테이션이 붙은 메소드에도 사용할 수 있다.<br>우리가 코드를 수정할 수 없는(어노테이션을 붙일 수 없는) 써드파티 컴포넌트에 바인딩할 때 유용하다.<br>예를 들어 다음과 같은 이미 컴파일된 클래스가 있을 때</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같이 @Bean 이 붙은 메소드에 @ConfigurationProperties 를 붙이면</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigProperties</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"item"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">item</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Item();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>메소드의 리턴 타입인 Item 객체에 바인딩된다.</p><h2 id="Property-유효성-검사">Property 유효성 검사</h2><p>아래와 같이 빈 문자열 검사, 문자열 길이 범위, 정수 범위, 정규표현식을 통한 문자열의 형태를 체크할 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotBlank</span></span><br><span class="line"><span class="keyword">private</span> String hostName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Length</span>(max = <span class="number">4</span>, min = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">private</span> String authMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Min</span>(<span class="number">1025</span>)</span><br><span class="line"><span class="meta">@Max</span>(<span class="number">65536</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pattern</span>(regexp = <span class="string">"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]&#123;2,6&#125;$"</span>)</span><br><span class="line"><span class="keyword">private</span> String from;</span><br></pre></td></tr></table></figure><p>만약 유효성 검사가 실패하면 IllegalStateException 이 발생하여 main application 의 실행이 실패한다.</p><h2 id="Property-변환">Property 변환</h2><p>Duration, DataSize 와 같은 타입은 스프링이 자동으로 변환해준다.</p><h3 id="Duration">Duration</h3><p>Duration 은 시간을 나타내는 타입이다. 다음과 같은 Configuration 클래스가 있다고 가정하자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"conversion"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyConversion</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Duration timeInDefaultUnit;</span><br><span class="line">    <span class="keyword">private</span> Duration timeInNano;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼, 다음과 같이 바인딩 할 수 있다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conversion.sizeInDefaultUnit&#x3D;300</span><br><span class="line">conversion.sizeInGB&#x3D;2GB</span><br><span class="line">conversion.sizeInTB&#x3D;4</span><br></pre></td></tr></table></figure><p>default 단위는 ms 이며, 만약 이를 바꾸려면 <em>@DurationUnit</em> 을 사용한다</p><h3 id="DataSize">DataSize</h3><p>DataSize 는 파일의 크기를 나타내는 타입이다. 다음과 같은 configuration 클래스가 있다고 가정하자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> DataSize sizeInDefaultUnit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> DataSize sizeInGB;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@DataSizeUnit</span>(DataUnit.TERABYTES)</span><br><span class="line"><span class="keyword">private</span> DataSize sizeInTB;</span><br></pre></td></tr></table></figure><p>그럼 다윽뫄 같이 바인딩 할 수 있다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conversion.sizeInDefaultUnit&#x3D;300</span><br><span class="line">conversion.sizeInGB&#x3D;2GB</span><br><span class="line">conversion.sizeInTB&#x3D;4</span><br></pre></td></tr></table></figure><p>default 단위는 byte 이며, 이를 바꾸려면 <em>@DataSizeUnit</em> 을 사용한다</p><h3 id="Custom-Converter">Custom Converter</h3><p>커스텀 변환을 정의할 수도 있다. 다음과 같은 클래스에</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같이 바인딩 하려면</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conversion.employee&#x3D;john,2000</span><br></pre></td></tr></table></figure><p>다음과 같은 커스텀 Converter 클래스를 정의하면 될것이다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationPropertiesBinding</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">convert</span><span class="params">(String from)</span> </span>&#123;</span><br><span class="line">        String[] data = from.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Employee(data[<span class="number">0</span>], Double.parseDouble(data[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConstructorBinding">@ConstructorBinding</h2><p>스프링 부트 2.2 부터 @ConstructorBinding 을 붙여서 configuration properties 를 바인딩할 수 있다.<br>이것은 곧 @ConfigurationProperties 이 붙은 클래스가 이제 Immutable 일 수 있다는 것을 의미한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"mail.credentials"</span>)</span><br><span class="line"><span class="meta">@ConstructorBinding</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableCredentials</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String authMethod;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String password;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImmutableCredentials</span><span class="params">(String authMethod, String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authMethod = authMethod;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authMethod;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자에는 우리가 비인딩 하고자 하는 프로퍼티를 모두 인자로 가져야 한다.<br>위의 <em>ImmutableCredentials</em> 클래스는 모든 필드가 final 이기때문에 setter 가 없다.<br>또한, 생성자로 프로퍼티를 바인딩 하기 위해서는 @EnableConfigurationProperties, 혹은<br>@ConfigurationPropertiesScan 를 사용하여 명시적으로 configuration 클래스 를 활성화 시켜줘야 한다.</p><p>참고: <a href="https://www.baeldung.com/configuration-properties-in-spring-boot">https://www.baeldung.com/configuration-properties-in-spring-boot</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/07/spring-boot-configuration-properties/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring 의 Properties</title>
      <link>http://sgc109.github.io/2020/07/06/spring-properties/</link>
      <guid>http://sgc109.github.io/2020/07/06/spring-properties/</guid>
      <pubDate>Mon, 06 Jul 2020 11:40:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;Spring 과 Spring Boot 에서 프로퍼티를 세팅하고 사용하는 방법을 알아보자&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Spring 과 Spring Boot 에서 프로퍼티를 세팅하고 사용하는 방법을 알아보자</p><a id="more"></a><h2 id="Properties-파일-불러오기">Properties 파일 불러오기</h2><h3 id="Annotation-방식">Annotation 방식</h3><p>우선 Spring 3.1 에서 소개된 @PropertySource 어노테이션을 이용하여 properties 파일을 불러오고, 사용할 수 있다.<br>@PropertySource 은 @Configuration 과 함께 사용되어야 한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:foo.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesWithJavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>런타임에 동적으로 파일을 선택할 수도 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(&#123; </span><br><span class="line">  <span class="string">"classpath:persistence-$&#123;envTarget:mysql&#125;.properties"</span></span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>와 같이 작성하면 구동 환경에 따라 여러개의 properties 파일을 만들어 두고, 실행시 간편하게 선택할 수 있다.</p><p>여러개의 파일을 지정할 수도 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:foo.properties"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:bar.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesWithJavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 7 이하</strong>라면 아래와 같이도 할 수 있다</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySources</span>(&#123;</span><br><span class="line">    <span class="meta">@PropertySource</span>(<span class="string">"classpath:foo.properties"</span>),</span><br><span class="line">    <span class="meta">@PropertySource</span>(<span class="string">"classpath:bar.properties"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesWithJavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 property 이름이 중복되는 경우에는 나중에 로드된 property 가 우선권을 갖는다.</p><h3 id="XML-방식">XML 방식</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:foo.properties, classpath:bar.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Properties-사용-주입-하기">Properties 사용/주입 하기</h2><p>파일로부터 불러온 Properties 를 사용하는 방법은 여러가지다.</p><ul><li>@Value 어노테이션</li><li>XML 에서 bean 설정</li><li>Environment API</li></ul><h3 id="Value-어노테이션">@Value 어노테이션</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>( <span class="string">"$&#123;jdbc.url&#125;"</span> )</span><br><span class="line"><span class="keyword">private</span> String jdbcUrl;</span><br></pre></td></tr></table></figure><p>디폴트 값을 설정할 수도 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>( <span class="string">"$&#123;jdbc.url:aDefaultUrl&#125;"</span> )</span><br><span class="line"><span class="keyword">private</span> String jdbcUrl;</span><br></pre></td></tr></table></figure><h3 id="in-XML">in XML</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Environment-API">Environment API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line">...</span><br><span class="line">dataSource.setUrl(env.getProperty(<span class="string">"jdbc.url"</span>));</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-에서-Properties-불러오기">Spring Boot 에서 Properties 불러오기</h2><p>스프링 부트에서는 간편한 설정(부트의 주 목표 중 하나)을 위해 추가 기능을 지원한다.</p><h3 id="디폴트-프로퍼티-파일">디폴트 프로퍼티 파일</h3><p>부트에서는 디폴트 프로퍼티 파일로 <em>src/main/resources</em> 내의 <strong>application.properties</strong> 를 사용한다.<br>그러므로 @PropertySource 를 등록해 줄 필요가 없다.<br>또한, 만일 다른 프로퍼티 파일을 사용해야 한다면 런타임에 지정해줄 수도 있다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --spring.config.location&#x3D;classpath:&#x2F;another-location.properties</span><br></pre></td></tr></table></figure><p>Spring Boot 2.3 부터는 프로퍼티 파일 지정에 와일드카드도 사용할 수 있다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --spring.config.location&#x3D;config&#x2F;*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="환경별-프로퍼티-파일">환경별 프로퍼티 파일</h3><p><em>“src/main/resources”</em> 디렉터리 안에 <em>“application-environment.properties”</em> 의 형태로 파일을 만들어두고<br>profile 을 해당 environment 와 같은 이름으로 설정해주면<br>디폴트 properties 가 로드된 이후에 해당 profile-specific 한 properties 파일인 application-environment.properties가 로드된다.<br>나중에 로드된 properties 가 높은 우선순위를 가지므로 중복된 프로퍼티는 profile-specific 프로퍼티를 따른다.</p><h3 id="TestPropertySource-어노테이션">@TestPropertySource 어노테이션</h3><p>테스트 시에 다음과 같이 디폴트 property 보다 높은 우선순위로 특정 property 파일을 로드할 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@TestPropertySource("/foo.properties")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePropertyInjectionUnitTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;foo&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String foo;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenFilePropertyProvided_thenProperlyInjected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertThat(foo).isEqualTo(<span class="string">"bar"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>파일을 사용하기 싫다면 다음과같이 바로 name 과 value 를 줄 수도 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">TestPropertySource</span>(<span class="title">properties</span> </span>= &#123;<span class="string">"foo=bar"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyInjectionUnitTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;foo&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String foo;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenPropertyProvided_thenProperlyInjected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertThat(foo).isEqualTo(<span class="string">"bar"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한, @SpringBootTest 어노테이션의 <em>properties</em> 인자로도 동일한 효과를 낼 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(</span></span><br><span class="line"><span class="class">  <span class="title">properties</span> </span>= &#123;<span class="string">"foo=bar"</span>&#125;, classes = SpringBootPropertiesTestApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringBootPropertyInjectionIntegrationTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;foo&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String foo;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenSpringBootPropertyProvided_thenProperlyInjected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertThat(foo).isEqualTo(<span class="string">"bar"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="계층형-프로퍼티">계층형 프로퍼티</h3><p>@ConfigurationProperties 로 여러 프로퍼티를 하나의 자바 객체로 묶을 수 있다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">database.url&#x3D;jdbc:postgresql:&#x2F;localhost:5432&#x2F;instance</span><br><span class="line">database.username&#x3D;foo</span><br><span class="line">database.password&#x3D;bar</span><br></pre></td></tr></table></figure><p>의 경우에는 아래와 같은 형태의 객체로 매핑할 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"database"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">    String url;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="YAML-파일">YAML 파일</h3><p>properties 파일과의 차이점은 확장자가 다르다는 것과 <a href="https://bitbucket.org/asomov/snakeyaml">SnakeYAML</a> 라이브러리에 대한 의존성이 classpath 에 있어야 한다는 것이다.</p><h3 id="명령행-인자">명령행 인자</h3><p>파일을 사용하지 않고 명령행 인자로 바로 프로퍼티를 줄 수도 있다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --property&#x3D;&quot;value&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -Dproperty.name&#x3D;&quot;value&quot; -jar app.jar</span><br></pre></td></tr></table></figure><h3 id="환경변수">환경변수</h3><p>스프링 부트는 환경변수도 감지하여 프로퍼티로 취급한다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export name&#x3D;value</span><br><span class="line">java -jar app.jar</span><br></pre></td></tr></table></figure><h2 id="Raw-Bean">Raw Bean</h2><p>PropertyPlaceholderConfigurer(스프링 3.0), 혹은 PropertySourcesPlaceholderConfigurer(스프링 3.1) 을 사용하는 방법도 있다.<br>장황하며 대부분의 경우 불필요하지만, 직접 property configuration bean 을 정의하여 configuration 을 완벽하게 제어할 수가 있다.<br>여기서는 다루지 않겠다.</p><p>참조: <a href="https://www.baeldung.com/properties-with-spring">https://www.baeldung.com/properties-with-spring</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/06/spring-properties/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring 의 Profiles</title>
      <link>http://sgc109.github.io/2020/07/06/spring-profiles/</link>
      <guid>http://sgc109.github.io/2020/07/06/spring-profiles/</guid>
      <pubDate>Mon, 06 Jul 2020 11:30:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;strong&gt;Profiles&lt;/strong&gt; 을 사용하면 애플리케이션이 실행되는 환경에 따라 다른 Bean 들을 매핑할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, 개발 환경, 스테이징 환경, 혹은 실 서비스 환경에 따라 다른 의존성을 주입할 수 있다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>Profiles</strong> 을 사용하면 애플리케이션이 실행되는 환경에 따라 다른 Bean 들을 매핑할 수 있다.</p><p>예를 들어, 개발 환경, 스테이징 환경, 혹은 실 서비스 환경에 따라 다른 의존성을 주입할 수 있다.</p><a id="more"></a><h2 id="Profiles-구분하기">Profiles 구분하기</h2><h3 id="Bean-에-Profile-붙이기">Bean 에 @Profile 붙이기</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDatasourceConfig</span></span></span><br></pre></td></tr></table></figure><p>다음과 같이 특정 profile 이 active 하지 않을 때만 container 에 포함시킬 수도 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"!dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDatasourceConfig</span></span></span><br></pre></td></tr></table></figure><h3 id="XML-에-정의하기">XML 에 정의하기</h3><p><bean> 태그의 <em>”profiles”</em> 속성으로 설정이 가능하다.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"devDatasourceConfig"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.baeldung.profiles.DevDatasourceConfig"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Profiles-설정하기">Profiles 설정하기</h2><h3 id="WebApplicationInitializer-인터페이스를-통한-방법">WebApplicationInitializer 인터페이스를 통한 방법</h3><p>ServletContext 를 코드 기반으로 설정해주기 위해 다음과같이 WebApplicationInitializer 를 사용할 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> </span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  </span><br><span class="line">        servletContext.setInitParameter(</span><br><span class="line">          <span class="string">"spring.profiles.active"</span>, <span class="string">"dev"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConfigurableEnvironment-를-통한-방법">ConfigurableEnvironment 를 통한 방법</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfigurableEnvironment env;</span><br><span class="line">...</span><br><span class="line">env.setActiveProfiles(<span class="string">"someProfile"</span>);</span><br></pre></td></tr></table></figure><h3 id="web-xml-를-통한-방법">web.xml 를 통한 방법</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/app-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.active<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JVM-파라미터를-통한-방법">JVM 파라미터를 통한 방법</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-Dspring.profiles.active=dev</span><br></pre></td></tr></table></figure><h3 id="환경변수를-통한-방법">환경변수를 통한 방법</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> spring_profiles_active=dev</span><br></pre></td></tr></table></figure><h3 id="Maven-profiles-를-통한-방법">Maven profiles 를 통한 방법</h3><p>이 방식은 매우 복잡하므로 그냥 참고만 하자.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">spring.profiles.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">spring.profiles.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">spring.profiles.active</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">spring.profiles.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와같이 설정한 뒤에 <em>application.properties</em> 파일에서 <em>@spring.profiles.active@</em> placeholder 를 사용하고</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.profiles.active&#x3D;@spring.profiles.active@</span><br></pre></td></tr></table></figure><p>Resource filtering 을 활성화해주고</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>마지막으로 메이븐에 -P parameter 를 주면 된다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn clean package -Pprod</span><br></pre></td></tr></table></figure><p>이 명령어는 prod 프로파일을 적용하여 앱을 패키지할것이고, spring.profiles.active 의 값도 prod 로 설정할것이다.</p><h3 id="테스트-시-ActiveProfiles-를-통한-방법">테스트 시 @ActiveProfiles 를 통한 방법</h3><p>테스트할 땐 profile 를 명시하는것이 매우 쉽다. 테스트 클래스에 다음과 같이 어노테이션을 붙여주면 된다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</span><br></pre></td></tr></table></figure><ul><li>여러가지를 함께 사용할 경우<br>위의 모든 방식들을 동시에 여러개 사용하는 경우 다음의 우선순위에 따라 결정된다. <em>(우선순위가 높은 순으로)</em></li></ul><ol><li>Context parameter in web.xml</li><li>WebApplicationInitializer</li><li>JVM System parameter</li><li>Environment variable</li><li>Maven profile</li></ol><ul><li>디폴트 Profile<br>만약 Profiles 를 지정하지 않으면 <em>&quot;default&quot;</em> profile 로 설정되며,<br>spring.profiles.default 프로퍼티를 통해 디폴트 profile 를 <em>&quot;default&quot;</em> 에서 다른 값으로 변경할 수 있다.</li></ul><h2 id="활성화된-Profiles-사용하기">활성화된 Profiles 사용하기</h2><h3 id="Environment-를-통한-방법">Environment 를 통한 방법</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getActiveProfiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String profileName : environment.getActiveProfiles()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Currently active profile - "</span> + profileName);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-active-profile-을-통한-방법">spring.active.profile 을 통한 방법</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.profiles.active&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String activeProfile;</span><br></pre></td></tr></table></figure><p>그런데 만약 현재 active 한 profile 이 없는 경우에는 <em>IllegalArgumentException</em> 이 발생할 수 있으므로 default 값을 줘야한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.profiles.active:&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String activeProfile;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-에서의-Profiles">Spring Boot 에서의 Profiles</h2><p>스프링 부트는 위에 언급된 모든 profile 설정 방식은 물론, 몇가지 추가적인 기능을 제공한다.</p><h3 id="properties-파일을-통한-방법">properties 파일을 통한 방법</h3><p>우선, 다음과같이 properties 파일에서 설정이 가능하다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure><h3 id="SpringApplication-클래스를-통한-방법">SpringApplication 클래스를 통한 방법</h3><p>또한, 다음과같이 <em>SpringApplication</em> class 를 사용하여 코드 기반의 설정도 가능하다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringApplication.setAdditionalProfiles(<span class="string">"dev"</span>);</span><br></pre></td></tr></table></figure><h3 id="Maven-을-통한-방법">Maven 을 통한 방법</h3><p>마지막으로, 메이븐으로도 설정 가능하다.<br>pom.xml 의 <em>spring-boot-maven-plugin</em> 내에 프로파일 이름을 명시할 수 있다.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 mvn 명령어로 앱을 실행하면된다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">man spring-boot:run</span><br></pre></td></tr></table></figure><p>하지만 스프링 부트의 profiles 에 관한 기능 중 <strong>가장 중요한 것</strong>이 다음 기능이다.</p><h3 id="Profile-별-properties-files">Profile 별 properties files</h3><p>스프링 부트는 우선. <em>application.properties</em> 파일 내 모든 property 를 로드한 후,<br>active 된 profile 들에 대한 .properties 파일에 대해서만 property 를 로드한다.</p><p>참고: <a href="https://www.baeldung.com/spring-profiles">https://www.baeldung.com/spring-profiles</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/06/spring-profiles/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring 의 RestTemplate</title>
      <link>http://sgc109.github.io/2020/07/06/rest-template/</link>
      <guid>http://sgc109.github.io/2020/07/06/rest-template/</guid>
      <pubDate>Mon, 06 Jul 2020 11:10:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;Spring 의 REST Client 인 &lt;code&gt;RestTemplate&lt;/code&gt; 에 대해 알아보자&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Spring 의 REST Client 인 <code>RestTemplate</code> 에 대해 알아보자</p><a id="more"></a><p>RestTemplate 을 사용하여 HTTP request 가 가능하며,</p><p>GET, POST, PUT, DELETE, HEAD 등의 method 를 사용할 수 있다.</p><p>본 글에서는 이 중에서도 GET, POST, HEAD 메소드의 사용 예를 알아본다.</p><p>또, RestTemplate 에서 Exception Handling 을 하는 방식에 대해서도 알아본다.</p><h2 id="기본적인-사용법">기본적인 사용법</h2><h3 id="GET-메소드">GET 메소드</h3><h4 id="JSON-받아오기">JSON 받아오기</h4><p><em>getForEntity</em> 메소드를 사용하여 JSON을 받아올 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">String fooResourceUrl</span><br><span class="line">  = <span class="string">"http://localhost:8080/spring-rest/foos"</span>;</span><br><span class="line">ResponseEntity&lt;String&gt; response</span><br><span class="line">  = restTemplate.getForEntity(fooResourceUrl + <span class="string">"/1"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));</span><br><span class="line"></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">JsonNode root = mapper.readTree(response.getBody());</span><br><span class="line">JsonNode name = root.path(<span class="string">"name"</span>);</span><br><span class="line">assertThat(name.asText(), notNullValue());</span><br></pre></td></tr></table></figure><p>JsonNode 클래스는 <strong>Jackson</strong> 이 제공하는 JSON 노드 구조 클래스다.</p><h4 id="JSON-대신-POJO-받아오기">JSON 대신 POJO 받아오기</h4><p>Response 를 곧바로 DTO 에 매핑할 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 POJO가 있을 때 <em>getForObject</em> 메소드를 쓸 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Foo foo = restTemplate</span><br><span class="line">  .getForObject(fooResourceUrl + <span class="string">"/1"</span>, Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">assertThat(foo.getName(), notNullValue());</span><br><span class="line">assertThat(foo.getId(), is(<span class="number">1L</span>));</span><br></pre></td></tr></table></figure><h3 id="HEAD-메소드">HEAD 메소드</h3><p><em>headForHeaders</em> 메소드로 간단하게 헤더만 가져올 수 있다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HttpHeaders httpHeaders &#x3D; restTemplate.headForHeaders(fooResourceUrl);</span><br><span class="line">assertTrue(httpHeaders.getContentType().includes(MediaType.APPLICATION_JSON));</span><br></pre></td></tr></table></figure><h3 id="POST-메소드">POST 메소드</h3><p><em>postForLocation()</em>, <em>postForObject()</em> 또는 <em>postForEntity()</em> 를 사용할 수 있다.</p><p><em>postForLocation()</em> 는 생성된 리소스의 URI 를 반환하는 반면,<br><em>postForObject()</em> 와 <em>postForEntity()</em> 는 리소스 자체를 반환한다.</p><h4 id="postForObject">postForObject()</h4><p>다음과 같이 사용한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"> </span><br><span class="line">HttpEntity&lt;Foo&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(<span class="keyword">new</span> Foo(<span class="string">"bar"</span>));</span><br><span class="line">Foo foo = restTemplate.postForObject(fooResourceUrl, request, Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">assertThat(foo, notNullValue());</span><br><span class="line">assertThat(foo.getName(), is(<span class="string">"bar"</span>));</span><br></pre></td></tr></table></figure><h4 id="postForLocation">postForLocation()</h4><p>다음과 같이 사용한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpEntity&lt;Foo&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(<span class="keyword">new</span> Foo(<span class="string">"bar"</span>));</span><br><span class="line">URI location = restTemplate</span><br><span class="line">  .postForLocation(fooResourceUrl, request);</span><br><span class="line">assertThat(location, notNullValue());</span><br></pre></td></tr></table></figure><h4 id="exchange">exchange()</h4><p>좀 더 범용적인 <em>exchange()</em> 메소드를 사용할 수도 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">HttpEntity&lt;Foo&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(<span class="keyword">new</span> Foo(<span class="string">"bar"</span>));</span><br><span class="line">ResponseEntity&lt;Foo&gt; response = restTemplate</span><br><span class="line">  .exchange(fooResourceUrl, HttpMethod.POST, request, Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line">assertThat(response.getStatusCode(), is(HttpStatus.CREATED));</span><br><span class="line">  </span><br><span class="line">Foo foo = response.getBody();</span><br><span class="line">  </span><br><span class="line">assertThat(foo, notNullValue());</span><br><span class="line">assertThat(foo.getName(), is(<span class="string">"bar"</span>));</span><br></pre></td></tr></table></figure><h4 id="폼-데이터-전송하기">폼 데이터 전송하기</h4><p>서버가 ‘&amp;’로 연결된 여러개의 ‘키=밸류’ 쌍을 받을 수 있도록 ‘Content-Type’ 을 <em>application/x-www-form-urlencoded</em> 로 변경해줘야한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br></pre></td></tr></table></figure><p>그리고 <em>LinkedMultiValueMap</em> 으로 폼 데이터를 감싼다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MultiValueMap&lt;String, String&gt; map= <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">map.add(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>다음은, <em>HttpEntity</em> 로 request를 빌드한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(map, headers);</span><br></pre></td></tr></table></figure><p>마지막으로 <em>postForEntity()</em> 를 호출한다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;String&gt; response = restTemplate.postForEntity(</span><br><span class="line">  fooResourceUrl+<span class="string">"/form"</span>, request , String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line">assertThat(response.getStatusCode(), is(HttpStatus.CREATED));</span><br></pre></td></tr></table></figure><h2 id="Exception-Handling">Exception Handling</h2><p>RestTemplate 은 내부적으로 <em><strong>errorHandler</strong></em> 라는 필드를 가지고 있다.</p><p>이 <em>errorHandler</em> 라는 녀석이 바로 HTTP 에러가 발생했을 때, 이를 처리하는 로직이</p><p>들어있는 객체이며, <em><strong>DefaultResponseErrorHandler</strong></em> 라는 클래스의 인스턴스로 초기화 되어있다.</p><p><em>DefaultResponseErrorHandler</em> 는 기본적으로 HTTP 에러가 발생했을 때</p><p>다음 3가지 중 하나의 Exception 을 던진다.</p><ol><li>HttpClientErrorException - 4xx HTTP 상태 코드가 응답 됐을 때</li><li>HttpServerErrorException - 5xx HTTP 상태 코드강 응답 됐을 때</li><li>UnknownHttpStatusCodeException - 알 수 없는 HTTP 상태 코드가 응답 됐을 때</li></ol><p>위의 예외들은 모두 <em><strong>RestClientResponseException</strong></em>의 서브 클래스다.</p><p><strong>물론 가장 단순한 방법은 try/catch 문으로 모든 HTTP 메소드 호출부를 감싸는 것이다.</strong></p><p>하지만 이 방법은 API 의 종류와 호출부가 많아지면 코드의 품질이 좋지 않아질 것이다.</p><p>다른 좋은 방법은 없을까? 다행히도 스프링이 좋은 방법을 제공한다.</p><h3 id="ResponseErrorHandler-인터페이스">ResponseErrorHandler 인터페이스</h3><p><em>ResponseErrorHandler</em> 를 구현하는 클래스를 작성하여</p><p><em>RestTemplate</em> 의 <em>setErrorHandler()</em> 로 앞서 작성한 에러 핸들러의 인스턴스를 세팅해줄 수 있다.</p><p>일반적으로 에러 핸들러에서는 다음 둘 중 한가지 동작을 수행하게 된다.</p><ol><li>HTTP 응답에 따라서 우리의 앱에 맞는, 의미있는 Exception 을 던져준다.</li><li>Exception 을 던지지 않고 HTTP 응답을 무시한 채 프로그램이 계속 실행 되도록 한다.</li></ol><p>참고로, <em>ResponseErrorHandler</em> 인터페이스를 구현하는 대신</p><p>이미 <em>ResponseErrorHandler</em> 를 구현하고 있는 <em>DefaultResponseErrorHandler</em> 클래스를 상속받아도 된다.</p><p>이러면 이미 <em>DefaultResponseErrorHandler</em> 에서 <em>hasError()</em> 메소드가 4xx/5xx 상태 코드를 받는 경우</p><p>true 를 반환하도록 구현되어 있기 때문에 직접 구현해줄 필요가 없어서 편하다.</p><p>다음의 예제 코드를 보자.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorHandler</span> <span class="keyword">implements</span> <span class="title">ResponseErrorHandler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">(ClientHttpResponse httpResponse)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          httpResponse.getStatusCode().series() == CLIENT_ERROR </span><br><span class="line">          || httpResponse.getStatusCode().series() == SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(ClientHttpResponse httpResponse)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (httpResponse.getStatusCode()</span><br><span class="line">          .series() == HttpStatus.Series.SERVER_ERROR) &#123;</span><br><span class="line">            <span class="comment">// handle SEVER_ERROR</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> My500ErrorException();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (httpResponse.getStatusCode()</span><br><span class="line">          .series() == HttpStatus.Series.CLIENT_ERROR) &#123;</span><br><span class="line">            <span class="comment">// handle CLIENT_ERROR</span></span><br><span class="line">            <span class="keyword">if</span> (httpResponse.getStatusCode() == HttpStatus.NOT_FOUND) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> My400ErrorException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 작성한 에러 핸들러를 다음과 같이 RestTemplate 에 셋팅해 줄 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarConsumerService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BarConsumerService</span><span class="params">(RestTemplateBuilder restTemplateBuilder)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = restTemplateBuilder</span><br><span class="line">          .errorHandler(<span class="keyword">new</span> MyErrorHandler())</span><br><span class="line">          .build();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bar <span class="title">fetchBarById</span><span class="params">(String barId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"/bars/4242"</span>, Bar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TestRestTemplate">TestRestTemplate</h2><p><strong>TestRestTemplate</strong> 은 RestTemplate 의 유용한 대체제로서 Integration Test 시 유용하다.</p><p>내장 서버와 함께 @SpringBootTest 어노테이션을 사용중이라면, Test 클래스 내에서 @Autowired 되어 곧바로 사용할 수 있다.</p><p>커스터마이징이 필요하다면 RestTemplateBuilder @Bean 을 사용하면 된다.</p><p>RestTemplate과 다른점은, TestRestTemplate 은 RestTemplate 을 내장(composition)하며</p><p>다음과 같은 추가 기능을 제공한다는 것이다.</p><h3 id="Authentication">Authentication</h3><ul><li>템플릿 생성 시 입력</li></ul><p>생성자 인자로 credentials 를 줄 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestRestTemplate testRestTemplate</span><br><span class="line"> = <span class="keyword">new</span> TestRestTemplate(<span class="string">"user"</span>, <span class="string">"passwd"</span>);</span><br><span class="line">ResponseEntity&lt;String&gt; response = testRestTemplate.</span><br><span class="line">  getForEntity(URL_SECURED_BY_AUTHENTICATION, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line">assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));</span><br></pre></td></tr></table></figure><ul><li>템플릿 생성 후 입력</li></ul><p>이미 템플릿을 생성한 후에도 가능하다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestRestTemplate testRestTemplate = <span class="keyword">new</span> TestRestTemplate();</span><br><span class="line">ResponseEntity&lt;String&gt; response = testRestTemplate.withBasicAuth(</span><br><span class="line">  <span class="string">"user"</span>, <span class="string">"passwd"</span>).getForEntity(URL_SECURED_BY_AUTHENTICATION, </span><br><span class="line">  String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line">assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));</span><br></pre></td></tr></table></figure><h3 id="HttpClientOption">HttpClientOption</h3><p>TestRestTemplate 내 ENUM 형태로 존재하는 HttpClientOption 을 통해 내부의 HTTP Client 를 커스터마이징할 수 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestRestTemplate testRestTemplate = <span class="keyword">new</span> TestRestTemplate(<span class="string">"user"</span>, </span><br><span class="line">  <span class="string">"passwd"</span>, TestRestTemplate.HttpClientOption.ENABLE_COOKIES);</span><br><span class="line">ResponseEntity&lt;String&gt; response = testRestTemplate.</span><br><span class="line">  getForEntity(URL_SECURED_BY_AUTHENTICATION, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  </span><br><span class="line">assertThat(response.getStatusCode(), equalTo(HttpStatus.OK))</span><br></pre></td></tr></table></figure><p>만약 인증이 필요하지 않다면 단순히 이렇게 할 수도 있다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestRestTemplate(TestRestTemplate.HttpClientOption.ENABLE_COOKIES)</span><br></pre></td></tr></table></figure><h2 id="RestTemplate-의-Wrapper">RestTemplate 의 Wrapper</h2><p>몇가지 생성자와 메소드를 통한 추가적인 기능 뿐만 아니라, TestRestTemplate 은 RestTemplate 의 Wrapper 의 역할도 할 수 있다.<br>이는 레거시 코드로 인해 꼭 RestTemplate 을 써야만 하는 경우에 유용하다.</p><h2 id="WebClient-vs-RestTemplate">WebClient vs RestTemplate</h2><p>WebClient 는 Spring5 에서 새롭게 등장한 클래스다.<br>Spring3 부터 지원되는 RestTemplate 가 블로킹 방식으로만 동작하는 반면,<br>WebClient 는 블로킹 뿐만 아니라 논블로킹으로도 동작하여 RestTemplate 의 대체제로 사용되고있다.</p><h3 id="RestTemplate">RestTemplate</h3><p>RestTemplate 은 블로킹 방식이며, <strong>내부적으로 Java Servlet API 를 사용하여 하나의 request 당 하나의 스레드를 점유</strong>하기 때문에</p><p>요청에 대한 응답이 늦어지는 경우 불필요하게 CPU 와 메모리 자원이 낭비될 수가 있다.</p><p>또한, 잦은 컨텍스트 스위칭으로 성능에도 좋지않은 영향을 미칠 수도 있고</p><p>스레드 풀의 스레드가 고갈될 수도 있다.</p><h3 id="WebClient">WebClient</h3><p>반면, WebClient 는 논블로킹 방식이기 때문에, 응답이 늦어지더라도 큰 문제가 없다.<br>WebClient 는 Spring WebFlux 라이브러리에 포함 되어있다.<br>내부적으로, WebClient 가 만든 task 를 Reactive framework 가 큐에 넣고, 응답이 왔을 때만 꺼내서 실행한다.<br>Reactive framework 는 Java 9의 Reactive Streams API를 통해 비동기 로직을 조립할 수 있게 해준다.</p><p>참고1: <a href="https://www.baeldung.com/rest-template">https://www.baeldung.com/rest-template</a><br>참고2: <a href="https://www.baeldung.com/spring-webclient-resttemplate">https://www.baeldung.com/spring-webclient-resttemplate</a><br>참고3: <a href="https://www.baeldung.com/spring-rest-template-error-handling">https://www.baeldung.com/spring-rest-template-error-handling</a><br>참고4: <a href="https://www.baeldung.com/spring-boot-testresttemplate">https://www.baeldung.com/spring-boot-testresttemplate</a></p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/06/rest-template/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[책 리뷰] 소프트웨어 장인</title>
      <link>http://sgc109.github.io/2020/07/05/software-craftman/</link>
      <guid>http://sgc109.github.io/2020/07/05/software-craftman/</guid>
      <pubDate>Sun, 05 Jul 2020 14:15:53 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;소프트웨어 장인&lt;/code&gt;이라는 책을 읽어보았다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><code>소프트웨어 장인</code>이라는 책을 읽어보았다.</p><a id="more"></a><p><img src="/images/software-craftmanship/software-craftman.jpg" alt=""></p><p>저자가 경험한 일화를 소개하며 '소프트웨어 장인'은 평소에 어떤 태도를 가지며, 특정 상황에서 어떻게 행동하는 사람인지 정의한다.</p><p>우선 책 표지를 보면, 제목 오른쪽에 '프로페셔널리즘', '실용주의', '자부심' 이 세 단어가 적혀있다.<br>이 세 단어가 책의 내용을 가장 잘 함축할 수 있기 때문이라 짐작한다.</p><ul><li>프로페셔널리즘<ul><li>소프트웨어 장인은 성실하며 정직하다. 고객, 혹은 매니저 등이 불가능해 보이는 일을 부탁하는 경우에는 솔직하게 '아니오'라고 말 할 수 있다.</li><li>소프트웨어 장인은 고객을 만족시킬 수 있는 사람이다.</li></ul></li><li>실용주의<ul><li>실행 관례, 디자인 패턴 등 그 무엇이 되었건, 버그 없는 소프트웨어를 일정 안에 개발하여 고객을 만족시키는 것보다 중요한 것은 없다</li></ul></li><li>자부심<ul><li>소프트웨어 장인은 자신의 일에 자부심을 가지고 있다. 소프트웨어 분야와 커뮤니티가 성장하는 것에 기여한다.</li><li>자신의 지식을 나누고, 배우는 것에 거리낌이 없다.</li></ul></li></ul><p>그 외에도 소프트웨어 개발자로서 도움이 될 만한 소프트 스킬들에 대한 조언을 준다.</p><h2 id="저자가-주는-팁들">저자가 주는 팁들</h2><h3 id="좋은-팀원을-채용하기-위한-방법">좋은 팀원을 채용하기 위한 방법</h3><ul><li>채용 공고 작성법, 면접 방법</li></ul><h3 id="커리어를-만들기-위한-활동">커리어를 만들기 위한 활동</h3><ul><li>블로그, 오픈 소스 활동, 커뮤니티 참여 등</li></ul><h3 id="팀원-매니저를-설득하는-방법">팀원/매니저를 설득하는 방법</h3><ul><li>애자일, XP, TDD, 페어 프로그래밍 등의 실행 관례 적용을 위한 설득</li><li>고객이나 매니저의 요청에 '아니오'라고 말할 땐 항상 대안을 제시해야한다</li></ul><h2 id="저자가-강조하는-점들">저자가 강조하는 점들</h2><p>저자는 책 전반에 걸쳐 XP, TDD, 페어 프로그래밍, 지속적인 통합 등을 계속 강조한다.</p><h3 id="페어-프로그래밍">페어 프로그래밍</h3><ul><li>서로를 통해 새로운 지식을 얻을 수 있으며, 실시간으로 피드백을 받기 때문에 좋은 네이밍이 가능하고, 더 좋은 코드를 작성할 수 있게 된다.</li><li>주기적으로 짝을 바꾸어 실시하여 효율성을 극대화한다.</li></ul><h3 id="TDD">TDD</h3><ul><li>테스트를 통과할 만큼의 코드를 작성하게 되어 오버 엔지니어링을 막아준다.</li><li>확장성을 고려한답시고 미래를 과도하게 예측하면 코드의 복잡도가 올라간다. 필요할 때 수정하자. 디자인 패턴을 과도하게 적용하면 안된다.</li><li>레드-그린-리팩터 사이클을 통해 작은 리팩토링을 자주 적용할 수 있다.</li></ul><h3 id="지속적인-통합">지속적인 통합</h3><ul><li>항상 동작하는 소프트웨어를 자주 릴리즈하면 빠르게 시장이나 고객의 피드백을 받을 수 있다.</li><li>TDD 를 한다면 현재의 소프트웨어가 잘 동작하는 소프트웨어라는 것이 검증된다.</li><li>기획팀에서도 정확한 요구사항을 모를 때 빠른 배포 주기를 통해 오히려 개발팀이 가이드를 제시할 수도 있다.</li><li>기획자의 머리에서 기획이 수정되는 속도와 소스 코드가 수정되는 속도가 같아야한다.</li></ul><h3 id="유닛테스트">유닛테스트</h3><ul><li>개발과 테스트는 별개의 업무가 아니다. 테스트까지 끝내야 해당 개발이 완료되는 것이다.</li><li>과거에는 디버깅을 잘하면 실력있는 개발자로 보았지만, 시대가 변했다. 테스트 코드를 잘 작성하면 디버깅이 필요없다.</li></ul><h3 id="열정과-훈련">열정과 훈련</h3><ul><li>소프트웨어 장인은 소프트웨어 개발에 열정을 가지고 있으며, 끊임없는 훈련을 통해 계속 성장한다.</li></ul><h3 id="그-외">그 외</h3><ul><li>소프트웨어 개발에서 가장 중요한 것은 결국 고객을 만족시키는 것이다.</li><li>TDD와 같은 방식을 사용했을 때 시간이 더 오래걸리는 이유는, 이런 방식 자체의 문제가 아니라 새로운 방식에 익숙해지는데 걸리는 시간 때문이다.</li></ul><p>이 외에도 많은 조언과 경험담이 있다. 이 책은 소프트웨어 개발자로 살아가면서 피와 살이되는 이야기들이 많은것같다.</p><p>그러므로 언젠가는 다시 펼쳐볼 날이 있을것이라 생각한다.</p>]]></content:encoded>
      
      <comments>http://sgc109.github.io/2020/07/05/software-craftman/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
